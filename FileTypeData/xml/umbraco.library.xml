<?xml version="1.0"?>
<doc>
    <assembly>
        <name>umbraco</name>
    </assembly>
    <members>
        <member name="T:umbraco.library">
            <summary>
            Function library for umbraco. Includes various helper-methods and methods to
            save and load data from umbraco. 
            
            Especially usefull in XSLT where any of these methods can be accesed using the umbraco.library name-space. Example:
            &lt;xsl:value-of select="umbraco.library:NiceUrl(@id)"/&gt;
            </summary>
        </member>
        <member name="M:umbraco.library.GetUmbracoHelper">
            <summary>
            Returns a new UmbracoHelper so that we can start moving the logic from some of these methods to it
            </summary>
            <returns></returns>
        </member>
        <member name="F:umbraco.library.IsPublishing">
            <summary>
            Used by umbraco's publishing enginge, to determine if publishing is currently active
            </summary>
        </member>
        <member name="F:umbraco.library.NodesPublished">
            <summary>
            Used by umbraco's publishing enginge, to how many nodes is publish in the current publishing cycle
            </summary>
        </member>
        <member name="F:umbraco.library.PublishStart">
            <summary>
            Used by umbraco's publishing enginge, to determine the start time of the current publishing cycle.
            </summary>
        </member>
        <member name="M:umbraco.library.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:umbraco.library.#ctor(umbraco.page)">
            <summary>
            Initializes a new instance of the <see cref="T:umbraco.library"/> class.
            </summary>
            <param name="Page">The page.</param>
        </member>
        <member name="M:umbraco.library.PythonExecuteFile(System.String)">
            <summary>
            Executes the given python script and returns the standardoutput.
            The Globals known from python macros are not accessible in this context.
            Neither macro or page nor the globals known from python macros are 
            accessible in this context. Only stuff we initialized in site.py
            can be used.
            </summary>
            <param name="file">The filename of the python script including the extension .py</param>
            <returns>Returns the StandardOutput</returns>
        </member>
        <member name="M:umbraco.library.PythonExecute(System.String)">
            <summary>
            Executes the given python expression and returns the standardoutput.
            The Globals known from python macros are not accessible in this context.
            Neighter macro or page nor the globals known from python macros are 
            accessible in this context. Only stuff we initialized in site.py
            can be used.
            </summary>
            <param name="expression">Python expression to execute</param>
            <returns>Returns the StandardOutput</returns>
        </member>
        <member name="M:umbraco.library.UnPublishSingleNode(System.Int32)">
            <summary>
            Unpublish a node, by removing it from the runtime xml index. Note, prior to this the Document should be 
            marked unpublished by setting the publish property on the document object to false
            </summary>
            <param name="DocumentId">The Id of the Document to be unpublished</param>
        </member>
        <member name="M:umbraco.library.UpdateDocumentCache(System.Int32)">
            <summary>
            Publishes a Document by adding it to the runtime xml index. Note, prior to this the Document should be 
            marked published by calling Publish(User u) on the document object.
            </summary>
            <param name="documentId">The Id of the Document to be published</param>
        </member>
        <member name="M:umbraco.library.PublishSingleNode(System.Int32)">
            <summary>
            Publishes the single node, this method is obsolete
            </summary>
            <param name="DocumentId">The document id.</param>
        </member>
        <member name="M:umbraco.library.RefreshContent">
            <summary>
            Refreshes the xml cache for all nodes
            </summary>
        </member>
        <member name="M:umbraco.library.RePublishNodes(System.Int32)">
            <summary>
            Re-publishes all nodes under a given node
            </summary>
            <param name="nodeID">The ID of the node and childnodes that should be republished</param>
        </member>
        <member name="M:umbraco.library.RePublishNodesDotNet(System.Int32)">
            <summary>
            Re-publishes all nodes under a given node
            </summary>
            <param name="nodeID">The ID of the node and childnodes that should be republished</param>
        </member>
        <member name="M:umbraco.library.RePublishNodesDotNet(System.Int32,System.Boolean)">
            <summary>
            Refreshes the runtime xml index. 
            Note: This *doesn't* mark any non-published document objects as published
            </summary>
            <param name="nodeID">Always use -1</param>
            <param name="SaveToDisk">Not used</param>
        </member>
        <member name="M:umbraco.library.JsonToXml(System.String)">
            <summary>
            This will convert a json structure to xml for use in xslt
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.setSession(System.String,System.String)">
            <summary>
            Add a session variable to the current user
            </summary>
            <param name="key">The Key of the variable</param>
            <param name="value">The Value</param>
        </member>
        <member name="M:umbraco.library.setCookie(System.String,System.String)">
            <summary>
            Add a cookie variable to the current user
            </summary>
            <param name="key">The Key of the variable</param>
            <param name="value">The Value of the variable</param>
        </member>
        <member name="M:umbraco.library.NiceUrl(System.Int32)">
            <summary>
            Returns a string with a friendly url from a node.
            IE.: Instead of having /482 (id) as an url, you can have
            /screenshots/developer/macros (spoken url)
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <returns>String with a friendly url from a node</returns>
        </member>
        <member name="M:umbraco.library.NiceUrlFullPath(System.Int32)">
            <summary>
            This method will always add the root node to the path. You should always use NiceUrl, as that is the
            only one who checks for toplevel node settings in the web.config
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <returns>String with a friendly url from a node</returns>
        </member>
        <member name="M:umbraco.library.NiceUrlWithDomain(System.Int32)">
            <summary>
            This method will always add the domain to the path if the hostnames are set up correctly. 
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <returns>String with a friendly url with full domain from a node</returns>
        </member>
        <member name="M:umbraco.library.NiceUrlWithDomain(System.Int32,System.Boolean)">
            <summary>
            This method will always add the domain to the path. 
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <param name="ignoreUmbracoHostNames">Ignores the umbraco hostnames and returns the url prefixed with the requested host (including scheme and port number)</param>
            <returns>String with a friendly url with full domain from a node</returns>
        </member>
        <member name="M:umbraco.library.GetItem(System.Int32,System.String)">
            <summary>
            Returns a string with the data from the given element of a node. Both elements (data-fields)
            and properties can be used - ie:
            getItem(1, nodeName) will return a string with the name of the node with id=1 even though
            nodeName is a property and not an element (data-field).
            </summary>
            <param name="nodeID">Identifier for the node that should be returned</param>
            <param name="alias">The element that should be returned</param>
            <returns>Returns a string with the data from the given element of a node</returns>
        </member>
        <member name="M:umbraco.library.GetCurrentDomains(System.Int32)">
            <summary>
            Checks with the Assigned domains settings and retuns an array the the Domains matching the node
            </summary>
            <param name="NodeId">Identifier for the node that should be returned</param>
            <returns>A Domain array with all the Domains that matches the nodeId</returns>
        </member>
        <member name="M:umbraco.library.GetItem(System.String)">
            <summary>
            Returns a string with the data from the given element of the current node. Both elements (data-fields)
            and properties can be used - ie:
            getItem(nodeName) will return a string with the name of the current node/page even though
            nodeName is a property and not an element (data-field).
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.GetPropertyTypeName(System.String,System.String)">
            <summary>
            Returns that name of a generic property
            </summary>
            <param name="ContentTypeAlias">The Alias of the content type (ie. Document Type, Member Type or Media Type)</param>
            <param name="PropertyTypeAlias">The Alias of the Generic property (ie. bodyText or umbracoNaviHide)</param>
            <returns>A string with the name. If nothing matches the alias, an empty string is returned</returns>
        </member>
        <member name="M:umbraco.library.GetMemberName(System.Int32)">
            <summary>
            Returns the Member Name from an umbraco member object
            </summary>
            <param name="MemberId">The identifier of the Member</param>
            <returns>The Member name matching the MemberId, an empty string is member isn't found</returns>
        </member>
        <member name="M:umbraco.library.GetMedia(System.Int32,System.Boolean)">
            <summary>
            Get a media object as an xml object
            </summary>
            <param name="MediaId">The identifier of the media object to be returned</param>
            <param name="Deep">If true, children of the media object is returned</param>
            <returns>An umbraco xml node of the media (same format as a document node)</returns>
        </member>
        <member name="M:umbraco.library.GetMember(System.Int32)">
            <summary>
            Get a member as an xml object
            </summary>
            <param name="MemberId">The identifier of the member object to be returned</param>
            <returns>An umbraco xml node of the member (same format as a document node), but with two additional attributes on the "node" element:
            "email" and "loginName".
            </returns>
        </member>
        <member name="M:umbraco.library.GetCurrentMember">
            <summary>
            Get the current member as an xml node
            </summary>
            <returns>Look in documentation for umbraco.library.GetMember(MemberId) for more information</returns>
        </member>
        <member name="M:umbraco.library.IsLoggedOn">
            <summary>
            Whether or not the current user is logged in (as a member)
            </summary>
            <returns>True is the current user is logged in</returns>
        </member>
        <member name="M:umbraco.library.IsProtected(System.Int32,System.String)">
            <summary>
            Check if a document object is protected by the "Protect Pages" functionality in umbraco
            </summary>
            <param name="DocumentId">The identifier of the document object to check</param>
            <param name="Path">The full path of the document object to check</param>
            <returns>True if the document object is protected</returns>
        </member>
        <member name="M:umbraco.library.HasAccess(System.Int32,System.String)">
            <summary>
            Check if the current user has access to a document
            </summary>
            <param name="NodeId">The identifier of the document object to check</param>
            <param name="Path">The full path of the document object to check</param>
            <returns>True if the current user has access or if the current document isn't protected</returns>
        </member>
        <member name="M:umbraco.library.md5(System.String)">
            <summary>
            Returns an MD5 hash of the string specified
            </summary>
            <param name="text">The text to create a hash from</param>
            <returns>Md5 has of the string</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThan(System.String,System.String)">
            <summary>
            Compare two dates
            </summary>
            <param name="firstDate">The first date to compare</param>
            <param name="secondDate">The second date to compare</param>
            <returns>True if the first date is greater than the second date</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThanOrEqual(System.String,System.String)">
            <summary>
            Compare two dates
            </summary>
            <param name="firstDate">The first date to compare</param>
            <param name="secondDate">The second date to compare</param>
            <returns>True if the first date is greater than or equal the second date</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThanToday(System.String)">
            <summary>
            Check if a date is greater than today
            </summary>
            <param name="firstDate">The date to check</param>
            <returns>True if the date is greater that today (ie. at least the day of tomorrow)</returns>
        </member>
        <member name="M:umbraco.library.DateGreaterThanOrEqualToday(System.String)">
            <summary>
            Check if a date is greater than or equal today
            </summary>
            <param name="firstDate">The date to check</param>
            <returns>True if the date is greater that or equal today (ie. at least today or the day of tomorrow)</returns>
        </member>
        <member name="M:umbraco.library.CurrentDate">
            <summary>
            Get the current date
            </summary>
            <returns>Current date i xml format (ToString("s"))</returns>
        </member>
        <member name="M:umbraco.library.DateAdd(System.String,System.String,System.Int32)">
            <summary>
            Add a value to a date
            </summary>
            <param name="Date">The Date to user</param>
            <param name="AddType">The type to add: "y": year, "m": month, "d": day, "h": hour, "min": minutes, "s": seconds</param>
            <param name="add">An integer value to add</param>
            <returns>A date in xml format (ToString("s"))</returns>
        </member>
        <member name="M:umbraco.library.GetWeekDay(System.String)">
            <summary>
            Get the day of week from a date matching the current culture settings
            </summary>
            <param name="Date">The date to use</param>
            <returns>A string with the DayOfWeek matching the current contexts culture settings</returns>
        </member>
        <member name="M:umbraco.library.DateAddWithDateTimeObject(System.DateTime,System.String,System.Int32)">
            <summary>
            Add a value to a date. Similar to the other overload, but uses a datetime object instead of a string
            </summary>
            <param name="Date">The Date to user</param>
            <param name="AddType">The type to add: "y": year, "m": month, "d": day, "h": hour, "min": minutes, "s": seconds</param>
            <param name="add">An integer value to add</param>
            <returns>A date in xml format (ToString("s"))</returns>
        </member>
        <member name="M:umbraco.library.DateDiff(System.String,System.String,System.String)">
            <summary>
            Return the difference between 2 dates, in either minutes, seconds or years.
            </summary>
            <param name="firstDate">The first date.</param>
            <param name="secondDate">The second date.</param>
            <param name="diffType">format to return, can only be: s,m or y:  s = seconds, m = minutes, y = years.</param>
            <returns>A timespan as a integer</returns>
        </member>
        <member name="M:umbraco.library.FormatDateTime(System.String,System.String)">
            <summary>
            Formats a string to the specified formate.
            </summary>
            <param name="Date">The date.</param>
            <param name="Format">The format, compatible with regular .net date formats</param>
            <returns>A date in the new format as a string</returns>
        </member>
        <member name="M:umbraco.library.LongDate(System.String,System.Boolean,System.String)">
            <summary>
            Converts a string to Long Date and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <param name="WithTime">if set to <c>true</c> the date will include time.</param>
            <param name="TimeSplitter">The splitter between date and time.</param>
            <returns>A Long Date as a string.</returns>
        </member>
        <member name="M:umbraco.library.CultureExists(System.String)">
            <summary>
            Checks whether the Culture with the specified name exixts in the standard .net cultureInfo.
            </summary>
            <param name="cultureName">Name of the culture.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.LongDateWithDayName(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Converts a string to datetime in the longdate with day name format.
            </summary>
            <param name="Date">The date.</param>
            <param name="DaySplitter">String between day name and date</param>
            <param name="WithTime">if set to <c>true</c> the datetiem will include time.</param>
            <param name="TimeSplitter">String between date and time.</param>
            <param name="GlobalAlias">Culture name.</param>
            <returns>A datetime in the longdate formate with day name, as a string</returns>
        </member>
        <member name="M:umbraco.library.LongDate(System.String)">
            <summary>
            Converts a string to a Long Date and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <returns>A Long Date as a string.</returns>
        </member>
        <member name="M:umbraco.library.ShortDate(System.String)">
            <summary>
            Converts a string to a Short Date and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <returns>A Short Date as a string.</returns>
        </member>
        <member name="M:umbraco.library.ShortDateWithGlobal(System.String,System.String)">
            <summary>
            Converts a string to a Short Date, with a specific culture, and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <param name="GlobalAlias">Culture name</param>
            <returns>A short date with a specific culture, as a string</returns>
        </member>
        <member name="M:umbraco.library.ShortDateWithTimeAndGlobal(System.String,System.String)">
            <summary>
            Converts a string to a Short Date with time, with a specific culture, and returns it as a string
            </summary>
            <param name="Date">The date.</param>
            <param name="GlobalAlias">Culture name</param>
            <returns>A short date withi time, with a specific culture, as a string</returns>
        </member>
        <member name="M:umbraco.library.ShortTime(System.String)">
            <summary>
            Converts a datetime string to the ShortTime format.
            </summary>
            <param name="Date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.ShortDate(System.String,System.Boolean,System.String)">
            <summary>
            Converts a datetime string to the ShortDate format.
            </summary>
            <param name="Date">The date.</param>
            <param name="WithTime">if set to <c>true</c> the date will include time.</param>
            <param name="TimeSplitter">String dividing date and time</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.ReplaceLineBreaks(System.String)">
            <summary>
            Replaces text line breaks with html line breaks
            </summary>
            <param name="text">The text.</param>
            <returns>The text with text line breaks replaced with html linebreaks (<br/>)</returns>
        </member>
        <member name="M:umbraco.library.RenderMacroContent(System.String,System.Int32)">
            <summary>
            Renders the content of a macro. Uses the normal template umbraco macro markup as input.
            This only works properly with xslt macros. 
            Python and .ascx based macros will not render properly, as viewstate is not included.
            </summary>
            <param name="Text">The macro markup to be rendered.</param>
            <param name="PageId">The page id.</param>
            <returns>The rendered macro as a string</returns>
        </member>
        <member name="M:umbraco.library.RenderTemplate(System.Int32,System.Int32)">
            <summary>
            Renders a template.
            </summary>
            <param name="PageId">The page id.</param>
            <param name="TemplateId">The template id.</param>
            <returns>The rendered template as a string</returns>
        </member>
        <member name="M:umbraco.library.RenderTemplate(System.Int32)">
            <summary>
            Renders the default template for a specific page.
            </summary>
            <param name="PageId">The page id.</param>
            <returns>The rendered template as a string.</returns>
        </member>
        <member name="M:umbraco.library.RegisterClientScriptBlock(System.String,System.String,System.Boolean)">
            <summary>
            Registers the client script block.
            </summary>
            <param name="key">The key.</param>
            <param name="script">The script.</param>
            <param name="addScriptTags">if set to <c>true</c> [add script tags].</param>
        </member>
        <member name="M:umbraco.library.RegisterStyleSheetFile(System.String,System.String)">
            <summary>
            Registers the client script include.
            </summary>
            <param name="key">The key.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:umbraco.library.RegisterJavaScriptFile(System.String,System.String)">
            <summary>
            Registers the client script include.
            </summary>
            <param name="key">The key.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:umbraco.library.AddJquery">
            <summary>
            Adds a reference to the jQuery javascript file from the client/ui folder using "jQuery" as a key
            Recommended to use instead of RegisterJavaScriptFile for all nitros/packages that uses jQuery
            </summary>
        </member>
        <member name="M:umbraco.library.StripHtml(System.String)">
            <summary>
            Strips all html from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without any html tags.</returns>
        </member>
        <member name="M:umbraco.library.TruncateString(System.String,System.Int32,System.String)">
            <summary>
            Truncates a string if it's too long
            </summary>
            <param name="Text">The text to eventually truncate</param>
            <param name="MaxLength">The maximum number of characters (length)</param>
            <param name="AddString">String to append if text is truncated (ie "...")</param>
            <returns>A truncated string if text if longer than MaxLength appended with the addString parameters. If text is shorter
            then MaxLength then the full - non-truncated - string is returned</returns>
        </member>
        <member name="M:umbraco.library.Split(System.String,System.String)">
            <summary>
            Split a string into xml elements
            </summary>
            <param name="StringToSplit">The full text to spil</param>
            <param name="Separator">The separator</param>
            <returns>An XPathNodeIterator containing the substrings in the format of <values><value></value></values></returns>
        </member>
        <member name="M:umbraco.library.RemoveFirstParagraphTag(System.String)">
            <summary>
            Removes the starting and ending paragraph tags in a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without starting and endning paragraph tags</returns>
        </member>
        <member name="M:umbraco.library.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces a specified value with a new one.
            </summary>
            <param name="text">The text.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.LastIndexOf(System.String,System.String)">
            <summary>
            Returns the Last index of the specified value
            </summary>
            <param name="Text">The text.</param>
            <param name="Value">The value.</param>
            <returns>Return the last index of a value as a integer </returns>
        </member>
        <member name="M:umbraco.library.GetPreValues(System.Int32)">
             <summary>
             Gets the prevalues from a umbraco DataType with the specified data type id.
             </summary>
             <param name="DataTypeId">The data type id.</param>
             <returns>Returns the prevalues as a XPathNodeIterator in the format:
                 <preValues>
                     <prevalue id="[id]">[value]</prevalue>
                 </preValues> 
            </returns>
        </member>
        <member name="M:umbraco.library.GetPreValueAsString(System.Int32)">
            <summary>
            Gets the umbraco data type prevalue with the specified Id as string.
            </summary>
            <param name="Id">The id.</param>
            <returns>Returns the prevalue as a string</returns>
        </member>
        <member name="M:umbraco.library.GetDictionaryItems(System.String)">
            <summary>
            Gets the dictionary item with the specified key and it's child dictionary items.
            The language version is based on the culture of the current Url.
            </summary>
            <param name="Key">The key.</param>
            <returns>A XpathNodeIterator in the format:
            <DictionaryItems>
                <DictionaryItem key="[dictionaryItemKey]">[dictionaryItemValue]</DictionaryItem>
            </DictionaryItems>
            </returns>
        </member>
        <member name="M:umbraco.library.GetDictionaryItem(System.String)">
            <summary>
            Gets the dictionary item with the specified key.
            </summary>
            <param name="Key">The key.</param>
            <returns>A dictionary items value as a string.</returns>
        </member>
        <member name="M:umbraco.library.GetXmlNodeCurrent">
            <summary>
            Gets the current page.
            </summary>
            <returns>An XpathNodeIterator containing the current page as Xml.</returns>
        </member>
        <member name="M:umbraco.library.GetXmlNodeById(System.String)">
            <summary>
            Gets the page with the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns>Returns the node with the specified id as xml in the form of a XPathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlNodeByXPath(System.String)">
            <summary>
            Queries the umbraco Xml cache with the specified Xpath query
            </summary>
            <param name="xpathQuery">The XPath query</param>
            <returns>Returns nodes matching the xpath query as a XpathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlAll">
            <summary>
            Gets the entire umbraco xml cache.
            </summary>
            <returns>Returns the entire umbraco Xml cache as a XPathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlDocument(System.String,System.Boolean)">
            <summary>
            Fetches a xml file from the specified path on the server.
            The path can be relative ("/path/to/file.xml") or absolute ("c:\folder\file.xml")
            </summary>
            <param name="Path">The path.</param>
            <param name="Relative">if set to <c>true</c> the path is relative.</param>
            <returns>The xml file as a XpathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlDocumentByUrl(System.String)">
            <summary>
            Fetches a xml file from the specified url.
            the Url can be a local url or even from a remote server.
            </summary>
            <param name="Url">The URL.</param>
            <returns>The xml file as a XpathNodeIterator</returns>
        </member>
        <member name="M:umbraco.library.GetXmlDocumentByUrl(System.String,System.Int32)">
            <summary>
            Gets the XML document by URL Cached.
            </summary>
            <param name="Url">The URL.</param>
            <param name="CacheInSeconds">The cache in seconds (so 900 would be 15 minutes). This is independent of the global cache refreshing, as it doesn't gets flushed on publishing (like the macros do)</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.QueryForNode(System.String)">
            <summary>
            Returns the Xpath query for a node with the specified id
            </summary>
            <param name="id">The id.</param>
            <returns>The Xpath query for the node with the specified id as a string</returns>
        </member>
        <member name="M:umbraco.library.GetNodeFromLevel(System.String,System.Int32)">
            <summary>
            Helper function to get a value from a comma separated string. Usefull to get
            a node identifier from a Page's path string
            </summary>
            <param name="path">The comma separated string</param>
            <param name="level">The index to be returned</param>
            <returns>A string with the value of the index</returns>
        </member>
        <member name="M:umbraco.library.SendMail(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an e-mail using the System.Net.Mail.MailMessage object
            </summary>
            <param name="FromMail">The sender of the e-mail</param>
            <param name="ToMail">The recipient of the e-mail</param>
            <param name="Subject">E-mail subject</param>
            <param name="Body">The complete content of the e-mail</param>
            <param name="IsHtml">Set to true when using Html formatted mails</param>
        </member>
        <member name="M:umbraco.library.GetRandom(System.Int32)">
            <summary> 
            These random methods are from Eli Robillards blog - kudos for the work :-)
            http://weblogs.asp.net/erobillard/archive/2004/05/06/127374.aspx
            
            Get a Random object which is cached between requests. 
            The advantage over creating the object locally is that the .Next 
            call will always return a new value. If creating several times locally 
            with a generated seed (like millisecond ticks), the same number can be 
            returned. 
            </summary> 
            <returns>A Random object which is cached between calls.</returns> 
        </member>
        <member name="M:umbraco.library.GetRandom">
            <summary> 
            GetRandom with no parameters. 
            </summary> 
            <returns>A Random object which is cached between calls.</returns> 
        </member>
        <member name="M:umbraco.library.Request(System.String)">
            <summary>
            Get any value from the current Request collection. Please note that there also specialized methods for
            Querystring, Form, Servervariables and Cookie collections
            </summary>
            <param name="key">Name of the Request element to be returned</param>
            <returns>A string with the value of the Requested element</returns>
        </member>
        <member name="M:umbraco.library.ChangeContentType(System.String)">
            <summary>
            Changes the mime type of the current page.
            </summary>
            <param name="MimeType">The mime type (like text/xml)</param>
        </member>
        <member name="M:umbraco.library.ContextKey(System.String)">
            <summary>
            Get any value from the current Items collection.
            </summary>
            <param name="key">Name of the Items element to be returned</param>
            <returns>A string with the value of the Items element</returns>
        </member>
        <member name="M:umbraco.library.GetHttpItem(System.String)">
            <summary>
            Get any value from the current Http Items collection
            </summary>
            <param name="key">Name of the Item element to be returned</param>
            <returns>A string with the value of the Requested element</returns>
        </member>
        <member name="M:umbraco.library.RequestForm(System.String)">
            <summary>
            Get any value from the current Form collection
            </summary>
            <param name="key">Name of the Form element to be returned</param>
            <returns>A string with the value of the form element</returns>
        </member>
        <member name="M:umbraco.library.RequestQueryString(System.String)">
            <summary>
            Get any value from the current Querystring collection
            </summary>
            <param name="key">Name of the querystring element to be returned</param>
            <returns>A string with the value of the querystring element</returns>
        </member>
        <member name="M:umbraco.library.RequestCookies(System.String)">
            <summary>
            Get any value from the users cookie collection
            </summary>
            <param name="key">Name of the cookie to return</param>
            <returns>A string with the value of the cookie</returns>
        </member>
        <member name="M:umbraco.library.RequestServerVariables(System.String)">
            <summary>
            Get any element from the server variables collection
            </summary>
            <param name="key">The key for the element to be returned</param>
            <returns>A string with the value of the requested element</returns>
        </member>
        <member name="M:umbraco.library.Session(System.String)">
            <summary>
            Get any element from current user session
            </summary>
            <param name="key">The key for the element to be returned</param>
            <returns>A string with the value of the requested element</returns>
        </member>
        <member name="M:umbraco.library.SessionId">
            <summary>
            Returns the current ASP.NET session identifier
            </summary>
            <returns>The current ASP.NET session identifier</returns>
        </member>
        <member name="M:umbraco.library.UrlEncode(System.String)">
            <summary>
            URL-encodes a string 
            </summary>
            <param name="Text">The string to be encoded</param>
            <returns>A URL-encoded string</returns>
        </member>
        <member name="M:umbraco.library.HtmlEncode(System.String)">
            <summary>
            HTML-encodes a string 
            </summary>
            <param name="Text">The string to be encoded</param>
            <returns>A HTML-encoded string</returns>
        </member>
        <member name="M:umbraco.library.GetRelatedNodesAsXml(System.Int32)">
            <summary>
            Gets the related nodes, of the node with the specified Id, as XML.
            </summary>
            <param name="NodeId">The node id.</param>
            <returns>The related nodes as a XpathNodeIterator in the format:
                <code>
                    <relations>
                        <relation typeId="[typeId]" typeName="[typeName]" createDate="[createDate]" parentId="[parentId]" childId="[childId]"><node>[standard umbraco node Xml]</node></relation>
                    </relations>
                </code>
            </returns>
        </member>
        <member name="M:umbraco.library.PageId">
            <summary>
            Returns the identifier of the current page
            </summary>
            <returns>The identifier of the current page</returns>
        </member>
        <member name="M:umbraco.library.PageName">
            <summary>
            Returns the title of the current page
            </summary>
            <returns>The title of the current page</returns>
        </member>
        <member name="M:umbraco.library.PageElement(System.String)">
            <summary>
            Returns any element from the currentpage including generic properties
            </summary>
            <param name="key">The name of the page element to return</param>
            <returns>A string with the element value</returns>
        </member>
        <member name="M:umbraco.library.Tidy(System.String,System.Boolean)">
            <summary>
            Cleans the spified string with tidy
            </summary>
            <param name="StringToTidy">The string to tidy.</param>
            <param name="LiveEditing">if set to <c>true</c> [Live Editing].</param>
            <returns></returns>
        </member>
        <member name="M:umbraco.library.Item(System.Int32,System.String)">
            <summary>
            Creates an Umbraco item for the specified field of the specified node.
            This brings the <c>umbraco:Item</c> element functionality to XSLT documents,
            which enables Live Editing of XSLT generated content.
            </summary>
            <param name="nodeId">The ID of the node to create.</param>
            <param name="fieldName">Name of the field to create.</param>
            <returns>An Umbraco item.</returns>
        </member>
        <member name="M:umbraco.library.Item(System.Int32,System.String,System.String)">
            <summary>
            Creates an Umbraco item for the specified field of the specified node.
            This brings the <c>umbraco:Item</c> element functionality to XSLT documents,
            which enables Live Editing of XSLT generated content.
            </summary>
            <param name="nodeId">The ID of the node to create.</param>
            <param name="fieldName">Name of the field to create.</param>
            <param name="displayValue">
                Value that is displayed to the user, which can be different from the field value.
                Ignored if <c>null</c>.
                Inside an XSLT document, an XPath expression might be useful to generate this value,
                analogous to the functionality of the <c>Xslt</c> property of an <c>umbraco:Item</c> element.
            </param>
            <returns>An Umbraco item.</returns>
        </member>
    </members>
</doc>
