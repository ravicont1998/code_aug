<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chad Fowler]]></title>
  
  <link href="http://chadfowler.com/" />
  <updated>2014-12-28T15:12:23+01:00</updated>
  <id>http://chadfowler.com/</id>
  <author>
    <name><![CDATA[Chad Fowler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/ThePassionateProgrammer" /><feedburner:info xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0" uri="thepassionateprogrammer" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry>
    <title type="html"><![CDATA[My Best Conference Talks on Video]]></title>
    <link href="http://chadfowler.com/blog/2014/12/28/my-best-conference-talks-on-video/" />
    <updated>2014-12-28T15:11:36+01:00</updated>
    <id>http://chadfowler.com/blog/2014/12/28/my-best-conference-talks-on-video</id>
    <content type="html"><![CDATA[<p>I&#8217;ve given many presentations over the years at conferences all over the world. These are links to video recordings of some of the best.</p>

<iframe src=https://www.wunderlist.com/list/140970556 width=720 height=550 frameborder=0></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Michael Moritz on Being a World-Class Entrepreneur]]></title>
    <link href="http://chadfowler.com/blog/2014/12/26/michael-moritz-on-being-a-world-class-entrepreneur/" />
    <updated>2014-12-26T14:02:24+01:00</updated>
    <id>http://chadfowler.com/blog/2014/12/26/michael-moritz-on-being-a-world-class-entrepreneur</id>
    <content type="html"><![CDATA[<p>Semil Shah did a nice job of <a href="http://blog.semilshah.com/2014/12/25/mike-moritz-in-foreign-affairs/">pulling highlights</a> from a recent interview with <a href="http://en.wikipedia.org/wiki/Michael_Moritz">Sir Michael Moritz</a> in Foreign Affairs.  This one struck me as a particularily useful checklist for would-be entrepreneurs.</p>

<p>What makes a world-class entrepreneur?</p>

<p>Michael Moritz says:</p>

<ul>
<li>Clarity of thought.</li>
<li>The ability to communicate clearly.</li>
<li>A great sense of mission.</li>
<li>A massive willingness to perservere.</li>
<li>A willingness to make painful decisions.</li>
<li>Extraordinary energy.</li>
</ul>


<p>(I made this into a bulleted list.)</p>

<p>This list rings true to me. I have seen surpluses and deficits in each of these points in myself and others, and I&#8217;ve seen the impact of someone who matches this list well (or doesn&#8217;t but thinks they do).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do You Give Energy or Take Energy?]]></title>
    <link href="http://chadfowler.com/blog/2014/12/14/do-you-give-energy-or-take-energy/" />
    <updated>2014-12-14T13:19:57+01:00</updated>
    <id>http://chadfowler.com/blog/2014/12/14/do-you-give-energy-or-take-energy</id>
    <content type="html"><![CDATA[<p>As you interact with other people in the world, you either generate energy or you deplete it. In a team environment, there are people who always bring the team?s energy level up. When they are absent, you miss it. They somehow direct the flow of conversation and events from dead ends to forward motion. When you discuss a problem with them, you feel better afterward.</p>

<p>And, of course, there are those who have the opposite effect. Any debate becomes an exhausting fight. Negative events are followed by even more negative responses. Hard problems become drudgery. Optimism turns into cynicism. When you part ways, you feel tired.</p>

<p>Most of us play both of these roles, depending on our moods.  Some of us fall almost constantly into one of the two buckets.</p>

<p>There is no reason we can?t all fall into the first category.</p>

<p>Which one are you? Do you give or take energy from the people around you?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Curse of a Name: How to Kill a Good Idea]]></title>
    <link href="http://chadfowler.com/blog/2014/11/25/the-curse-of-a-name-how-to-kill-a-good-idea/" />
    <updated>2014-11-25T17:09:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/11/25/the-curse-of-a-name-how-to-kill-a-good-idea</id>
    <content type="html"><![CDATA[<p>What do the following have in common?</p>

<ul>
<li>Agile Software Development</li>
<li>Six Sigma</li>
<li>Behavior Driven Development</li>
<li>Software Craftsmanship</li>
<li>DevOps</li>
</ul>


<p>Each of these represents a good idea that a group of well-meaning people tried (and succeeded) to spread into the world.</p>

<p>Each is generally poorly defined and poorly understood.</p>

<p>Each term has now lost its meaning.</p>

<p>Each term, with new watered-down, wrong-headed interpretations is being used constantly to create a false sense of security and justification for bad practices.</p>

<p>In each case, adoption of a good idea is being accidentally replaced by adoption of a name which represents that good idea. The term becomes a placeholder for good intention.</p>

<p>I can &#8220;do BDD&#8221; in the same way that I can sign up for a membership at a gym. I feel the sense of accomplishment without the need to actually get healthy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Must-Read Software Development Books]]></title>
    <link href="http://chadfowler.com/blog/2014/10/13/must-read-software-development-books/" />
    <updated>2014-10-13T12:02:00+02:00</updated>
    <id>http://chadfowler.com/blog/2014/10/13/must-read-software-development-books</id>
    <content type="html"><![CDATA[<p>I made this list for some developers at <a href="http://wunderlist.com">Wunderlist</a> before I started working there, and I&#8217;ve been keeping it updated over time.</p>

<iframe src=https://www.wunderlist.com/list/70326287 width=480 height=520 frameborder=0></iframe>


<p>Leave a comment and tell me what you&#8217;d add or change?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Being 40]]></title>
    <link href="http://chadfowler.com/blog/2014/05/11/on-being-40/" />
    <updated>2014-05-11T09:03:00+02:00</updated>
    <id>http://chadfowler.com/blog/2014/05/11/on-being-40</id>
    <content type="html"><![CDATA[<p>Today I am 40 years old.</p>

<p>40 is a confusing age. Old enough to not be a kid anymore by any reasonable definition.  Still young, inexperienced, and stupid enough to feel like one anyway. Maybe that last bit never goes away. Maybe it only intensifies.</p>

<p>One feature of my version of me at 40 is that I have gradually, through the years, weeded my habits of many of the meaningless societal norms I had programmed into me as a child. For example, Kelly and I don&#8217;t celebrate Valentine&#8217;s Day or religious holidays for faiths we don&#8217;t hold (so, really, any of them). And, birthdays are just arbitrary landmarks in an ever-accruing collection of minutes and seconds between birth and death. Christmas, Easter, Halloween, etc. are just days like any other, marked primarily by different music, food, and color schemes. &#8220;Bah, humbug&#8221; says this crusty, aging ruiner-of-annual-spirit!</p>

<p>For some reason people pay special attention to the birthdays and anniversaries that are evenly divisible by 10. Why 10? What&#8217;s so special about 10? Sure, it has some interesting mathematical properties, but we don&#8217;t tend to make much use of them when we measure time.</p>

<p>I can&#8217;t remember my 10th, 20th, or 30th birthdays.  I don&#8217;t recall having done anything spectacular while I was of those ages. Nothing especially remarkable happened to me when I was 10, 20, or 30.</p>

<p>But, here I am at 40, somehow unable to shake the made-up significance of this particular instance of modulus 10 equaling zero.</p>

<p>Here are some facts about becoming 40:</p>

<ul>
<li>The vast majority of people from my part of the world live to be at least 40. It&#8217;s only one day more remarkable than turning 39 + 364 days. And in fact one day <em>less</em> remarkable than turning 39 + 366 days (depending on leap years I guess).</li>
<li>At 40, I&#8217;m statistically probably over half way through with my life. While this might sound heavy, it&#8217;s actually already been <a href="http://en.wikipedia.org/wiki/List_of_U.S._states_by_life_expectancy">true for a few years</a>. I just didn&#8217;t write about it then, because my age wasn&#8217;t evenly divisible by 10.</li>
<li>My turning 40 is slightly more remarkable than my birth and my eventual death. Everybody is born and everybody dies. Not <em>everybody</em> turns 40.</li>
<li>At this age, I&#8217;m becoming aware of just how long and short 40 years is. Literally everything that has ever happened to me can fit into 40 years. If I do another 40, twice as much can happen in total, but&#8230;</li>
<li>Relative to the age of the earth or many other arbitrarily choosable lengths of time, 40 years is so insigificant I might as well not even exist.</li>
<li>40 years ago today, my amazing, kind, wise mother must have been going through one of the most terrifying experiences of her life. She was 19, and I was a human being coming into the world that she was going to have to somehow take care of.  I try to imagine myself doing this at 19. What an imaginary disaster! I hope I&#8217;ve been worth it. She sure did a great job, especially during those times when I was an unreasonable mess (specifically, when I was&#8230; <em>19</em>!!!). Happy Mother&#8217;s Day, mom!</li>
</ul>


<p>Now that I&#8217;m old, I&#8217;m supposed to be able to give young people advice. I don&#8217;t really have any, so instead I&#8217;ll give young readers a glimpse into what 40 is like (for me, anyway).  Here goes.</p>

<p>Being 40 feels very much like being 30. Except your body hurts more. I say that even as someone who is in significantly better shape at 40 than I was at 30.  It still literally hurts. Everyone likes to joke about this, so you think it&#8217;s just a joke like those idiotic jokes everyone likes to tell about being chained to their spouses and such. But it&#8217;s real. Sorry about that. Also, I can&#8217;t stay awake as long as I used to without getting seriously grumpy. I&#8217;m pretty sure I&#8217;m generally less fun than I used to be. That&#8217;s saying something, because I&#8217;ve probably never been the person people considered to be &#8220;fun&#8221; anyway.</p>

<p>But that&#8217;s all superficial. At 40 I feel a much greater sense of appreciation for all I have and all I have been able to do in my life.  I <a href="http://kellyjeanne.org">won at marriage</a> and had the gift of doing it at a very early age, giving me the ability to experience a large portion of my life with <a href="http://kellyjeanne.org">Kelly</a>. I&#8217;ve made a <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">remarkable career for myself</a>. I&#8217;ve had the privilege to travel around the world, working, meeting people, speaking at conferences, and generally exceeding any expectation I&#8217;ve ever had for how things would turn out.</p>

<p>I feel a much stronger sense of urgency to remember to appreciate every minute of every day.  I&#8217;m professionally much more accomplished than I was at 20 or 30. But I don&#8217;t feel the magnitude of that every day. Those things even themselves out on the <a href="http://en.wikipedia.org/wiki/Hedonic_treadmill">hedonic treadmill</a>.</p>

<p>I do, however, feel the magnitude of my increasing, deepening love for my wife and my family. I understand more acutely the rarity of true friendship and the scarcity of <a href="http://chadfowler.com/blog/2014/01/19/empathy/">empathy</a>. And I have learned to differentiate between proximity and truth when it comes to human relationships. A relationship doesn&#8217;t have to be constantly tended to to remain precious, but it must be revered.</p>

<p>Like turning 40, none of these realizations is remarkable. But, sometimes just feeling and expressing is enough. As I get older I realize not everything I do has to be an attempt to be remarkable.</p>

<p>I hope you have a good day today, even if&#8211;especially if&#8211;it&#8217;s not your birthday. Thanks for reading this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Magic of Strace]]></title>
    <link href="http://chadfowler.com/blog/2014/01/26/the-magic-of-strace/" />
    <updated>2014-01-26T16:05:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/26/the-magic-of-strace</id>
    <content type="html"><![CDATA[<p>Early in my career, a co-worker and I were flown from Memphis to Orlando to try to help end a multi-day outage of our company&#8217;s corporate Lotus Domino server. The team in Orlando had been fire-fighting for days and had gotten nowhere. I&#8217;m not sure why they thought my co-worker and I could help. We didn&#8217;t know anything at all about Lotus Domino. But it ran on UNIX and we were pretty good with UNIX. I guess they were desperate.</p>

<p>Lotus Domino was a closed-source black box of a &#8220;groupware&#8221; server. I can&#8217;t remember the exact problem, but it had something to do with files not being properly accessible in its database, and apparently even the escalated support from Lotus was unable to solve the problem.</p>

<p>This was one of the most profoundly educational experiences of my career.  It&#8217;s when I learned what may be for me the most important UNIX tool to date: strace.*</p>

<p>Nowadays I probably use strace or some equivalent almost every day I work as a programmer and/or systems engineer.  In this post I&#8217;ll explain why and how and hopefully show you some tips on how to get the most out of this powerful little tool.</p>

<h2>What is strace?</h2>

<p>strace is a command line tool which lets you trace the system calls and signals received by a given process and its children.  You can either use it to start a program or you can attach to an existing program to trace the calls the program makes to the system.  Let&#8217;s look at a quick example. Say we have a simple C program like this:</p>

<script src="https://gist.github.com/chad/90ffec34a0dff7ba3c52.js"></script>


<p>It doesn&#8217;t do much. It just prints &#8220;Hi&#8221; to the screen&#8221;.  After compiling the program, we can run it with strace to see all of the system calls the program makes:</p>

<script src="https://gist.github.com/chad/b9b19b0e4f3f6492008b.js"></script>


<p>To start the program, we invoke strace and pass the program name (and any parameters we want to pass to the program).  In this case we also passed the &#8220;-s&#8221; flag to strace telling it the maximum string size we want it to print. This is helpful for showing expanded function arguments. Here we pass 2000, which is abitrarily &#8220;enough&#8221; to see everything we need to see in this program.  The default is 32, which in my experience means we&#8217;ll almost definitely miss information we care about in the trace. We also use the &#8220;-f&#8221; flag, which tells strace to follow any children of the program we execute. In this case there are no children, but when using strace regularly it&#8217;s probably good to get into a habit of following a process&#8217;s children so you can see everything that happens when you execute the program.</p>

<p>After the invocation, we see a rather verbose log of every system call. To some (most?), this might look like gibberish. But, even if you have almost <em>no</em> idea what you&#8217;re looking at, you can quickly spot some useful pieces of information.</p>

<p>The first line of the trace shows a call to execve(). Unsurprisingly, execve()&#8217;s job is to run a program. It accepts the path to the program, any arguments as an array, and a list of environment variables to set for the program (which are ommitted from the output since they&#8217;d be so noisey).</p>

<p>The last two lines contain another recognizable sequence. First you see a call to write() with our C program&#8217;s string &#8220;hi\n&#8221;. The first argument to write() is the file descriptor to write to. In this case it&#8217;s &#8220;1&#8221;, which is the process&#8217;s standard output stream. After the write call (which looks garbled because the actual write to standard out showed up along with the strace output), the program calls exit_group().  This function acts like exit() but exits all threads in a process.</p>

<p>What are all these calls between execve() and write()?  They take care of connecting all of the standard C libraries before the main program starts. They basically set up the runtime.  If you look at them carefully you&#8217;ll see that they walk through a series of possible files, check to see if they are accessible, open them, map them into a memory location, and close them.</p>

<p>An important hint: every one of these functions is documented and available to read about using man pages. If you don&#8217;t know what mmap() does, just type &#8220;man mmap&#8221; and find out.</p>

<p>Try running through every function in this strace output and learn what each line does.  It&#8217;s easier than it looks!</p>

<h2>Tracing a running, real-world process</h2>

<p>Most of the time when I need a tool like strace, it&#8217;s because there&#8217;s a process that&#8217;s already running but not acting right. Under normal circumstances these processes can be extremely hard to troubleshoot since they tend to be started by the init system, so you can only use logs and other external indicators to inspect them.</p>

<p>strace makes it easy to look at the inner workings of an already running process. Let&#8217;s say we have a problem with Ruby unicorn processes crashing in production and we&#8217;re unable to see anything useful in the process&#8217;s logs.  We can connect to the process using strace&#8217;s &#8220;-p&#8221; flag.  Since a real production web service is likely to generate a lot of activity, we&#8217;ll also use the &#8220;-o&#8221; flag to have strace send its output to a log file:</p>

<script src="https://gist.github.com/chad/e8264dfdebfe6533c60e.js"></script>


<p>After only a few seconds, this log file has about 9000 lines. Here&#8217;s a portion of it that contains some potentially interesting snippets:</p>

<script src="https://gist.github.com/chad/0c667b459b0b80aa83ea.js"></script>


<p>We won&#8217;t go through every line, but let&#8217;s look at the first one. It&#8217;s a call to select().  Programs use select() to monitor file descriptors on a system for activity. According to the select() man page, its second argument is a list of file descriptors to watch for read activity. select() will block for a configurable period of time waiting for activity on the supplied file descriptors, after which it returns with the number of descriptors on which activity took place.</p>

<p>Ignoring the other parameters for now, we can see that this call to select() watches file descriptors 14 and 15 for read activity and (on the far right of the trace output) returns with the value &#8220;1&#8221;. strace adds extra info to some system calls, so we can see not only the raw result here but also which file descriptor had activity (14). Sometimes we just want the raw return value of a system call. To get this, you can pass an extra flag to strace: &#8220;-e raw=select&#8221;. This tells strace to show raw data for calls to select().</p>

<p>So, what are file descriptors 14 and 15? Without that info this isn&#8217;t very useful.  Let&#8217;s use the lsof command to find out:</p>

<script src="https://gist.github.com/chad/e92956d76dcd8f531bc2.js"></script>


<p>In the 4th column of lsof&#8217;s output, labeled &#8220;FD&#8221;, we can see the file descriptor numbers for the program.  Aha! 14 and 15 are the TCP and UNIX socket ports that Unicorn is listening on.  It makes sense, then, that the process would be using select() to wait for activity.  And in this case we got some traffic on the UNIX socket (file descriptor 14).</p>

<p>Next, we see a series of calls which try to accept the incoming connection on the UNIX socket but return with EAGAIN. This normal behavior in a multi-processing network server. The process goes back and waits for more incoming data and tries again.</p>

<p>Finally, a call to accept4() returns a file descriptor (13) with no error. It&#8217;s time to process a request! First the process checks info on the file descriptor using fstat(). The second argument to fstat() is a &#8220;stat&#8221; struct which the function fills with data. Here you can see its mode (S_IFSOCK) and the size (which shows 0 since this isn&#8217;t a regular file). After presumably seeing that all is as expected with the socket&#8217;s file descriptor, the process receives data from the socket using recvfrom().</p>

<h3>Here&#8217;s where things get interesting</h3>

<p>Like fstat(), recvfrom()&#8217;s first parameter is the file descriptor to receive data from and its second is a buffer to fill with that data.  Here&#8217;s where things get really interesting when you&#8217;re trying to debug a problem: You can see the full HTTP request that has been sent to this web server process! Here it is, expanded for readability:</p>

<script src="https://gist.github.com/chad/53636a6353f160a9e9b9.js"></script>


<p>This can be <em>extremely</em> helpful when you&#8217;re trying to troubleshoot a process you don&#8217;t have much control over. The return value of the recvfrom() call indicates the number of bytes received by the call (167). Now it&#8217;s time to respond.</p>

<p>The process first uses ppoll to ask the system to tell it when it would be OK to write to this socket.  ppoll() takes a list of file descriptors and events to poll for. In this case the process has asked to be notified when writing to the socket would not block (POLLOUT). After being notified, it writes the beginning of the HTTP response header using write().</p>

<p>Next we can see the Unicorn process&#8217;s internal routing behavior at work. It uses stat() to see if there is a physical file on the file system which it could serve at the requested address. stat() returns ENOENT, indicating no file at that path, so the process continues executing code.  This is the typical behavior for static file-based caching on Rails systems. First look for a static file that would satisfy the request, then move on to executing code.</p>

<p>As a final glimpse into the workings of this particular process, we see a SQL query being sent to file descriptor 16. Reviewing our lsof output above, we can see that file descriptor 16 is a TCP connection to another host on that host&#8217;s postgresql port (this number to name mapping is configured in /etc/services in case you&#8217;re curious). The process uses sendto() to send the formatted SQL query to the postgresql server. The third argument is the message&#8217;s size and the fourth is a flag&#8211;MSG_NOSIGNAL in this case&#8211;which tells the operating system not to interrupt it with a SIGPIPE signal if there is a problem with the remote connection.</p>

<p>The process then uses the poll() function to wait for either read or error activity on the socket and, on receiving read activity, receives the postgresql server&#8217;s response using recvfrom().</p>

<p>We skipped over a few details here, but hopefully you can see how with a combination of strace, lsof, and system man pages it&#8217;s possible to understand the details of what a program is doing under the covers.</p>

<h2>What&#8217;s &#8220;normal&#8221;?</h2>

<p>Sometimes we just want to get an overview of what a process is doing. I first remember having this need when troubleshooting a broken off the shelf supply chain management application written in &#8220;Enterprise Java&#8221; in the late 90s.  It worked for some time and then suddenly under some unknown circumstance at a specific time of day it would start refusing connections. We had no source code, and we suffered from the typical level of quality you get from an enterprise support contract (i.e. we solved all problems ourselves).  So I decided to try to compare &#8220;normal&#8221; behavior with the behavior when things went wrong.</p>

<p>I did this by regularly sampling system call activity for the processes and then compared those normal samples with the activity when the process was in trouble. I don&#8217;t remember the exact outcome that time, but it&#8217;s a trick I&#8217;ve used ever since.  Until recently I would always write scripts to run strace, capture the output, and parse it into an aggregate. Then I discovered that strace can do this for me.</p>

<p>Let&#8217;s take a look at a unicorn process again:</p>

<script src="https://gist.github.com/chad/3572ead0ee4419aa56d0.js"></script>


<p>Here we use the &#8220;-c&#8221; flag to tell strace to count the system calls it observes. When running strace with the &#8220;-c&#8221; flag, we have to let it run for the desired amount of time and then interrupt the process (ctrl-c) to see the accumulated data. The output is pretty self-explanatory.</p>

<p>I&#8217;m currently writing at 7am about a system that is used during working hours, so the unicorn process I&#8217;m tracing is mostly inactive. If you read through the previous trace, you shouldn&#8217;t be surprised by the data.  Unicorn spent most of its time in select().  We know now that it uses select() to wait for incoming connections. So, this process spent almost all of its time waiting for someone to ask it to do something. Makes sense.</p>

<p>We can also see that accept4() returned a relatively high number of errors. As we saw in the above example, accept4() will routinely receive the EAGAIN error and go back into the select() call to wait for another connection.</p>

<p>The resulting function list is also a nice to-to list you could use to brush up on your C system calls.  <a href="http://wunderlist.com">Add them to your to-do list</a> and go through and read about one per day until you understand each of them. If you do this, the next time you&#8217;re tracing a Unicorn process under duress in production you&#8217;ll be much more fluent in its language of system calls.</p>

<h2>Finding out what&#8217;s slow</h2>

<p>We&#8217;ll wrap up by looking at how strace can help us determine the cause of performance problems in our systems. We recently used this at work to uncover one of those really gremlin-like problems where random, seemingly unrelated components of our distributed system degraded in performance and we had no idea why.  One of our databases slowed down. Some of our web requests slowed down. And finally, using sudo got slow.</p>

<p>That was what finally gave us a clue. We used strace to trace the execution of sudo and to time each system call sudo made. We finally discovered that the slowness was in a log statement! We had apparently misconfigured a syslog server without realizing it and all of the processes which were talking to that server had mysteriously slowed down.</p>

<p>Let&#8217;s take a look at a simple example of using strace to track down performance problems in processes. Imagine we had a program with the following C source and we wanted to figure out why it takes over 2 seconds to execute:</p>

<script src="https://gist.github.com/chad/4ce21f2a71c33ef35e02.js"></script>


<p>Glancing through the code, there&#8217;s nothing obvious that sticks out (heh), so we&#8217;ll turn to strace for the answer. We use strace&#8217;s &#8220;-T&#8221; flag to ask it to time the execution of each system call during tracing.  Here&#8217;s the output:</p>

<script src="https://gist.github.com/chad/1a3a9cff317103b155fe.js"></script>


<p>As you can see, strace has included a final column with the execution time (in seconds) for each traced call. Following the trace line by line, we see that almost every call was incredibly fast until we finally reach a call that took more than 2 seconds!  Mystery solved.  Apparently something in our programming is calling nanosleep() with an argument of 2 seconds.</p>

<p>In a real-world trace with a lot more output we could save the data to a file, sort through it on the last column, and track down the offending function calls.</p>

<h2>There&#8217;s more!</h2>

<p>strace is an amazingly rich tool.  I&#8217;ve only covered a few of the options that I use most frequently, but it can do a lot more.  Check out the strace man page to browse some of the other ways you can manipulate its behavior.  Especially be sure to look at the uses of &#8220;-e&#8221;, which accepts expressions allowing you to filter traces or change how traces are done.</p>

<p>If you read through this far and you didn&#8217;t know what all these function calls meant, don&#8217;t be alarmed. Neither did I at some point. I learned most of this stuff by tracing broken programs and reading man pages. If you program in a UNIX environment, I encourage you to pick a program you care about and strace its execution. Learn what&#8217;s happening at the system level. Read the man pages. Explore. It&#8217;s fun and you&#8217;ll understand your own work even better than before.</p>

<h2>UPDATE: And the fate of Lotus Domino server?</h2>

<p>Apparently this article appeared to be a dramatic setup for the conclusion of the story of the Domino server. People on other sites, twitter, and in person all asked &#8220;OMG What happened to the Domino server?!?!?!&#8221;  So I&#8217;ll wrap up by telling the rest of the story.</p>

<p>Somehow, by tracing system calls, we fixed the Domino server. I&#8217;m afraid I don&#8217;t remember exactly how, but you can rest assured it was extremely dramatic and a HUGE surprise to everyone involved.</p>

<p>Then my co-worker and I went out into the parking lot and got into our rented, convertible, red Ford Mustang, cranked up the volume on the only CD we brought with us to listen to (Guns &amp; Roses&#8217; Appetite for Destruction), drove safely to the airport, and forgot to take the CD out of the car.  Only after returning otherwise uneventfully to Memphis (via Atlanta) did we realize we had left it in the car.</p>

<p>I hope whoever rented that car next enjoyed the hair metal as much as we did.</p>

<hr />

<ul>
<li>Actually I&#8217;m simplifying a bit. We were on Solaris, and the equivalent tool there was truss. It&#8217;s basically the same. You get the point.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Killing the Crunch Mode Antipattern]]></title>
    <link href="http://chadfowler.com/blog/2014/01/22/the-crunch-mode-antipattern/" />
    <updated>2014-01-22T09:42:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/22/the-crunch-mode-antipattern</id>
    <content type="html"><![CDATA[<p>In the software industry, especially the startup world, Crunch Mode is a ubiquitous, unhealthy antipattern. Crunch Mode refers to periods of overtime work brought on by the need to meet a project deadline. Developers stereotypically glorify the ability and propensity to stay up all night grinding through a difficult problem. It&#8217;s part of our folklore. It&#8217;s part of how we&#8217;re measured. It&#8217;s something companies and leaders take advantage of in order to accomplish more with less.</p>

<p>And it&#8217;s stupid.</p>

<p>If you want a <a href="http://www.slideshare.net/leadandtransform/knowledge-worker-productivity">&#8220;knowledge worker&#8221;</a> to be as ineffective and produce the lowest level of quality possible, <a href="http://www.ncbi.nlm.nih.gov/books/NBK19958/">deprive them of their sleep</a> and hold them to an unrealistic deadline. In other words, activate Crunch Mode.</p>

<h2>Why Not to Crunch?</h2>

<ul>
<li><a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC2656292/">It makes us stupid</a>. The more I work, the less relevant my years of experience become. I constantly make rookie mistakes. I break things in production. I leave messes behind. I waste hours going down the wrong train of thought.</li>
<li>It burns people out, sometimes permanently. They burn up their passion that takes down time to replenish. Unless the non-Crunch work is sufficiently energizing (and frequent), enough crunching can cause your best people to leave.</li>
<li><a href="http://legacy.igda.org/why-crunch-modes-doesnt-work-six-lessons">It makes people lazy and less productive</a>. This may seem ironic, but when someone puts in heroic levels of effort, they start to place less value on each minute. I know that if I work all night, then an hour brain-break mid-day sounds very reasonable. The problem is that these breaks become a habit that can persist between Crunch times.</li>
<li>It&#8217;s a risky way to make your commitments. Crunch Mode means you are using your team beyond capacity. That&#8217;s like trying to drive 50km on 40km of gas. It <em>might</em> be OK, but if you do it all the time you&#8217;re going to end up broken down on the side of the road waiting for help at some point. Maybe more often than not.</li>
<li>Accountability is lost. When someone is working all hours, they can&#8217;t be blamed for mistakes. They can&#8217;t be blamed for coming in late, forgetting an email, introducing bugs, not writing tests, cutting technical corners, and doing all sorts of things that <em>don&#8217;t</em> describe how you want people on your team behaving.</li>
<li>It puts the credibility of management in question every time. Because, managers, believe it or not, every single time it happens, the entire team asks themselves, &#8220;But why?&#8221;</li>
<li>It shows a team that the leader cares about meeting a business goal more than he or she cares about their health. This may sound harsh but it is literally true.</li>
</ul>


<p>The more you have to use your brain, the less effective and healthy Crunch Mode is. In fields that require less creativity and thought, it might even really work as a (ruthless) management technique. In software development, it just doesn&#8217;t.</p>

<h2>Why do we do it?</h2>

<p>The number one reason teams go into Crunch Mode is that their leaders have failed to understand and/or set realistic expectations for the time it takes to complete a project. In worst cases, the deadlines are arbitrarily set by management and not tied to any specific business need. In other cases, the deadlines are inflexible, but the scope can and should be adjusted to a realistic level. Sure, it may be that the team committed to those incorrect deadlines, but it&#8217;s up to the ones <em>deciding</em> on the deadlines to verify that they&#8217;re realistic before making a commitment.</p>

<p>Fear and the resulting breakdown of communication also drive us into Crunch Mode.  &#8220;Can you get this done by <insert very important date here>?&#8221;  &#8220;Uh&#8230;yes?&#8221;  Developers fear saying &#8220;no&#8221;.  Managers fear looking bad by committing to what seem like far off dates.  Managers fear setting far off deadlines, because developers miss dates more often than not. &#8220;If we pad the estimates are we going to miss <em>those</em> by 20% too?&#8221;</p>

<p>Another reason we go into Crunch Mode is that we are perpetuating a culture of cowboy heroism which many of us unwittingly get caught up in. The feeling of finishing tons of work in a short period and depriving oneself of quality personal time can be addicting, especially when it results in &#8220;saving the day&#8221; for a project. Rolling up your sleeves and cranking to the end of a deadline makes you feel valuable in a very <strong>concrete</strong> way. Without your overtime, the project doesn&#8217;t get done on time. With it, the project is saved. It&#8217;s hard to find such black and white ways to add value in daily &#8220;normal&#8221; work.</p>

<p>Maybe the most addictive feature of Crunch Mode is it&#8217;s the easiest way to see a team <em>really</em> click.  At the beginning of Crunch Mode, people get intensely focused. Communication is streamlined. The big important stuff gets tackled quickly and finished. A team can initially raise its skill level a notch with the focus alone. It feels great as both a manager and a team member to work that efficiently and effectively. Unfortunately it&#8217;s difficult (not impossible) to work this way all the time, so we&#8217;re tempted to activate Crunch Mode on occasion just to feel this way again.</p>

<h2>Alternatives to Crunch-Mode</h2>

<ul>
<li>Miss the deadline. Ya, that&#8217;s right. Let your customers down this time. Make less money. Incur opportunity cost. Just fail. You already failed to manage your team and your time. Maybe you should let that have more visible consequences?</li>
<li>Set smaller goals. When you set a massive goal, way off in the future, it&#8217;s impossible to estimate whether it&#8217;s actually realistic. However, if you set a goal for this afternoon, you&#8217;re probably going to be pretty accurate with your estimates.</li>
<li>Measure progress concretely and in small steps. Never trust a status report, even from yourself. In software, the only deliverable that matters is one that you can execute.</li>
<li>Set more realistic goals for the team and problems you face. If you&#8217;re continually having to slip into Crunch Mode, you clearly don&#8217;t understand your capabilities. Admit that you&#8217;re going to go slower than you expected and adjust for it.</li>
</ul>


<p>As unhealthy, counterproductive, and just plain stupid as Crunch Mode is, sometimes you just <em>have</em> to do it.  We all accept that.  Crunch Mode is the nuclear option. A leader <em>needs</em> to have it available as a tool, but each time he or she wields this tool, he or she pays in long term credibility and trust.</p>

<h2>Can we stop it?</h2>

<p>It&#8217;s time to <em>finally</em> stop this insanity. Think of the time, money, energy, and potential happiness wasted on poor planning, communication, and leadership.</p>

<p><strong>Managers</strong>, hold yourself accountable for Crunch Mode when it happens. See it as a personal failure.</p>

<p><strong>Everyone else</strong>, hold yourself accountable for every non-crunch minute you work. Make them count. Overcommunicate. Focus.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Having Something to Say]]></title>
    <link href="http://chadfowler.com/blog/2014/01/21/on-having-something-to-say/" />
    <updated>2014-01-21T10:00:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/21/on-having-something-to-say</id>
    <content type="html"><![CDATA[<p>The first time I was invited to give a keynote speech, I thought &#8220;Why would they want me? I have nothing to say.&#8221; The second time was a few months later. Same thing. What should I talk about? What&#8217;s worth listening to?</p>

<p>Previously I had been asked by <a href="http://pragprog.com">my favorite publisher</a> to write a book. But, what should it be about? I don&#8217;t really have much interesting to say. I&#8217;m just learning, after all.</p>

<p>Now it&#8217;s about ten years later. I&#8217;ve written and contributed to several books. I don&#8217;t know how many conferences I&#8217;ve spoken at anymore or even how many countries I&#8217;ve been invited to.  Still, when I receive a request to speak or am asked my thoughts on a topic by a stranger, I think to myself, &#8220;But, why? What do I have to say?&#8221; I&#8217;m still learning, after all.</p>

<p>I started writing my second book, <a href="http://pragprog.com/book/rr2/rails-recipes">Rails Recipes</a>, roughly a month after I started actually using Rails full time at work. Compared to a lot of other people I knew, I was unqualified to write it. I was going to have to learn a lot in order to write anything at all.  I was even going to have to learn what I needed to learn!</p>

<p>The only thing I had to say about Rails at the time is &#8220;I don&#8217;t know what to say about Rails&#8221;.</p>

<p>By the time I finished the book I had written many small Rails applications and worked on one large one extensively. I had also read almost every line of code in the book and made some fairly decent contributions to the framework.  By the end of the book project, I was an expert.  I had a <em>lot</em> to say about Rails.</p>

<p>But I think one of the reasons the book resonated so well with new Rails developers is that it was written from the fresh perspective of someone still learning.</p>

<p>I saw <a href="http://martinfowler.com">Martin Fowler</a> give a lecture in Bangalore 11 years ago. He said something that has stuck with me ever since: &#8220;Whenever I want to really learn about something, I write a book about it.&#8221; To most people, like me, this is counter-intuitive, but my own history has shown me that it makes a <em>lot</em> of sense.</p>

<p>So, these days, while casting about for something worth saying, I just ask myself, &#8220;What do I wish I had something to say about?&#8221; and I explore that topic aloud. Sometimes it falls flat, and sometimes it results in content that helps me and other people get through the world a little easier.</p>

<p>Don&#8217;t be afraid of not knowing enough or not being experienced enough to help people with your words. The worst case is you learn something in the process. The best case is you create something remarkable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rule One of Management: First, Do No Harm]]></title>
    <link href="http://chadfowler.com/blog/2014/01/19/rule-one-of-management-first-do-no-harm/" />
    <updated>2014-01-19T14:20:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/19/rule-one-of-management-first-do-no-harm</id>
    <content type="html"><![CDATA[<p>Primum non nocere, or &#8220;first, do no harm&#8221; is a universal principle among healthcare professionals worldwide. It essentially means this: given a (bad) situation, your first priority is to not make it <em>worse</em> through your actions. Doctors hold a position of power over their patients. Most patients are unqualified to diagnose and treat themselves, so they must trust the education, experience, and skill of the doctor. A doctor can significantly (even terminally) affect a patient&#8217;s life.</p>

<p>I propose &#8220;first, do no harm&#8221; as a principle to apply in every situation where the do-er has a position of power over those his or her actions affect. Like managers.</p>

<p>Managers hold a position of power in an organization. A manager having a bad day can make a decision that changes the course of years of multiple people&#8217;s lives. A managerial decision can destroy morale, burn people out, or even ruin another person&#8217;s career.</p>

<p>Couple this power with the typical human need  to <em>do something</em>, and we have a problem on our hands.  As people, we grow anxious when we&#8217;re in a position in which we don&#8217;t feel we&#8217;re actively doing anything. Especially for new managers, this can drive a person crazy.  You&#8217;re used to being the producer who gets things done, and suddenly you&#8217;re in meetings and you aren&#8217;t the one producing anymore.  How do you measure your productivity?</p>

<p>In the worst case, you base it on something like the number of decisions you make or the number of processes you change.</p>

<p>Try to remember the last time you were in a job and things got screwed up because a manager was out of the office.  Now try to remember the last time things were screwed up because of an offhand comment, a sarcastic remark, a poorly timed email, or a decision some manager made.</p>

<p>At a tactical level, the risks of managerial action far outweigh the risks of inaction.</p>

<p>Therefore, managers&#8211;especially you first-time new managers, please don&#8217;t feel pressured to just <em>do something</em>. Be reasoned and careful when you encounter a new problem.</p>

<p>Rule number one is: First, do no harm.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your Most Important Skill: Empathy]]></title>
    <link href="http://chadfowler.com/blog/2014/01/19/empathy/" />
    <updated>2014-01-19T09:10:00+01:00</updated>
    <id>http://chadfowler.com/blog/2014/01/19/empathy</id>
    <content type="html"><![CDATA[<p><strong>TL;DR</strong> - Empathy is the most important skill you can practice. It will lead to greater success personally and professionally and will allow you to become happier the more you practice.</p>

<p>I&#8217;ve never considered myself a <em>real</em> programmer.  I know at this point it&#8217;s probably silly to say, but I started my scholastic and professional life as a musician, and I&#8217;ve never quite recovered from the <a href="http://en.wikipedia.org/wiki/Impostor_syndrome">Impostor Syndrome</a> that comes with making such a shift. One of the faux-self-deprecations I use to describe myself is: &#8220;I&#8221;m a people person who just <em>happens</em> to express this tendency through programming and technology projects&#8221;.</p>

<p>This seems a bit ironic, because I&#8217;m also a very strong introvert. I recharge when I&#8217;m alone or in very small groups of people (no more than 2 including myself is ideal) and I exhaust myself in crowds or in constant discussion.</p>

<p>But, on reflection this all fits together perfectly.  The reason crowds of people exhaust me is that I am constantly trying to read and understand the feelings and motivations of those around me. If I could just go through life talking and not listening, hearing but not processing, alone time and time in groups wouldn&#8217;t be so different for me. But I can&#8217;t, and I obviously don&#8217;t think I should.</p>

<p>Coming back to the impostor-syndrome-induced self-identification as a &#8220;people person&#8221; rather than a programmer, I guess when I say that I&#8217;m probably right.  I spend much more time and much more effort learning how to understand the people around me than I do code, systems, architectures, and technologies. I&#8217;m not an expert or even remarkable at it, but I work on it consciously and consistently. The <em>it</em> I&#8217;m describing here is called &#8220;empathy&#8221;.</p>

<blockquote><p>the action of understanding, being aware of, being sensitive to, and vicariously experiencing the feelings, thoughts, and experience of another of either the past or present without having the feelings, thoughts, and experience fully communicated in an objectively explicit manner</p><footer><strong>Merriam Webster</strong> <cite><a href='http://www.merriam-webster.com/dictionary/empathy'>Empathy</a></cite></footer></blockquote>


<p>As exhausting as it is for me, this is the primary reason for the success and good fortune I&#8217;ve enjoyed in my life.</p>

<h2>Why practice empathy?</h2>

<p>Why should you explicitly work to enhance your ability to empathize with others?</p>

<ul>
<li>You will be more likely to treat the people you care about the way they wish you would treat them.</li>
<li>You will better understand the needs of people around you.</li>
<li>You will more clearly understand the perception you create in others with your words and actions.</li>
<li>You will understand the unspoken parts of your communication with others.</li>
<li>You will better understand the needs of your customers at work.</li>
<li>You will have less trouble dealing with interpersonal conflict both at home and at work.</li>
<li>You will be able to more accurately predict the actions and reactions of people you interact with.</li>
<li>You will learn how to motivate the people around you.</li>
<li>You will more effectively convince others of your point of view.</li>
<li>You will experience the world in higher resolution as you perceive through not only your perspective but the perspectives of those around you.</li>
<li>You will find it easier to deal with the negativity of others if you can better understand their motivations and fears. Lately when I find myself personally struggling with someone, I remind myself to empathize and I immediately calm myself and accept the situation for what it is.</li>
</ul>


<p>You will be a better leader, a better follower, and most important, a better friend.</p>

<h2>How to practice</h2>

<p>Here are a few ideas on how to practice to develop your empathy.</p>

<h3>Listen</h3>

<p>Listen intently when people speak to you. Conversations, especially regarding heated topics, often form a rhythm of back and forth speaking, with each party starting a point just before the conversation partner has ended his or her point.  I&#8217;m sure you will recognize this pattern in yourself if you think about it. Before whoever is speaking has finished, you have already formulated your response, and you can&#8217;t wait to spit it out.</p>

<p>Next time you find yourself in a conversation like this, slow down.  Force yourself to listen to the words you&#8217;re hearing. Consider the speaker&#8217;s motivation behind saying what he or she is saying. Consider the life and work experience that has led to his or her current world-view.</p>

<p>Respond visually and with sound (&#8220;ah&#8221;, &#8220;oh&#8221;, &#8220;ya?&#8221;) but allow at least a second to pass before responding verbally.  Ask followup questions to better understand what the speaker intended or how they feel before you respond with your own opinions.</p>

<p>Hopefully you&#8217;ll need more time before you speak, because you&#8217;ve been too focused on the speaker to start preparing your response.</p>

<h3>Watch and Wonder</h3>

<p>Put down your cell phone. Instead of checking twitter or reading articles while you wait for the train or are stuck in a traffic jam, look at the people around you and imagine who they might be, what they might be thinking and feeling, and where they are trying to go right now. Are they frustrated? Happy? Singing? Looking at their phones? Do they live here or are they from out of town?</p>

<p>Have they had a nice day? Try to actually wonder and care.</p>

<h3>Know Your Enemies</h3>

<p>Maybe &#8220;enemies&#8221; is an exaggeration here, but think about a tense, preferably ongoing dispute you have with someone. Maybe it&#8217;s a co-worker in a competing faction for how you should do some critical part of your work. Maybe it&#8217;s a family member you&#8217;re constantly warring with for some reason. Whoever it is, you&#8217;re used to them being wrong and you being right.  You tend to even jump to disagreeing with them regardless of what they are arguing for, because you are on opposite sides of the war.</p>

<p>Now imagine the entire situation from that person&#8217;s point of view. The person is probably not evil or an idiot. They might not even be <em>wrong</em> about whatever it is you disagree about. In my own life, the problem is usually more of a fundamental philosophical difference than about the specific conflicts that occur.</p>

<p>How does this person feel about how you respond to them when you disagree?  What fears cause the other person to be tense and hard to reason with? How do you exacerbate those fears rather than calm them? What <em>valid</em> arguments could this person make against your views and your handling of the situation? What <em>good</em> intentions does this person hold? What are the positive motivations behind what you perceive as a negative outcome? Do you agree with the motivations? If so, are they more important than the specific conflict?</p>

<p>If you&#8217;re like me, just going through this exercise (maybe a couple of times with the same subject) can greatly reduce your frustration and anxiety over some of the most stressful inter-personal situations. It may sound obvious, but doing it is very different from understanding how it could work.</p>

<h3>Choose the Other Side</h3>

<p>While talking with <a href="http://kellyjeanne.wordpress.com/">Kelly</a> about practicing empathy, she had a great idea. It&#8217;s hard to side with your own &#8220;enemy&#8221; as I suggested above. It requires a forced third person perspective, which takes a lot of discipline when you&#8217;re thinking about your own stress and emotions.</p>

<p>So to make it easier, try it as an actual third person. We all have friends and loved ones that <em>complain</em> to us about how they have been treated by other people. It&#8217;s human nature to complain and it&#8217;s the duty of a loved one to listen sympathetically.  The assumption is that the listener is on the side of the complainer. A supportive friend or loved one almost always is, instinctually.</p>

<p>Try practicing (internally) taking the opposing view point. Don&#8217;t go with your default reaction immediately. Start on the other side and work your way back.</p>

<p>This reminds me of a cool technique Dave Thomas blogged about several years (almost 11 years ago, wow!) ago called <a href="http://pragdave.me/post/72367988702/debating-with-knives">debating with knives</a>.  It&#8217;s an exercise which forces you onto both sides of a debate to help open your mind to the realities of the topic under discussion.</p>

<hr/>


<p>This is probably all obvious, but I doubt many people really <em>practice</em> empathy. I hope you will give it a try, even for a short while, and I hope it improves your life and the lives of those around you even if just a little.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Eggs]]></title>
    <link href="http://chadfowler.com/blog/2013/08/13/about-eggs/" />
    <updated>2013-08-13T08:27:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/08/13/about-eggs</id>
    <content type="html"><![CDATA[<p>This week&#8217;s Passionate Programmer excerpt is a warning against placing too strong a bet on technology you don&#8217;t control. It&#8217;s funny how dated it sounds. Case in point, I guess.</p>

<p><a href="http://chadfowler.com/passionate-programmer/eggs.html">Don&#8217;t Put All Your Eggs in Someone Else&#8217;s Basket</a>.</p>

<p>As a side note, it was in <a href="http://pragdave.pragprog.com">Dave Thomas&#8217;s</a> original edits for the book in 2005 that, through his pull-quote &#8220;Vendor-centric views are typically myopic&#8221;, I learned the word &#8220;myopic&#8221;. I&#8217;ve learned two other words from Dave in my life: &#8220;anodyne&#8221; and &#8220;octothorpe&#8221;. Thanks, Dave!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Not to Panic - Passionate Programmer Excerpt]]></title>
    <link href="http://chadfowler.com/blog/2013/07/23/how-not-to-panic-passionate-programmer-excerpt/" />
    <updated>2013-07-23T07:46:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/07/23/how-not-to-panic-passionate-programmer-excerpt</id>
    <content type="html"><![CDATA[<p><a href="http://chadfowler.com/blog/2013/07/16/passionate-programmer-a-free-excerpt-almost-every-week/">As I mentioned last week,</a> I&#8217;m releasing chapters of <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">The Passionate Programmer</a> every(ish) week until they&#8217;ve all been posted.</p>

<p>This week&#8217;s chapter is one I actually re-read myself sometimes as a reminder. It&#8217;s about how to stay calm  and focused in the face of stress. It&#8217;s one of the most important lessons I&#8217;ve learned (and continue to learn) throughout my career and applies to every job I&#8217;ve had. Too often, our reaction to stress is to freak out and <em>just</em> <em>start</em> <em>trying</em> <em>shit</em>.</p>

<p>In the chapter, I mention a Doom deathmatch player who went by the name &#8220;Noskill&#8221;.  I learned after the release of the book that Noskill aka Chris Crosby had <a href="http://doomwiki.org/wiki/Chris_Crosby_(NoSkill)">died in a car accident at the age of 23</a>. As weird as it is, I hope Chris&#8217;s family discovers that he somehow influenced my career and appeared in a book for software developers, perhaps some of whom will go on to work on the games he loved so much.</p>

<p>Anyway, here it is.  <a href="http://chadfowler.com/passionate-programmer/panic.html">Don&#8217;t Panic</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Six Years of Ignorance]]></title>
    <link href="http://chadfowler.com/blog/2013/07/22/my-six-years-of-ignorance/" />
    <updated>2013-07-22T10:09:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/07/22/my-six-years-of-ignorance</id>
    <content type="html"><![CDATA[<p>Six years ago, I gave up a bad habit.  Since 1999 I had been using RSS then Atom as my interesting-stuff changelog.  I eventually amassed a subscription collection of hundreds of feeds with subjects ranging from the obvious (tech news and software development) to religion, philosophy, language, and music. Every day, all day, new items
came into my feed reader. I had gotten pretty good at culling uninteresting feeds, so <em>lots</em> of it was relevant and exciting to me. If a tech company was rumored to be in acquisition talks, I knew it. If Rubyists started favoring a new library for accessing relational databases or creating parsers, I knew that.</p>

<p>And the unread items count kept growing. Along with it so did my anxiety over not being &#8220;in the know&#8221;.</p>

<p>So six years ago, I deleted the feed reader from my computer and removed every trace of my RSS + Atom collection from the internet so it could not tempt me. What started as a month-long experiment while traveling through Europe ended as the new norm.</p>

<p>But how do I keep in touch with what&#8217;s happening? How do I avoid being completely ignorant?</p>

<p>I guess I don&#8217;t. I am ignorant of most of what&#8217;s changing day to day in the software industry. So far that&#8217;s working out fine for me. When something becomes more than just a community- or industry-wide distraction, I learn about it. And because I&#8217;m not so distracted trying to keep up with <em>everything</em>, I have time to catch up on the things that matter.</p>

<hr />

<p>I was reminded of this today when I read MG Siegler&#8217;s <a href="https://medium.com/tech-blogging/43d78a82e103">assertion that very little of what you read on the internet is actually true</a>, which was sent to me via email by a colleague.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passionate Programmer - a Free Chapter (Almost) Every Week Until It's Done]]></title>
    <link href="http://chadfowler.com/blog/2013/07/16/passionate-programmer-a-free-excerpt-almost-every-week/" />
    <updated>2013-07-16T09:15:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/07/16/passionate-programmer-a-free-excerpt-almost-every-week</id>
    <content type="html"><![CDATA[<p>Starting today I&#8217;m going to post a free excerpt from <a href="http://pragprog.com/book/cfcar2/the-passionate-programmer">The Passionate Programmer</a> every week (time permitting) until I&#8217;ve posted them all. (Thanks to <a href="http://pragprog.com">my generous publisher</a> for allowing this!)</p>

<p>If you have read it and wished you could share sections with friends and co-workers that don&#8217;t own the book, now&#8217;s your chance. If you haven&#8217;t read it and really don&#8217;t want to spend money on it, you can read it for free (out of order) over the course of the next year.</p>

<p>I&#8217;d love to hear your reactions (via twitter, blog posts, hacker news comments, etc.) to each chapter as I post them. I released the first edition of the book eight years ago, and I always hear bits and pieces of feedback on the book in general. I&#8217;m hoping this gives me and the book&#8217;s readers a chance to focus discussion on each concept.</p>

<p>The first post is one of my favorites and one that gets little attention. It&#8217;s about &#8220;value rigidity&#8221; and the human tendency to hold on to things that are important to them so tightly that they can&#8217;t detect a change in context. I talk about this concept somewhat narrowly in the book, but I constantly see its application in daily life.  For me it&#8217;s a very useful mirror in which to inspect my behaviors.</p>

<p>Here it is: <a href="http://chadfowler.com/passionate-programmer/">The South Indian Monkey Trap</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trash Your Servers and Burn Your Code: Immutable Infrastructure and Disposable Components]]></title>
    <link href="http://chadfowler.com/blog/2013/06/23/immutable-deployments/" />
    <updated>2013-06-23T18:57:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/06/23/immutable-deployments</id>
    <content type="html"><![CDATA[<p>As a developer and sometimes system administrator, one of the scariest things I ever encounter is a server that&#8217;s been running for ages which has seen multiple upgrades of system and application software.</p>

<p>Why? Because an old system inevitably grows warts. They start as one-time hacks during outages. A quick edit to a config file saves the day. &#8220;We&#8217;ll put it back into Chef later,&#8221; we say, as we finally head off to sleep after a marathon fire fighting session.</p>

<p>Cron jobs spring up in unexpected places, running obscure but critical functions that only one person knows about. Application code is deployed outside of the normal straight-from-source-control process.</p>

<p>The system becomes finicky. It only accepts deploys in a certain manual way. The init scripts no longer work unless you do something special and unexpected.</p>

<p>And, of course the operating system has been patched again and again (in the best case) in line with the standard operating procedures, and the inevitable entropy sets in.  Or, worse, it has never been patched and now you&#8217;re too afraid of what would happen if you try.</p>

<p>The system becomes a house of cards. You fear any change and you fear replacing it since you don&#8217;t know everything about how it works.</p>

<p>We&#8217;ve tried lots of ways to avoid this problem over the years from team policy to automation.  We&#8217;re trying a new one now <a href="http://wunderlist.com">at work</a>: Immutable Deployments.</p>

<p>Many of us in the software industry are starting to take notice of the benefits of immutability in software architecture.  We&#8217;ve seen an increased interest over the past few years in functional programming techniques with rising popularity of languages such as Erlang, Scala, Haskell, and Clojure.  Functional languages offer immutable data structures and single assignment variables. The claim (which many of us believe based on informal empirical evidence) is that immutability leads to programs that are easier to reason about and harder to screw up.</p>

<p>So why not take this approach (where possible) with infrastructure? If you absolutely know a system has been created via automation and never changed since the moment of creation, most of the problems I describe above disappear. Need to upgrade? No problem. Build a new, upgraded system and throw the old one away.  New app revision? Same thing. Build a server (or image) with a new revision and throw away the old ones.</p>

<p>At <a href="http://6wunderkinder.com">6Wunderkinder</a>, we have been moving in this direction over the past 4 months.  It&#8217;s giving us the confidence we need to rapidly iterate on our backend infrastructure as we continue to make things faster, more scalable and dependable for our customers and flexible to move our applications forward more freely.</p>

<p>Maybe more remarkable, though, is that like a new programming paradigm, thinking of infrastructure this way changes how I view our systems pretty fundamentally. New patterns and anti-patterns emerge. It is changing how I think not just about deployments but about application code (and even team structure).</p>

<p>This idea is a work in progress for me. We&#8217;re obviously not the first ones to think of it, so there is a lot to learn.  It also implies some kind of &#8220;cloud&#8221; infrastructure, though I think modern software architecture generally does.</p>

<p>Expect to hear more about the tactical details of this from me here and <a href="http://railsisrael2013.events.co.il/presentations/852-disposable-components">at various conferences this year</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Give a Keynote]]></title>
    <link href="http://chadfowler.com/blog/2013/06/08/how-to-give-a-keynote/" />
    <updated>2013-06-08T17:05:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/06/08/how-to-give-a-keynote</id>
    <content type="html"><![CDATA[<p>I&#8217;m not sure how it happened, but out of the many conferences in which I&#8217;ve spoken, I&#8217;ve only submitted two talk proposals.
Both were to O&#8217;Reilly&#8217;s OSCON. One was in 2003. It was not accepted. Too bad; It would have been really good. The next was in 2004.
It was accepted. It wasn&#8217;t all that great.</p>

<p>Every other time, I&#8217;ve been asked to speak&#8211;usually to give a keynote.</p>

<p>So before my first keynote speech, I had only delivered one conference talk. And I didn&#8217;t think it wasn&#8217;t any good (sorry OSCON 2004!). When the organizers of this conference contacted me,
I responded and said the following, &#8220;I&#8217;d love to do this and I&#8217;m thrilled to be asked. Just to avoid embarrassment, though, are you sure you didn&#8217;t mean to
email <a href="http://martinfowler.com">Martin Fowler</a>?&#8221; Apparently they had a nice laugh and then responded
saying they really meant me.</p>

<p>My next feeling was not relief. It was terror. It was a great honor to be asked to keynote at <em>anything</em>. But, why me? What would I speak about? What the hell is a keynote anyway?</p>

<p>As I did with many new challenges back then, I turned to my friend <a href="http://pragprog.com">Dave Thomas</a>. &#8220;Dave, they asked me to keynote and they didn&#8217;t mean Martin. What do I do?!&#8221;
Dave was kind enough to give me the single most useful piece of advice I&#8217;ve ever gotten as a keynote speaker.</p>

<p>He said something like &#8220;Keynotes are after-dinner entertainment. Don&#8217;t try to teach them. Just keep them entertained and leave them with something to think about.&#8221;</p>

<p>So I did that and I think it went well.  In fact, at this particular conference, <a href="http://david.heinemeierhansson.com/">one of the other keynote speakers</a> got snowed in at home in Chicago and couldn&#8217;t make it.
So for my first keynote appearance, I actually gave two. One planned and one that I wrote while at the conference. Pretty good practice!</p>

<p>Since then I&#8217;ve done enough of them in enough different circumstances (conference types, countries, with and without live translation, remotely via video, etc.) that I&#8217;ve had the chance to fail and succeed in a number of different ways. Occasionally, a friend or colleague encountering their first keynote calls or writes and says &#8220;Chad, they asked me to keynote. What do I do?!&#8221;</p>

<p>Here are some answers:</p>

<ul>
<li>Dave was absolutely right. Entertain and provoke thought.</li>
<li>Do not introduce yourself. If you&#8217;re a keynote speaker, they probably already know who you are anyway. If they don&#8217;t, they won&#8217;t care while you introduce yourself.</li>
<li>Tell a personal story. Among other reasons, it will loosen you up and allow you to communicate better with your audience. A personal story is easier to deliver unrobotically than the programmed content you might be crafting. So use it to connect with the audience and to motivate the message of your talk.</li>
<li>Be vulnerable. Subtly admitting that you&#8217;re imperfect and not completely certain about everything puts you in the right frame of mind to engage with the people listening to you and to avoid the trap of trying to appear to be right about everything.</li>
<li>Don&#8217;t try to prove yourself. You&#8217;ve already been asked to keynote. If you get insecure and spend time proving why you&#8217;re the right person to be speaking on your topic it will sound like you&#8217;re arrogant, which you probably aren&#8217;t.</li>
<li>Converse with the audience. I personally look into the eyes of the people listening to me in exactly the same way I would if I were having a conversation over coffee. I go on a tangent and I can see that they&#8217;re bored so I change my approach. They might not be directly speaking to you, but they communicate with their reactions, and letting the communication happen in two directions is extremely important for both you and the listener.</li>
<li>Say significantly less than you think you need to. Don&#8217;t fall into the trap of trying to cram in as much as you can. Kent says this better than I will:</li>
<li>Read and apply Kent Beck&#8217;s <a href="https://www.facebook.com/note.php?note_id=536820369684165">three focusing questions</a></li>
<li>Create a story arc and apply a little drama if you can. There are many devices you can use for this. Watch your favorite speakers, and see how they use foreshadowing, repetition, rhythm, etc. Dave Thomas is amazingly gifted at this.  <a href="http://www.confreaks.com/presenters/137-dave-thomas">Find some of his keynotes and watch for how he does it.</a></li>
<li>Express your opinions unapologetically. You&#8217;re a human&#8211;not an information dispenser. People can look up facts on the internet.  They&#8217;re at the conference to listen to your perspective on things.</li>
<li>Leave your audience with something to wonder about. Unanswered questions are OK in a keynote.</li>
</ul>


<p>I&#8217;m not the greatest keynote speaker to have ever lived, but I try to do them well and constantly aspire to be better. As with everything I write or speak about, I hope these tips are meaningfully helpful to at least one person.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Get Your Conference Talk Accepted]]></title>
    <link href="http://chadfowler.com/blog/2013/05/25/how-to-get-your-conference-talk-accepted/" />
    <updated>2013-05-25T16:33:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/05/25/how-to-get-your-conference-talk-accepted</id>
    <content type="html"><![CDATA[<p>I am one of the original organizers of both <a href="http://rubyconf.org">RubyConf</a> and <a href="http://railsconf.com">RailsConf</a>.  Combined, I&#8217;ve organized or been on the program committee for around 25 conferences.  I&#8217;ve read hundreds of proposals and seen hundreds of conference talks.</p>

<p>Occasionally, a proposal or a talk stands out. Here&#8217;s one that I still think of when new would-be speakers ask how to get their first talk accepted. When preparing for RailsConf 2010 in Baltimore, we received this email from <a href="https://twitter.com/r00k">Ben Orenstein</a>:</p>

<p><img src="http://chadfowler.com/images/talk/1.png"></p>

<p>Ben had never spoken at a conference before, and he knew we had a lot of proposals to consider.  Here&#8217;s what I like about his email (and <a href="http://www.youtube.com/watch?v=pg33EQCdMxw">video</a>):</p>

<ul>
<li>Most important, he showed us how enthustiastic he to give the talk. Enthusiasm is one of the most sorely lacking features of technical conference talks. When someone is excited, I am more engaged.</li>
<li>He reassured us that, though we might not have heard of him before, he was qualified to give the subject a good treatment.</li>
<li>He told us he was going to be prepared when the conference rolled around. It&#8217;s rare that a conference presenter explicitly says &#8220;I am going to be ready&#8221;.</li>
<li>He went to the trouble to make a video which showed us both what his style might be like in person and again that he really wanted this opportunity to speak.</li>
</ul>


<p>I immediately looked up his proposal, and as you might guess it was as thoughtful and energetic as the email and video.</p>

<p>I then sent my <a href="http://benscofield.com/">conference co-chair, Ben Scofield</a>, the following email:</p>

<p><img src="http://chadfowler.com/images/talk/2.png"></p>

<p>And his response:</p>

<p><img src="http://chadfowler.com/images/talk/3.png"></p>

<p>This is surely only one way to get a talk accepted, but as a new presenter, it&#8217;s a good example to consider.</p>

<p>(You can hear a conversation between me and Ben about this proposal and more at the <a href="http://learn.thoughtbot.com/podcast/44">Giant Robots Podcast</a>.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discipline: Stomp Out Cynicism]]></title>
    <link href="http://chadfowler.com/blog/2013/05/20/discipline-stomp-out-cynicism/" />
    <updated>2013-05-20T11:36:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/05/20/discipline-stomp-out-cynicism</id>
    <content type="html"><![CDATA[<p>Here&#8217;s an exercise you can put into place right now which will have a lasting, significant, positive effect on your life
and the lives of those you work, live, collaborate, and play with. There are two versions: an easy version and a harder version. Start with the easy
version unless you&#8217;re the kind of person who has to do things the hard way.</p>

<h2>The easy version</h2>

<p>Whenever you have a cynical thought, keep it to yourself. Never utter, write, or otherwise convey it. Put it away. Think it to yourself all day if you have to, but never express it.</p>

<h2>The harder version</h2>

<p>Whenever you have a cynical thought, keep it to yourself. Analyze it. Scrutinize it. Prove it to be wrong. Discover the personal fear within you from which it grew, and make a plan to address that fear
fully. Be thankful to the negative emotion for giving you the opportunity to understand your own weaknesses.</p>

<p>Cynicism is born of laziness and fear: It&#8217;s easy to complain about something. It&#8217;s harder to fix it. It&#8217;s both scary and liberating to trust other people to try to be their best.</p>

<h2>Update</h2>

<p>As <a href="https://twitter.com/dhh">@dhh</a> pointed out on Twitter after I posted this, I worded this more absolutely than intended. I meant this to be an &#8220;exercise&#8221; (see the first sentence). Skepticism is healthy. Sometimes, cynicism is the right reaction. But, I believe most of us could use a lot less of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who I Want to Hire]]></title>
    <link href="http://chadfowler.com/blog/2013/04/09/who-i-want-to-hire/" />
    <updated>2013-04-09T09:44:00+02:00</updated>
    <id>http://chadfowler.com/blog/2013/04/09/who-i-want-to-hire</id>
    <content type="html"><![CDATA[<p>There&#8217;s a person I want to work with. I can&#8217;t find this person. I&#8217;ve literally searched the world,
and I can hardly find a trace.</p>

<p>I&#8217;m not talking about someone specific. In fact, that&#8217;s the problem.  I&#8217;m talking about a set of traits
and an attitude which is more scarce than I realized until recently.  I know a small handful of people who
fit what I&#8217;m looking for, but they&#8217;re busy and unavailable right now.</p>

<p>I was talking to one of these people recently about my desire to, as I put it, &#8220;hire someone like you&#8221;, and we
both realized how hard it is to name really <em>anyone</em> <em>else</em> who fits the description. Given this and the fact that
there are so many <em>bad</em> job descriptions for developers in the world, I&#8217;m writing down what I&#8217;m looking for
in hopes that this person (you?) is out there:</p>

<ul>
<li>Everyone knows that when you take on a task whether it&#8217;s huge and scary or tiny and boring, you&#8217;re going to see it through to the best of your ability.</li>
<li>It&#8217;s <em>obvious</em> to everyone around you that you have fun with your work and with your co-workers.</li>
<li>You care about how your work and attitude affects those around you. I mean <em>really</em> care. If you hurt someone, it hurts you. Everything you do runs through this filter.</li>
<li>You understand that communication is the <em>biggest</em> responsibility of your job as a developer and the one you&#8217;re least likely to get right unless you focus on it.</li>
<li>You focus on shipping software that matters to your users and that matters to the company you&#8217;re building it for.</li>
<li>You&#8217;ve experimented with and survived many different types of development and project methodologies, which has left you with a healthy appreciation for what works from the so-called &#8220;agile&#8221; methodologies and those that came before (and after) them.</li>
<li>You have no time for ceremony. Maybe you even hate it, but &#8220;hate&#8221; is too dogmatic a term.</li>
<li>You are humble enough to bend to the will of the frameworks, technologies, constraints, and <em>people</em> you work with when doing so won&#8217;t have a materially negative impact. In other words, you can play by someone else&#8217;s rules when that&#8217;s the easiest and/or best thing to do.</li>
<li>You make pragmatic (often boring) technology choices at work and you play in your free time. You don&#8217;t build science projects just because you are smart enough to build them.</li>
<li>You are confident enough that you don&#8217;t have to prove to anyone what a great developer you are, and therefore&#8230;</li>
<li>You don&#8217;t mind being the one that looks bad when you deserve it. You make mistakes sometimes, because you&#8217;re human, but rather than dwell on them you choose to fix and then learn from them.</li>
<li>You love to teach and learn from your co-workers.</li>
<li>You are confident with a number of programming languages, operating systems, and architectures. You probably have one of each you prefer right now, but you&#8217;re neither dogmatic nor myopic in your focus on it.</li>
</ul>


<p>From my perspective, these are the things that matter.</p>

<p>I don&#8217;t care if you&#8217;re the smartest person I&#8217;ve ever met.
I don&#8217;t care if you know everything about the technologies I&#8217;m deploying.
I don&#8217;t want a &#8220;rock star&#8221;. I definitely don&#8217;t want a ninja.
I don&#8217;t care if you write books, contribute to Open Source software, or speak at conferences. I do those things, and I know how little they predict how well I do my job.</p>

<p>If this describes you, I definitely want to know you. If you are interested in building scalable APIs and automated infrastructures for those APIs and would like to work with me in Berlin making beautiful productivity software, I <em>definitely</em> want to know you. Please get in touch.</p>
]]></content>
  </entry>
  
</feed>
