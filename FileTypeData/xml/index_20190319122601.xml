<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Eidhof </title>
    <link>http://chris.eidhof.nl/post/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2017</rights>
    <updated>2017-12-08 00:00:00 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Swift Analytics</title>
          <link>http://chris.eidhof.nl/post/swift-analytics/</link>
          <pubDate>Fri, 08 Dec 2017 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/swift-analytics/</guid>
          <description>&lt;p&gt;There have been a number of blog posts about the best way to do analytics in Swift:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;John writes about using &lt;a href=&#34;https://www.swiftbysundell.com/posts/building-an-enum-based-analytics-system-in-swift&#34;&gt;enums&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Matt writes about using &lt;a href=&#34;http://matt.diephouse.com/2017/12/when-not-to-use-an-enum/&#34;&gt;structs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Dave writes about using &lt;a href=&#34;https://davedelong.com/blog/2017/12/07/misusing-enums/&#34;&gt;protocols&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Soroush writes about &lt;a href=&#34;http://khanlou.com/2017/12/misusing-subclassing/&#34;&gt;subclasses&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Krzysztof &lt;a href=&#34;https://twitter.com/kprofic/status/938910246810062848&#34;&gt;asked&lt;/a&gt; about whether I would do a function-based version.&lt;/p&gt;

&lt;p&gt;I think all solutions are valid. They&amp;rsquo;re different embeddings of the same problem. Another version to consider is the simplest one: just inlining the network calls into your code. Maybe that already does the job, and you&amp;rsquo;re set.&lt;/p&gt;

&lt;p&gt;Now imagine that you find you make mistakes when writing the code. For example, you forget to provide the name, or you mistype the metadata keys. To prevent this, you could wrap up the network calls in functions. Functional programmers call this a &lt;em&gt;shallow embedding&lt;/em&gt;: you express your domain logic in a very thin wrapper. It&amp;rsquo;s the easiest way to add type-safety to an untyped domain.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;deep embedding&lt;/em&gt; is when you can also inspect (and possibly modify) the data. This is useful when you write tests, or when you need to change the structure at a later point. Matt&amp;rsquo;s struct-based solution provides the most minimal way to inspect the data: he just bundles up the analytics parameters. By providing type-safe initializers, the construction is made type-safe, even though the actual embedding (a string and a dictionary) loses the type-safety. This is a great choice, unless you need to transform the data afterwords.&lt;/p&gt;

&lt;p&gt;John&amp;rsquo;s enum-based approach is another deep embedding: by providing cases for each possible event, he maintains the structure and type-safety. If you need to transform analytic events (for example, merging multiple events, or changing them in some other way) the enum approach is great: as long as you get out an enum value at the end, you know the data is well-formed.&lt;/p&gt;

&lt;p&gt;Dave&amp;rsquo;s protocol-based approach allows you to have multiple different representations for your analytics events. For example, you could use Dave&amp;rsquo;s approach with John&amp;rsquo;s enums, Matt&amp;rsquo;s structs, and Soroush&amp;rsquo;s subclasses, at the same time, as long as they all conform to the protocol.&lt;/p&gt;

&lt;p&gt;Another approach would be to group all the function wrappers in a protocol that you can send events to. Then you could have two implementations: one for testing/serialization, and for direct sending of the events. This is often used with dependency injection.&lt;/p&gt;

&lt;p&gt;Each approach above adds a little bit of complexity to the code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a big fan of using the simplest possible solution for your problem and team:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re a precise programmer and don&amp;rsquo;t care about testing, just inline your network calls&lt;/li&gt;
&lt;li&gt;If you want more type-safety, wrap your network calls in functions&lt;/li&gt;
&lt;li&gt;If you use Matt&amp;rsquo;s struct-based initializer, you know the result is well-formed.&lt;/li&gt;
&lt;li&gt;If you plan to transform your values and want this to be safe, use John&amp;rsquo;s enums&lt;/li&gt;
&lt;li&gt;If you need ultimate flexibility, use Dave&amp;rsquo;s protocols&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>A Micro Auto Layout DSL</title>
          <link>http://chris.eidhof.nl/post/micro-autolayout-dsl/</link>
          <pubDate>Fri, 27 Oct 2017 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/micro-autolayout-dsl/</guid>
          <description>&lt;p&gt;These days, I&amp;rsquo;m using fewer external libraries. First, I don&amp;rsquo;t like most Swift libraries out there, they&amp;rsquo;re often implemented in a complicated way and contain too many protocols for my taste. Second, I&amp;rsquo;m not sure how they&amp;rsquo;ll be maintained in the future, and most libraries are pretty big &amp;ndash; I don&amp;rsquo;t really want to own that code. Third, I&amp;rsquo;m too lazy to set up a dependency manager, so I&amp;rsquo;ll keep my projects dependency-free.&lt;/p&gt;

&lt;p&gt;However, the other day as I was writing some UIKit code, I found myself annoyed at the verbosity of Auto Layout. Here&amp;rsquo;s some code that I wrote over and over again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()
let label = UILabel()
view.addSubview(label)
label.translatesAutoresizingMaskIntoConstraints = false
NSLayoutConstraint.activate([
    label.leadingAnchor.constraint(equalTo: view.leadingAnchor),
    label.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
    label.trailingAnchor.constraint(equalTo: view.trailingAnchor)
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s always the same pattern: adding the subview, setting &lt;code&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to false, and then activating the constraints. The first anchor and the second anchor are almost always the same, and on the left-hand side we always have the child and on the right-hand side we always have the parent view. Often, when I write the code above, I forget to active the constraints or forget to set &lt;code&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt;. Let&amp;rsquo;s try to solve as many of these problems as we can in as little code as possible.&lt;/p&gt;

&lt;p&gt;Rather than pulling in a library, I decided to write my own. The first bit of my micro-library is a function that, given a child and a parent, returns a layout constraint:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias Constraint = (_ child: UIView, _ parent: UIView) -&amp;gt; NSLayoutConstraint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ideally, we would now write a method &lt;code&gt;equal&lt;/code&gt; which allows us to write following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let constraint: Constraint = equal(\.topAnchor, \.safeAreaLayoutGuide.topAnchor)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that &lt;code&gt;constraint&lt;/code&gt; is just a description of a layout constraint &amp;ndash; it&amp;rsquo;s still waiting for a concrete child and parent view. It says that, given a child and parent, the child&amp;rsquo;s top anchor should be equal to the parent&amp;rsquo;s &lt;code&gt;safeAreaLayoutGuide.topAnchor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can implement &lt;code&gt;equal&lt;/code&gt; with a little bit of keypath magic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func equal&amp;lt;Axis, Anchor&amp;gt;(_ keyPath: KeyPath&amp;lt;UIView, Anchor&amp;gt;, _ to: KeyPath&amp;lt;UIView, Anchor&amp;gt;, constant: CGFloat = 0) -&amp;gt; Constraint where Anchor: NSLayoutAnchor&amp;lt;Axis&amp;gt; {
    return { view, parent in
        view[keyPath: keyPath].constraint(equalTo: parent[keyPath: to], constant: constant)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the time, the two layout anchors are the same (e.g. &lt;code&gt;leadingAnchor&lt;/code&gt; and &lt;code&gt;leadingAnchor&lt;/code&gt;), so let&amp;rsquo;s write a small helper for that case:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func equal&amp;lt;Axis, Anchor&amp;gt;(_ keyPath: KeyPath&amp;lt;UIView, Anchor&amp;gt;, constant: CGFloat = 0) -&amp;gt; Constraint where Anchor: NSLayoutAnchor&amp;lt;Axis&amp;gt; {
    return equal(keyPath, keyPath, constant: constant)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let&amp;rsquo;s solve the last two problems: we don&amp;rsquo;t want to forget to set &lt;code&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; to false, and we don&amp;rsquo;t want to forget to activate the constraints. What if we create another version of &lt;code&gt;addSubview&lt;/code&gt; that does this for us?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension UIView {
    func addSubview(_ child: UIView, constraints: [Constraint]) {
        addSubview(child)
        child.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate(constraints.map { $0(child, self) })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have everything in place to rewrite our initial example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let view = UIView()
let label = UILabel()
view.addSubview(label, constraints: [
   equal(\.leadingAnchor),
   equal(\.topAnchor, \.safeAreaLayoutGuide.topAnchor),
   equal(\.trailingAnchor)
])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code is shorter and much more to the point. The &lt;code&gt;translatesAutoresizingMaskIntoConstraints&lt;/code&gt; is set automatically, and all constraints are activated. Instead of depending on a big library, we wrote three methods; 15 lines of code in total. Obviously, there are many things you can&amp;rsquo;t do with this: for example, you can&amp;rsquo;t easily keep a reference to a specific constraint and change the &lt;code&gt;constant&lt;/code&gt; property. That&amp;rsquo;s fine, we can keep using the regular Auto Layout API for this.&lt;/p&gt;

&lt;p&gt;There are a few obvious extensions that are left as an exercise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a way to constrain an anchor to a constant (instead of another anchor and a constant)&lt;/li&gt;
&lt;li&gt;Add a way to constrain to a different view than the parent (e.g. the content view of a &lt;code&gt;UIVisualEffectView&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to Florian Kugler for helping me simplify the code a lot. We also made a &lt;a href=&#34;https://talk.objc.io/episodes/S01E75-auto-layout-with-key-paths&#34;&gt;Swift Talk&lt;/a&gt; episode about the code above, check it out.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Struct References</title>
          <link>http://chris.eidhof.nl/post/references/</link>
          <pubDate>Wed, 19 Jul 2017 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/references/</guid>
          <description>

&lt;blockquote&gt;
&lt;p&gt;The full code for this is available as a &lt;a href=&#34;https://gist.github.com/chriseidhof/3423e722d1da4e8cce7cfdf85f026ef7&#34;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently I was trying to find a good use for Swift&amp;rsquo;s new keypaths. This post shows one example that accidentally came up. This is something I&amp;rsquo;ve researched, and not something I&amp;rsquo;ve used in production code. That said, I think it&amp;rsquo;s very cool and I&amp;rsquo;d like to show it.&lt;/p&gt;

&lt;p&gt;Consider a simple address book application. It contains a table view with people, and a detail view controller which shows a &lt;code&gt;Person&lt;/code&gt; instance. If &lt;code&gt;Person&lt;/code&gt; were defined as a class, it&amp;rsquo;d look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class Person {
    var name: String
    var addresses: [Address]
    init(name: String, addresses: [Address]) {
        self.name = name
        self.addresses = addresses
    }
}

class Address {
    var street: String
    init(street: String) {
        self.street = street
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The definition for our (fake) view controller has a single person property, which gets passed in through the initializer. It also has a &lt;code&gt;change&lt;/code&gt; method which changes a property of the person.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class PersonVC {
    var person: Person
    init(person: Person) {
        self.person = person
    }
    
    func change() {
        person.name = &amp;quot;New Name&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s consider the problems with &lt;code&gt;Person&lt;/code&gt; being an object:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Because &lt;code&gt;person&lt;/code&gt; is a reference, a different part of the code might change it. This is very useful as it allows communication. At the same time, we need to make sure that we stay notified of those changes (for example, through KVO) otherwise we might be displaying data that&amp;rsquo;s out of sync. Making sure we stay notified is not straightforward.&lt;/li&gt;
&lt;li&gt;Getting notified when &lt;code&gt;addresses&lt;/code&gt; change is even harder. Observing nested properties that are objects is difficult.&lt;/li&gt;
&lt;li&gt;If we need an independent local copy of &lt;code&gt;Person&lt;/code&gt;, we&amp;rsquo;d need to implement something like &lt;code&gt;NSCopying&lt;/code&gt;. This is quite a bit of work. Even when we have that, we still have to think: do we want a deep copy (e.g. should the addresses also be copied) or a shallow copy (the &lt;code&gt;addresses&lt;/code&gt; array is independent, but the addresses inside still point to the same objects)?&lt;/li&gt;
&lt;li&gt;If we think of &lt;code&gt;Person&lt;/code&gt; as being in an array inside &lt;code&gt;AddressBook&lt;/code&gt;, we might want to know when the address book changes (for example, to serialize it). Knowing when something inside your object graph changes either requires a lot of boilerplate, or a lot of observing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Address&lt;/code&gt; were structs, we&amp;rsquo;d have different issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each struct is an independent copy. This is useful, because we know it&amp;rsquo;s always consistent and can&amp;rsquo;t change underneath us. However, after we change a &lt;code&gt;Person&lt;/code&gt; in the detail view controller, we&amp;rsquo;d need a way to communicate those changes back to the table view (or to the address book). With objects, this happens /automatically (by changing the &lt;code&gt;Person&lt;/code&gt; in place).&lt;/li&gt;
&lt;li&gt;We can observe the root address book struct, and know of any changes that happen within. Still, we can&amp;rsquo;t easily observe parts of it (e.g. observe the first person&amp;rsquo;s name).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The solution that I present combines the best of both worlds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have mutable shared references&lt;/li&gt;
&lt;li&gt;The underlying data is structs, so we can always get our own independent copy&lt;/li&gt;
&lt;li&gt;We can observe any part: either at the root level, or observe individual properties (e.g. the first person&amp;rsquo;s name)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ll first show how to use it, then how it works and finally discuss some of the limitations and gotchas.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s create an address book using structs:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Address {
    var street: String
}
struct Person {
    var name: String
    var addresses: [Address]
}

typealias Addressbook = [Person]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can use our &lt;code&gt;Ref&lt;/code&gt; type (short for &lt;code&gt;Reference&lt;/code&gt;). We create a new &lt;code&gt;addressBook&lt;/code&gt; reference with an initial empty array. Then we append a &lt;code&gt;Person&lt;/code&gt;. Now for the cool part: by using subscripts, we can get a &lt;em&gt;reference&lt;/em&gt; to the first person, and then a &lt;em&gt;reference&lt;/em&gt; to their name. We can change the value of the reference to &lt;code&gt;&amp;quot;New Name&amp;quot;&lt;/code&gt; and verify that we&amp;rsquo;ve changed the original address book:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let addressBook = Ref&amp;lt;Addressbook&amp;gt;(initialValue: [])
addressBook.value.append(Person(name: &amp;quot;Test&amp;quot;, addresses: []))
let firstPerson: Ref&amp;lt;Person&amp;gt; = addressBook[0]
let nameOfFirstPerson: Ref&amp;lt;String&amp;gt; = firstPerson[\.name]
nameOfFirstPerson.value = &amp;quot;New Name&amp;quot;
addressBook.value // shows [Person(name: &amp;quot;New Name&amp;quot;, addresses: [])]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The types for &lt;code&gt;firstPerson&lt;/code&gt; and &lt;code&gt;nameOfFirstPerson&lt;/code&gt; can be omitted, they&amp;rsquo;re just there for readability.&lt;/p&gt;

&lt;p&gt;If at any point we want to get our own independent value of &lt;code&gt;Person&lt;/code&gt;, we can do that. From there on, we can work with &lt;code&gt;myOwnCopy&lt;/code&gt; and be sure it&amp;rsquo;s not changed from underneath us. No need to implement &lt;code&gt;NSCopying&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var myOwnCopy: Person = firstPerson.value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can observe any &lt;code&gt;Ref&lt;/code&gt;. Just like with reactive libraries, we get a disposable back which controls the lifetime of an observer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var disposable: Any?
disposable = addressBook.addObserver { newValue in
    print(newValue) // Prints the entire address book
}

disposable = nil // stop observing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also observe &lt;code&gt;nameOfFirstPerson&lt;/code&gt;. In the current implementation, this gets triggered anytime anything changes in the address book, but more about that later.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;nameOfFirstPerson.addObserver { newValue in
    print(newValue) // Prints a string
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s go back to our &lt;code&gt;PersonVC&lt;/code&gt;. We can change its implementation to use a &lt;code&gt;Ref&lt;/code&gt;. The view controller can now subscribe to changes. In reactive programming, a signal is typically read-only (you only receive changes), and you need to figure another way to communicate back. In the &lt;code&gt;Ref&lt;/code&gt; approach, we can write back using &lt;code&gt;person.value&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class PersonVC {
    let person: Ref&amp;lt;Person&amp;gt;
    var disposeBag: Any?
    init(person: Ref&amp;lt;Person&amp;gt;) {
        self.person = person
        disposeBag = person.addObserver { newValue in
            print(&amp;quot;update view for new person value: \(newValue)&amp;quot;)
        }
    }
    
    func change() {
        person.value.name = &amp;quot;New Name&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;PersonVC&lt;/code&gt; doesn&amp;rsquo;t know where the &lt;code&gt;Ref&amp;lt;Person&amp;gt;&lt;/code&gt; comes from: a person array, a database, or somewhere else. In fact, we can add undo support to our address book by wrapping our array inside a &lt;a href=&#34;http://chris.eidhof.nl/post/undo-history-in-swift/&#34;&gt;&lt;code&gt;History&lt;/code&gt; struct&lt;/a&gt;, and we don&amp;rsquo;t need to change the &lt;code&gt;PersonVC&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let source: Ref&amp;lt;History&amp;lt;Addressbook&amp;gt;&amp;gt; = Ref(initialValue: History(initialValue: []))
let addressBook: Ref&amp;lt;Addressbook&amp;gt; = source[\.value]
addressBook.value.append(Person(name: &amp;quot;Test&amp;quot;, addresses: []))
addressBook[0].value.name = &amp;quot;New Name&amp;quot;
print(addressBook[0].value)
source.value.undo()
print(addressBook[0].value)
source.value.redo()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a lot of other things we could add to this: caching, &lt;a href=&#34;https://gist.github.com/chriseidhof/40fde6c2be5519d5bb341fc65b3029ad&#34;&gt;serialization&lt;/a&gt;, automatic synchronization (e.g. only modify and observe on a private queue), but that&amp;rsquo;s future work.&lt;/p&gt;

&lt;h3 id=&#34;implementation-details&#34;&gt;Implementation Details&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s look at how this thing is implemented. We&amp;rsquo;ll start by defining the &lt;code&gt;Ref&lt;/code&gt; class. A &lt;code&gt;Ref&lt;/code&gt; consists of a way to get and set a value, and a way to add an observer. It has an initializer that asks for just those three things:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Ref&amp;lt;A&amp;gt; {
    typealias Observer = (A) -&amp;gt; ()
    
    private let _get: () -&amp;gt; A
    private let _set: (A) -&amp;gt; ()
    private let _addObserver: (@escaping Observer) -&amp;gt; Disposable
    
    var value: A {
        get {
            return _get()
        }
        set {
            _set(newValue)
        }
    }
    
    init(get: @escaping () -&amp;gt; A, set: @escaping (A) -&amp;gt; (), addObserver: @escaping (@escaping Observer) -&amp;gt; Disposable) {
        _get = get
        _set = set
        _addObserver = addObserver
    }    

    func addObserver(observer: @escaping Observer) -&amp;gt; Disposable {
        return _addObserver(observer)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now add an initializer that observers a single struct value. It creates a dictionary of observers and a variable. Whenever the variable changes, all observers get notified. It uses the initializer defined above and passes on &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, and &lt;code&gt;addObserver&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Ref {
    convenience init(initialValue: A) {
        var observers: [Int: Observer] = [:]
        var theValue = initialValue {
            didSet { observers.values.forEach { $0(theValue) } }
        }
        var freshId = (Int.min...).makeIterator()
        let get = { theValue }
        let set = { newValue in theValue = newValue }
        let addObserver = { (newObserver: @escaping Observer) -&amp;gt; Disposable in
            let id = freshId.next()!
            observers[id] = newObserver
            return Disposable {
                observers[id] = nil
            }
        }
        self.init(get: get, set: set, addObserver: addObserver)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s consider we have &lt;code&gt;Person&lt;/code&gt; reference. In order to get a reference to its &lt;code&gt;name&lt;/code&gt; property, we need a way to both read and write the name. A &lt;code&gt;WritableKeyPath&lt;/code&gt; provides just that. We can thus add a &lt;code&gt;subscript&lt;/code&gt; to &lt;code&gt;Ref&lt;/code&gt; that creates a reference to part of the &lt;code&gt;Person&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Ref {
    subscript&amp;lt;B&amp;gt;(keyPath: WritableKeyPath&amp;lt;A,B&amp;gt;) -&amp;gt; Ref&amp;lt;B&amp;gt; {
        let parent = self
        return Ref&amp;lt;B&amp;gt;(get: { parent._get()[keyPath: keyPath] }, set: {
            var oldValue = parent.value
            oldValue[keyPath: keyPath] = $0
            parent._set(oldValue)
        }, addObserver: { observer in
            parent.addObserver { observer($0[keyPath: keyPath]) }
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above is a bit hard to read, but in order to use the library, you don&amp;rsquo;t really need to understand how it&amp;rsquo;s implemented.&lt;/p&gt;

&lt;p&gt;One day, keypaths in Swift will also support subscripts, but until then, we&amp;rsquo;ll have to add another subscript for collections. The implementation is almost the same as above, except that we use indices rather than keypaths:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Ref where A: MutableCollection {
    subscript(index: A.Index) -&amp;gt; Ref&amp;lt;A.Element&amp;gt; {
        return Ref&amp;lt;A.Element&amp;gt;(get: { self._get()[index] }, set: { newValue in
            var old = self.value
            old[index] = newValue
            self._set(old)
        }, addObserver: { observer in
                self.addObserver { observer($0[index]) }
        })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all there is to it. The code uses a lot of advanced Swift features, but it&amp;rsquo;s under a hundred lines. It wouldn&amp;rsquo;t be possible without all the new Swift 4 additions: it relies on keypaths, generic subscripts, open-ended ranges, and a lot of features that were previously available in Swift.&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;As stated before, this is research code, not production-level code. I&amp;rsquo;m very interested to see where and how this breaks once I start using it in a real app. Here&amp;rsquo;s a snippet that had some very counter-intuitive behavior for me:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var twoPeople: Ref&amp;lt;Addressbook&amp;gt; = Ref(initialValue:
    [Person(name: &amp;quot;One&amp;quot;, addresses: []),
     Person(name: &amp;quot;Two&amp;quot;, addresses: [])])
let p0 = twoPeople[0]
twoPeople.value.removeFirst()
print(p0.value) // what does this print?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d be really interested in pushing this further. I can imagine adding support for queues, so that you can do something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var source = Ref&amp;lt;Addressbook&amp;gt;(initialValue: [], 
    queue: DispatchQueue(label: &amp;quot;private queue&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can also imagine that you could use this with a database. The &lt;code&gt;Var&lt;/code&gt; would allow you to both read and write, as well as subscribe to any notifications:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class MyDatabase {
   func readPerson(id: Person.Id) -&amp;gt; Var&amp;lt;Person&amp;gt; {
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;d love to hear comments and feedback. If you want to get a deeper understanding of how this works, try implementing it yourself (even after you&amp;rsquo;ve had a look at the code). By the way, we&amp;rsquo;ll also make two &lt;a href=&#34;http://talk.objc.io/&#34;&gt;Swift Talk&lt;/a&gt; episodes about this. If you&amp;rsquo;re interested in Florian and me building this from scratch, please subscribe there.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Update: thanks to Egor Sobko for pointing out a subtle but crucial mistake: I was sending the observers &lt;code&gt;initialValue&lt;/code&gt; rather than &lt;code&gt;theValue&lt;/code&gt;. Fixed!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Reducers</title>
          <link>http://chris.eidhof.nl/post/reducers/</link>
          <pubDate>Mon, 03 Jul 2017 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/reducers/</guid>
          <description>

&lt;blockquote&gt;
&lt;p&gt;This blogpost is part of an upcoming project, more about that soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Reducers are a way to deal with state changes, and are great for dealing with asynchronous code. They come in a number of different ways, and are used in architectures like &lt;a href=&#34;http://redux.js.org/docs/introduction/Motivation.html&#34;&gt;Redux&lt;/a&gt;, &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;Elm&lt;/a&gt;, &lt;a href=&#34;https://facebook.github.io/flux/&#34;&gt;Flux&lt;/a&gt; and more.&lt;/p&gt;

&lt;p&gt;Instead of giving a definition up front, we&amp;rsquo;ll look refactor an example app that is well-suited to write with reducers. For a playground with the full code (both &lt;a href=&#34;https://github.com/chriseidhof/reducers-examples/blob/master/Reducers.playground/Pages/Currency%20Conversion.xcplaygroundpage/Contents.swift&#34;&gt;before&lt;/a&gt; and &lt;a href=&#34;https://github.com/chriseidhof/reducers-examples/blob/master/Reducers.playground/Pages/Currency%20Conversion%20-%20Reducers.xcplaygroundpage/Contents.swift&#34;&gt;after&lt;/a&gt; refactoring) see &lt;a href=&#34;https://github.com/chriseidhof/reducers-examples&#34;&gt;reducers-examples&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;To demonstrate reducers, we will write a simple currency conversion app that converts EUR amounts into USD amounts. It has three views: an text field for the input amount, a button to reload the current exchange rate and an output label. The output label will only display the amount if the input amount can be parsed and the current exchange rate are loaded. If the exchanges rates are loaded, changing the input amount should immediately change the output. Here&amp;rsquo;s the code that computes the output rate (this is hooked up to the &lt;code&gt;.editingChanged&lt;/code&gt; event of the text field):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var rate: Double?    
@objc func inputChanged() {
    guard let rate = rate else { return }
    guard let text = input.text, let number = Double(text) else { return }
    output.text = &amp;quot;\(number * rate) USD&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up, the code that reloads the exchange rates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@objc func reload() {
    URLSession.shared.dataTask(with: ratesURL()) { (data, _, _) in
        guard let data = data,
            let json = try? JSONSerialization.jsonObject(with: data, options: []),
            let dict = json as? [String:Any],
            let dataDict = dict[&amp;quot;rates&amp;quot;] as? [String:Double],
            let rate = dataDict[Currency.usd.rawValue] else { return }
        DispatchQueue.main.async { [weak self] in
            self?.rate = rate
            self?.inputChanged()
        }
    }.resume()
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above is hard to test. First of all, there&amp;rsquo;s a dependency on the shared &lt;code&gt;URLSession&lt;/code&gt;. To make this more testable, we could consider pulling that out into a configurable property. Even if we do that, the code is still hard to test. We&amp;rsquo;d like to test that the parsing happens correctly, that we switch back to the main thread before updating the UI, that we set the rate and that we finally call &lt;code&gt;inputChanged()&lt;/code&gt;. The asynchronous code makes it especially hard to verify that our logic is correct.&lt;/p&gt;

&lt;p&gt;We can pull out most of the logic into a &lt;code&gt;State&lt;/code&gt; struct to make the logic easy to test. The &lt;code&gt;State&lt;/code&gt; struct encapsulates the input amount and the conversion rate, and exposes a single computed property (the output):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct State {
    private var inputAmount: Double? = nil
    private var rate: Double? = nil
    var output: Double? {
        guard let i = inputAmount, let r = rate else { return nil }
        return i * r
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up, we&amp;rsquo;ll define three messages that this state can receive. The input can change, the reload button could be pressed, or new rate data could be available. The third message is not sent from the outside. Instead of defining these as methods, we&amp;rsquo;ll define the messages as an enum (we&amp;rsquo;ll see why shortly):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Message {
    case inputChanged(String?)
    case ratesAvailable(data: Data?)
    case reload
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have defined our state and our &lt;code&gt;Message&lt;/code&gt; enum, we can write a method to interpet messages. Because &lt;code&gt;State&lt;/code&gt; is a struct, we define it as a &lt;code&gt;mutating&lt;/code&gt; method &lt;code&gt;send(_:)&lt;/code&gt;. We switch over the message and interpet it. In case the input changed, we try to parse it. When new rate data is available, we parse it and assign it to &lt;code&gt;self.rate&lt;/code&gt;. We&amp;rsquo;ll leave out the &lt;code&gt;reload&lt;/code&gt; case for now.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;mutating func send(_ message: Message) {
    switch message {
    case .inputChanged(let input):
        inputAmount = input.flatMap { Double($0) }
    case .ratesAvailable(data: let data):
        guard let data = data,
            let json = try? JSONSerialization.jsonObject(with: data, options: []),
            let dict = json as? [String:Any],
            let dataDict = dict[&amp;quot;rates&amp;quot;] as? [String:Double],
            let rate = dataDict[Currency.usd.rawValue] else { return }
        self.rate = rate
    case .reload:
        // TODO: load ratesURL() and update the rates
        fatalError()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;.reload&lt;/code&gt; case, we&amp;rsquo;d like to load the &lt;code&gt;ratesURL()&lt;/code&gt; and then send the &lt;code&gt;.ratesAvailable()&lt;/code&gt; message. If we would use &lt;code&gt;URLSession.sharedSession&lt;/code&gt; directly, we lose our testability. We&amp;rsquo;d either have to inject the session, mock it, or find a different way to make it testable. Even if we we would do that, we&amp;rsquo;d have a problem in the &lt;code&gt;URLSession&lt;/code&gt;&amp;rsquo;s callback: we cannot update &lt;code&gt;self&lt;/code&gt; because it&amp;rsquo;s a struct, not a class.&lt;/p&gt;

&lt;p&gt;Instead of performing the URL loading side-effect directly, we&amp;rsquo;ll create a &lt;code&gt;Command&lt;/code&gt; enum that describes the side-effect:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum Command {
    case load(URL, onComplete: (Data?) -&amp;gt; Message)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we cannot use &lt;code&gt;onComplete&lt;/code&gt; as a callback (because we cannot change the struct value in a callback). Instead, it transforms the optional data back into a &lt;code&gt;Message&lt;/code&gt;. We&amp;rsquo;ll add &lt;code&gt;Command?&lt;/code&gt; as a return type for &lt;code&gt;send(_:)&lt;/code&gt;. If there&amp;rsquo;s no side-effect to be executed, we simply return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;mutating func send(_ message: Message) -&amp;gt; Command? {
    switch message {
    case .inputChanged(let input):
        inputAmount = input.flatMap { Double($0) }
        return nil
    case .ratesAvailable(data: let data):
        guard let data = data,
            let json = try? JSONSerialization.jsonObject(with: data, options: []),
            let dict = json as? [String:Any],
            let dataDict = dict[&amp;quot;rates&amp;quot;] as? [String:Double],
            let rate = dataDict[Currency.usd.rawValue] else { return nil }
        self.rate = rate
        return nil
    case .reload:
        return .load(ratesURL(), onComplete: Message.ratesAvailable)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the code above is completely synchronous. In a test, we can construct a value of &lt;code&gt;State&lt;/code&gt; and send it any message we want. Afterwards, we can verify that it changed the state as we expected, and that the correct side-effect is executed. For example, in the reload case, we can even test that the &lt;code&gt;onComplete&lt;/code&gt; is set to the &lt;code&gt;.ratesAvailable&lt;/code&gt; message. In our initial (non-reducer) code, testing this would involve a lot of mocking and stubbing.&lt;/p&gt;

&lt;p&gt;To interpret commands, we can define a separate extension on &lt;code&gt;State.Command&lt;/code&gt; that interprets a command. Instead of having asynchronous code in our &lt;code&gt;State&lt;/code&gt;&amp;rsquo;s logic, we can simply test this &lt;code&gt;interpret(_:)&lt;/code&gt; method once, in isolation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension State.Command {
    func interpret(_ callback: @escaping (State.Message) -&amp;gt; ()) {
        switch self {
        case let .load(url, onComplete: transform):
            URLSession.shared.dataTask(with: url, completionHandler: { (data, _, _) in
                DispatchQueue.main.async {
                    callback(transform(data))
                }
            }).resume()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, we need to hook up our &lt;code&gt;State&lt;/code&gt; to the view controller we&amp;rsquo;re refactoring. Instead of the &lt;code&gt;rate&lt;/code&gt; property that we had before, we&amp;rsquo;ll now define a &lt;code&gt;State&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var state = State() {
    didSet {
        self.output.text = state.output.map { &amp;quot;\($0) USD&amp;quot; } ?? &amp;quot;&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also define a &lt;code&gt;send&lt;/code&gt; method on the view controller. It sends a message to the state, and if there&amp;rsquo;s any &lt;code&gt;Command&lt;/code&gt;, it interprets that command.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;private func send(_ message: State.Message) {
    state.send(message)?.interpret(self.send)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing left is sending the correct messages in the view controller&amp;rsquo;s &lt;code&gt;inputChanged&lt;/code&gt; and &lt;code&gt;reload&lt;/code&gt; actions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@objc func inputChanged() {
    send(.inputChanged(input.text))
}

@objc func reload() {
    send(State.Message.reload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that it&amp;rsquo;s easy to test &lt;code&gt;inputChanged&lt;/code&gt; and &lt;code&gt;reload&lt;/code&gt;. We don&amp;rsquo;t have to mock the state, but just test that the right &lt;code&gt;Message&lt;/code&gt; is sent. We can then separately test the implementation of &lt;code&gt;send(_:)&lt;/code&gt; on the state struct.&lt;/p&gt;

&lt;h2 id=&#34;reducers-defined&#34;&gt;Reducers, Defined&lt;/h2&gt;

&lt;p&gt;Our &lt;code&gt;send(_:)&lt;/code&gt; method on &lt;code&gt;State&lt;/code&gt; is defined as a mutating method, and it is a &lt;em&gt;reducer&lt;/em&gt;. Generally, we could say that the a reducer is a function of type &lt;code&gt;(inout State, Message) -&amp;gt; Command&lt;/code&gt;, if &lt;code&gt;State&lt;/code&gt; is a value type. More generally, its type is &lt;code&gt;(State, Message) -&amp;gt; (State, Command)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is another important requirement in order for a method to be a reducer: it has to be a pure method, with no side-effects. There is no way in Swift to let the compiler enforce this. Instead of reading global state, we have to send &lt;code&gt;Input&lt;/code&gt; messages to the reducers. And instead of having a side-effect that modifies global state, a reducer returns &lt;code&gt;Output&lt;/code&gt; messages.&lt;/p&gt;

&lt;p&gt;If you have an object-oriented programming background, you might be reminded of objects. Just like objects, reducers encapsulate state and allow only certain messages. However, unlike objects, reducers have no side-effects and are therefore highly testable. We can intercept and inspect both the input and the output messages without having to create mock classes. Reducers don&amp;rsquo;t have asynchronous code; instead, the asynchrony is pushed outside to the code that drives the reducer. This also greatly helps for testability.&lt;/p&gt;

&lt;p&gt;Note that instead of a &lt;code&gt;Message&lt;/code&gt; enum, we could have also defined our messages as &lt;code&gt;mutating&lt;/code&gt; methods on the &lt;code&gt;State&lt;/code&gt; type. However, by defining messages as an enum, we gain a lot of flexibility: we can easily check that the right message is sent, we can serialize messages (for example, to send over the network) and we can easily forward them to other parts of the state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;State&lt;/code&gt; type with its &lt;code&gt;send(_:)&lt;/code&gt; method is an example of the &lt;a href=&#34;https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell&#34;&gt;&amp;ldquo;functional core, imperative shell&amp;rdquo;&lt;/a&gt; pattern. The reducer is the functional core, and is very easy to test. The view controller&amp;rsquo;s &lt;code&gt;send&lt;/code&gt; method is the imperative shell: it interprets the side-effects. This pattern can also be applied at a large scale.&lt;/p&gt;

&lt;p&gt;For some other examples using reducers, check out my &lt;a href=&#34;https://github.com/chriseidhof/tea-in-swift&#34;&gt;Swift implementation of The Elm Architecture&lt;/a&gt;, or this &lt;a href=&#34;https://gist.github.com/inamiy/bd257c60e670de8a144b1f97a07bacec&#34;&gt;awesome list&lt;/a&gt; of Elm-inspired frameworks. Matt Gallagher also just wrote a post about &lt;a href=&#34;http://www.cocoawithlove.com/blog/statements-messages-reducers.html&#34;&gt;statements, messages and reducers&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Classes That Conform To Protocols</title>
          <link>http://chris.eidhof.nl/post/classes-and-protocols/</link>
          <pubDate>Wed, 01 Feb 2017 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/classes-and-protocols/</guid>
          <description>&lt;p&gt;The other day, someone asked how to have a variable which stores a &lt;code&gt;UIView&lt;/code&gt; that also conforms to a protocol. In Objective-C, you would simply write &lt;code&gt;UIView&amp;lt;HeaderViewProtocol&amp;gt;&lt;/code&gt;. In  current Swift, you can&amp;rsquo;t write something like that. This posts shows two workarounds.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s set the stage, and assume we have a &lt;code&gt;HeaderViewProtocol&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;protocol HeaderViewProtocol {
    func setTitle(_ string: String)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Until &lt;a href=&#34;https://github.com/apple/swift/blob/master/docs/GenericsManifesto.md#generalized-existentials&#34;&gt;generalized existentials&lt;/a&gt; arrive, we&amp;rsquo;ll have to make do with a workaround. The most mechanical solution would be to write a struct which has two properties, one for the protocol and one for the &lt;code&gt;UIView&lt;/code&gt;. Both point to the same reference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct AnyHeaderView {
    let view: UIView
    let headerView: HeaderViewProtocol
    init&amp;lt;T: UIView&amp;gt;(view: T) where T: HeaderViewProtocol {
        self.view = view
        self.headerView = view
    }
}

let header = AnyHeaderView(view: myView)
header.headerView.setTitle(&amp;quot;hi&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, we could also completely &lt;a href=&#34;http://chris.eidhof.nl/post/protocol-oriented-programming/&#34;&gt;get rid of the protocol&lt;/a&gt;, and create a &lt;code&gt;HeaderView&lt;/code&gt; struct which simply stores a view and a way to set the title:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct HeaderView {
    let view: UIView
    let setTitle: (String) -&amp;gt; ()
}

var label = UILabel()
let header = HeaderView(view: label) { str in
    label.text = str
}
header.setTitle(&amp;quot;hello&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One benefit of this solution is that there are no protocols involved. More importantly, we can have multiple &amp;ldquo;implementations&amp;rdquo; of &lt;code&gt;HeaderView&lt;/code&gt; for a single class. This eliminates the need to subclass. I prefer this solution, as it&amp;rsquo;s really simple: just bundle up a function and a view.&lt;/p&gt;

&lt;p&gt;(If your protocol has associated types or a &lt;code&gt;Self&lt;/code&gt; constraint, it will be a bit more work to write the type-eraser, see &lt;a href=&#34;http://chris.eidhof.nl/post/type-erasers-in-swift/&#34;&gt;here&lt;/a&gt; for an explanation).&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Types vs TDD</title>
          <link>http://chris.eidhof.nl/post/types-vs-tdd/</link>
          <pubDate>Thu, 12 Jan 2017 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/types-vs-tdd/</guid>
          <description>&lt;p&gt;This morning, I read &lt;a href=&#34;http://blog.cleancoder.com/uncle-bob/2017/01/11/TheDarkPath.html&#34;&gt;an article&lt;/a&gt; against static typing. To be more precise: it argues against static typing in the way Swift/Kotlin implement it. I don&amp;rsquo;t know anything about Kotlin, so I&amp;rsquo;ll try to relate everything to Swift.  The main point of the article is that too much static typing is a bad thing. I agree: although my definition of &amp;ldquo;too much&amp;rdquo; is very different.&lt;/p&gt;

&lt;p&gt;The main point of critique is that we can&amp;rsquo;t possibly keep adding features to a language to solve actual problems, because we would end up with too many features. Instead, we should solve everything by writing tests. I don&amp;rsquo;t think it&amp;rsquo;s an either/or situation at all: we can have a solid type system and write &amp;ldquo;manual&amp;rdquo; tests.&lt;/p&gt;

&lt;p&gt;A type checker actually does testing for you. It&amp;rsquo;s not a replacement for TDD, but it allows you to completely get rid of a whole bunch of tests. For example, if you define a method &lt;code&gt;foo&lt;/code&gt; that returns an &lt;code&gt;Int&lt;/code&gt;, you can be sure it will only return &lt;code&gt;Int&lt;/code&gt;s. Not &lt;code&gt;String&lt;/code&gt;s, not &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;, not anything else. No need to write a test.&lt;/p&gt;

&lt;p&gt;The article argues that specifying a type such as &lt;code&gt;Int&lt;/code&gt; is very inflexible: what if you ever wanted to change &lt;code&gt;foo&lt;/code&gt; to return an optional?  According to the article, you have to know this before you write the system. (And if I interpret the article correctly, it argues that TDD would solve this).&lt;/p&gt;

&lt;p&gt;I agree on at least one thing: at some point, code is going to change. However, I couldn&amp;rsquo;t disagree more on the statement that typing makes this hard.&lt;/p&gt;

&lt;p&gt;In Swift, once you change &lt;code&gt;foo&lt;/code&gt; to return an &lt;code&gt;Int?&lt;/code&gt;, the compiler will now show an error for each time you call &lt;code&gt;foo&lt;/code&gt;. This makes it &lt;em&gt;easy&lt;/em&gt; to make that change, because until you have reviewed every single call to &lt;code&gt;foo&lt;/code&gt;, the program simply won&amp;rsquo;t compile. I think of the compile errors as a todo-list, not as a &lt;a href=&#34;https://twitter.com/unclebobmartin/status/819262224686546945&#34;&gt;speed bump&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When you make changes (small or large ones), it&amp;rsquo;s good to have a system in place that checks whether your code still works. With many kinds of changes, the compiler can do this automatically. You don&amp;rsquo;t have to write tests for that.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong: types are not a silver bullet. You still need to test your code. But wouldn&amp;rsquo;t you rather test interesting parts, and leave the boring stuff to the compiler?&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Protocol Oriented Programming is Not a Silver Bullet</title>
          <link>http://chris.eidhof.nl/post/protocol-oriented-programming/</link>
          <pubDate>Thu, 24 Nov 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/protocol-oriented-programming/</guid>
          <description>

&lt;p&gt;In Swift, protocol-oriented programming is in fashion. There&amp;rsquo;s a lot of Swift code out there that&amp;rsquo;s &amp;ldquo;protocol-oriented&amp;rdquo;, some open-source libraries even state it as a feature. I think protocols are heavily overused in Swift, and oftentimes the problem at hand can be solved in a much simpler way. In short: don&amp;rsquo;t be dogmatic about using (or avoiding) protocols.&lt;/p&gt;

&lt;p&gt;One of the most influential sessions at WWDC 2015 was called &lt;a href=&#34;https://developer.apple.com/videos/play/wwdc2015/408/&#34;&gt;Protocol-Oriented Programming in Swift&lt;/a&gt;. It shows (among other things) that you can replace a class hierarchy (that is, a superclass and some subclasses) with a protocol-oriented solution (that is, a protocol and some types that conform to the protocol). The protocol-oriented solution is simpler, and more flexible. For example, a class can only have a single superclass, yet a type can conform to many protocols.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at the problem they solved in the WWDC talk. A series of drawing commands needed to be rendered as a graphic, as well as logged to the console. By putting the drawing commands in a protocol, any code that describes a drawing could be phrased in terms of the protocol&amp;rsquo;s methods. Protocol extensions allow you to define new drawing functionality in terms of the protocol&amp;rsquo;s base functionality, and every type that conforms gets the new functionality for free.&lt;/p&gt;

&lt;p&gt;In the example above, protocols solve the problem of sharing code between multiple types. In Swift&amp;rsquo;s Standard Library, protocols are heavily used for collections, and they solve exactly the same problem. Because &lt;code&gt;dropFirst&lt;/code&gt; is defined on the &lt;code&gt;Collection&lt;/code&gt; type, all the collection types get this for free! At the same time, there are so many collection-related protocols and types, that it can be hard to find things. That&amp;rsquo;s one drawback of protocols, yet the advantages easily outweigh the disadvantages in the case of the Standard Library.&lt;/p&gt;

&lt;p&gt;Now, let&amp;rsquo;s work our way through an example. Here, we have a Webservice class. It loads entities from the network using &lt;code&gt;URLSession&lt;/code&gt;. (It doesn&amp;rsquo;t actually load things, but you get the idea):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Webservice {
    func loadUser() -&amp;gt; User? {
        let json = self.load(URL(string: &amp;quot;/users/current&amp;quot;)!)
        return User(json: json)
    }
    
    func loadEpisode() -&amp;gt; Episode? {
        let json = self.load(URL(string: &amp;quot;/episodes/latest&amp;quot;)!)
        return Episode(json: json)
    }
    
    private func load(_ url: URL) -&amp;gt; [AnyHashable:Any] {
        URLSession.shared.dataTask(with: url)
        // etc.
        return [:] // should come from the server
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above is short and works fine. There is no problem, until we want to test &lt;code&gt;loadUser&lt;/code&gt; and &lt;code&gt;loadEpisode&lt;/code&gt;. Now we either have to stub &lt;code&gt;load&lt;/code&gt;, or pass in a mock &lt;code&gt;URLSession&lt;/code&gt; using dependency injection. We could also define a protocol that &lt;code&gt;URLSession&lt;/code&gt; conforms to and then pass in a test instance. However, in this case, the solution is much simpler: we can pull the changing parts out of the &lt;code&gt;Webservice&lt;/code&gt; and into a struct (we also cover this in &lt;a href=&#34;https://talk.objc.io/episodes/S01E01-networking&#34;&gt;Swift Talk Episode 1&lt;/a&gt; and in &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Resource&amp;lt;A&amp;gt; {
    let url: URL
    let parse: ([AnyHashable:Any]) -&amp;gt; A
}

class Webservice {
    let user = Resource&amp;lt;User&amp;gt;(url: URL(string: &amp;quot;/users/current&amp;quot;)!, parse: User.init)
    let episode = Resource&amp;lt;Episode&amp;gt;(url: URL(string: &amp;quot;/episodes/latest&amp;quot;)!, parse: Episode.init)
    
    private func load&amp;lt;A&amp;gt;(resource: Resource&amp;lt;A&amp;gt;) -&amp;gt; A {
        URLSession.shared.dataTask(with: resource.url)
        // load asynchronously, parse the JSON, etc. For the sake of the example, we directly return an empty result.
        let json: [AnyHashable:Any] = [:] // should come from the server
        return resource.parse(json)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can test &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;episode&lt;/code&gt; without having to mock anything: they&amp;rsquo;re simple struct values. We still have to test &lt;code&gt;load&lt;/code&gt;, but that&amp;rsquo;s only one method (instead of for each resource). Now let&amp;rsquo;s add some protocols.&lt;/p&gt;

&lt;p&gt;Instead of the &lt;code&gt;parse&lt;/code&gt; function, we could create a protocol for types that can be initialized from JSON.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol FromJSON {
    init(json: [AnyHashable:Any])
}

struct Resource&amp;lt;A: FromJSON&amp;gt; {
    let url: URL
}

class Webservice {
    let user = Resource&amp;lt;User&amp;gt;(url: URL(string: &amp;quot;/users/current&amp;quot;)!)
    let episode = Resource&amp;lt;Episode&amp;gt;(url: URL(string: &amp;quot;/episodes/latest&amp;quot;)!)
    
    private func load&amp;lt;A&amp;gt;(resource: Resource&amp;lt;A&amp;gt;) -&amp;gt; A {
        URLSession.shared.dataTask(with: resource.url)
        // load asynchronously, parse the JSON, etc. For the sake of the example, we directly return an empty result.
        let json: [AnyHashable:Any] = [:] // should come from the server
        return A(json: json)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above might look simpler, but it&amp;rsquo;s also way less flexible. For example, how would you define a resource that has an array of &lt;code&gt;User&lt;/code&gt; values? (In the protocol-oriented example above, that&amp;rsquo;s not yet possible, and we&amp;rsquo;ll have to wait for Swift 4 or 5 until this is expressible). The protocol makes things simpler, but I think it doesn&amp;rsquo;t pay for itself, because it dramatically decreases the ways in which we can create a &lt;code&gt;Resource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of having the &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;episode&lt;/code&gt; as &lt;code&gt;Resource&lt;/code&gt; values, we could also make &lt;code&gt;Resource&lt;/code&gt; a protocol and have &lt;code&gt;UserResource&lt;/code&gt; and &lt;code&gt;EpisodeResource&lt;/code&gt; structs. This seems to be a popular thing to do, because having a type instead of a value &amp;ldquo;just feels right&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol Resource {
    associatedtype Result
    var url: URL { get }
    func parse(json: [AnyHashable:Any]) -&amp;gt; Result
}

struct UserResource: Resource {
    let url = URL(string: &amp;quot;/users/current&amp;quot;)!
    func parse(json: [AnyHashable : Any]) -&amp;gt; User {
        return User(json: json)
    }
}

struct EpisodeResource: Resource {
    let url = URL(string: &amp;quot;/episodes/latest&amp;quot;)!
    func parse(json: [AnyHashable : Any]) -&amp;gt; Episode {
        return Episode(json: json)
    }
}

class Webservice {
    private func load&amp;lt;R: Resource&amp;gt;(resource: R) -&amp;gt; R.Result {
        URLSession.shared.dataTask(with: resource.url)
        // load asynchronously, parse the JSON, etc. For the sake of the example, we directly return an empty result.
        let json: [AnyHashable:Any] = [:]
        return resource.parse(json: json)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But if we look at it critically, what did we really gain? The code became longer, more complex and less direct. And because of the associated type, we&amp;rsquo;ll probably end up defining an &lt;code&gt;AnyResource&lt;/code&gt; eventually. Is there any benefit to having an &lt;code&gt;EpisodeResource&lt;/code&gt; struct instead of an &lt;code&gt;episodeResource&lt;/code&gt; value? They are both global definitions. For the struct, the name starts with an uppercase letter, and for the value, a lowercase letter. Other than that, there really isn&amp;rsquo;t any advantage. You can both namespace them (for autocompletion). So in this case, having a value is definitely simpler and shorter.&lt;/p&gt;

&lt;p&gt;There are many other examples I&amp;rsquo;ve seen in code around the internet. For example, I&amp;rsquo;ve seen a protocol like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol URLStringConvertible {
    var urlString: String { get }
}

// Somewhere later

func sendRequest(urlString: URLStringConvertible, method: ...) {
    let string = urlString.urlString
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does this buy you? Why not simply remove the protocol and pass in the &lt;code&gt;urlString&lt;/code&gt; directly? Much simpler. Or a protocol with a single method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol RequestAdapter {
    func adapt(_ urlRequest: URLRequest) throws -&amp;gt; URLRequest
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A bit more controversial: why not simply remove the protocol, and pass in a function somewhere? Much simpler. (Unless your protocol is a class-only protocol and you want a weak reference it).&lt;/p&gt;

&lt;p&gt;I can keep showing examples, but I hope the point is clear. Often, there are simpler choices. More abstractly, protocols are just one way to achieve polymorphic code. There are many other ways: subclassing, generics, values, functions, and so on. Values (e.g. a &lt;code&gt;String&lt;/code&gt; instead of a &lt;code&gt;URLStringConvertible&lt;/code&gt;) are the simplest way. Functions (e.g. &lt;code&gt;adapt&lt;/code&gt; instead of &lt;code&gt;RequestAdapter&lt;/code&gt;) are a bit more complex than values, but are still simple. Generics (without any constraints) are simpler than protocols. And to be complete, protocols are often simpler than class hierarchies.&lt;/p&gt;

&lt;p&gt;A useful heuristic might be to think about whether your protocol models data or behavior. For data, a struct is probably easier. For complex behavior (e.g. a delegate with multiple methods), a protocol is often easier. (The standard library&amp;rsquo;s collection protocols are a bit special: they don&amp;rsquo;t really describe data, but rather, they describe data manipulation.)&lt;/p&gt;

&lt;p&gt;That said, protocols can be very useful. But don&amp;rsquo;t start with a protocol just for the sake of protocol-oriented programming. Start by looking at your problem, and try to solve it in the simplest way possible. Let the problem drive the solution, not the other way around. Protocol-oriented programming isn&amp;rsquo;t inherently good or bad. Just like any other technique (functional programming, OO, dependency injection, subclassing) it can be used to solve a problem, and we should try to pick the right tool for the job. Sometimes that&amp;rsquo;s a protocol, but often, there&amp;rsquo;s a simpler way.&lt;/p&gt;

&lt;h3 id=&#34;more&#34;&gt;More&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thedotpost.com/2016/01/rob-napier-beyond-crusty-real-world-protocols&#34;&gt;http://www.thedotpost.com/2016/01/rob-napier-beyond-crusty-real-world-protocols&lt;/a&gt; (video)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gamedev.net/page/resources/_/technical/game-programming/haskell-game-object-design-or-how-functions-can-get-you-apples-r3204&#34;&gt;http://www.gamedev.net/page/resources/_/technical/game-programming/haskell-game-object-design-or-how-functions-can-get-you-apples-r3204&lt;/a&gt; (Haskell)&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>On Burnout</title>
          <link>http://chris.eidhof.nl/post/burnout/</link>
          <pubDate>Thu, 27 Oct 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/burnout/</guid>
          <description>&lt;p&gt;I&amp;rsquo;ve seen a number of blogposts and talks recently that talk about depression, burn-out, and other mental problems.  One post recommended reading a book. Another one recommended talking to friends and family. These things might help, but I doubt that they actually solve the root cause (looking back, they definitely didn&amp;rsquo;t solve my problems, at best suppress them).&lt;/p&gt;

&lt;p&gt;I recommend something different. If you have a mental issue, go see a professional. Take it seriously.  I know there&amp;rsquo;s a stigma attached to this, let&amp;rsquo;s try to break through that.&lt;/p&gt;

&lt;p&gt;If your leg is broken, you&amp;rsquo;d probably go to the hospital. With mental issues, you often don&amp;rsquo;t visually see that something is wrong. It might feel harder to justify seeing a professional. Some people are functioning very well while suffering from mental problems. For example, I can often turn my suppressed anger into productivity (alas, the anger still gets suppressed).&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s scary to take that step. I started seeing a therapist about a year and a half ago, to deal with my depression. It&amp;rsquo;s been one the best things I&amp;rsquo;ve ever done for myself. If you&amp;rsquo;re suffering from a mental issue, consider doing the same.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Type Erasers in Swift</title>
          <link>http://chris.eidhof.nl/post/type-erasers-in-swift/</link>
          <pubDate>Thu, 20 Oct 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/type-erasers-in-swift/</guid>
          <description>&lt;p&gt;The following post is an excerpt from our book &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;. We just updated it to Swift 3, so this is a great time to buy it.&lt;/p&gt;

&lt;p&gt;Sometimes, we can use a protocol as a standalone type. However, with a protocol like &lt;code&gt;IteratorProtocol&lt;/code&gt;, this isn&amp;rsquo;t (yet) possible, because it has an associated type. The compile error says: &amp;ldquo;Protocol &amp;lsquo;IteratorProtocol&amp;rsquo; can only be used as a generic constraint because it has Self or associated type requirements.&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct ConstantIterator: IteratorProtocol {
    mutating func next() -&amp;gt; Int? {
        return 1
    }
}

let iterator: IteratorProtocol = ConstantIterator() // Error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a way, &lt;code&gt;IteratorProtocol&lt;/code&gt; used as a type is incomplete; we&amp;rsquo;d have to specify the associated type as well in order for this to be meaningful.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Swift Core Team has stated that they want to support &lt;em&gt;generalized existentials&lt;/em&gt;. This feature would allow for using protocols with associated types as standalone values, and it would also eliminate the need to write type erasers. For more information about what to expect in the future, see the &lt;a href=&#34;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160229/011666.html&#34;&gt;Swift Generics Manifesto&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a future version of Swift, we might be able to solve this by saying something like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let iterator: Any&amp;lt;IteratorProtocol where .Element == Int&amp;gt; = ConstantIterator()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently, we can&amp;rsquo;t yet express this. We can, however, use &lt;code&gt;IteratorProtocol&lt;/code&gt; as a constraint for a generic parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func nextInt&amp;lt;I: IteratorProtocol&amp;gt;(iterator: inout I) -&amp;gt; Int?
    where I.Element == Int {
        return iterator.next()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, we can store an iterator in a class or struct. The limitation is the same, in that we can only use it as a generic constraint, and not as a standalone type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class IteratorStore&amp;lt;I: IteratorProtocol&amp;gt; where I.Element == Int {
    var iterator: I

    init(iterator: I) {
        self.iterator = iterator
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works, but it has a drawback: the specific type of the stored iterator &amp;ldquo;leaks out&amp;rdquo; through the generic parameter. In the current type system, we can&amp;rsquo;t express &amp;ldquo;any iterator, as long as the element type is &lt;code&gt;Int&lt;/code&gt;.&amp;rdquo; This is a problem if you want to, for example, put multiple &lt;code&gt;IteratorStore&lt;/code&gt;s into an array. All elements in an array must have the same type, and that includes any generic parameters; it&amp;rsquo;s not possible to create an array that can store both &lt;code&gt;IteratorStore&amp;lt;ConstantIterator&amp;gt;&lt;/code&gt; and &lt;code&gt;IteratorStore&amp;lt;FibsIterator&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, there are two ways around this ? one is easy, the other one more efficient (but hacky). The process of removing a specific type (such as the iterator) is called &lt;em&gt;type erasure&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In the easy solution, we implement a wrapper class. Instead of storing the iterator directly, the class stores the iterator&amp;rsquo;s &lt;code&gt;next&lt;/code&gt; function. To do this, we must first copy the &lt;code&gt;iterator&lt;/code&gt; parameter to a &lt;code&gt;var&lt;/code&gt; variable so that we&amp;rsquo;re allowed to call its &lt;code&gt;next&lt;/code&gt; method (which is &lt;code&gt;mutating&lt;/code&gt;). We then wrap the call to &lt;code&gt;next()&lt;/code&gt; in a closure expression and assign that closure to a property. We used a class to signal that &lt;code&gt;IntIterator&lt;/code&gt; has reference semantics:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class IntIterator {
    var nextImpl: () -&amp;gt; Int?

    init&amp;lt;I: IteratorProtocol&amp;gt;(_ iterator: I) where I.Element == Int {
        var iteratorCopy = iterator
        self.nextImpl = { iteratorCopy.next() }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, in our &lt;code&gt;IntIterator&lt;/code&gt;, the specific type of the iterator (e.g. &lt;code&gt;ConstantIterator&lt;/code&gt;) is only specified when creating a value. After that, the specific type is hidden, captured by the closure. We can create an &lt;code&gt;IntIterator&lt;/code&gt; with any kind of iterator, as long as the elements are integers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var iter = IntIterator(ConstantIterator())
iter = IntIterator([1,2,3].makeIterator())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code above allows us to specify the associated type constraints (e.g. &lt;code&gt;iter&lt;/code&gt; contains an iterator with &lt;code&gt;Int&lt;/code&gt; elements) using Swift&amp;rsquo;s current type system. Our &lt;code&gt;IntIterator&lt;/code&gt; can also easily conform to the &lt;code&gt;IteratorProtocol&lt;/code&gt; (and the inferred associated type is &lt;code&gt;Int&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension IntIterator: IteratorProtocol {
    func next() -&amp;gt; Int? {
        return nextImpl()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, by abstracting over &lt;code&gt;Int&lt;/code&gt; and adding a generic parameter, we can change &lt;code&gt;IntIterator&lt;/code&gt; to work just like &lt;code&gt;AnyIterator&lt;/code&gt; does:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class AnyIterator&amp;lt;A&amp;gt;: IteratorProtocol {
    var nextImpl: () -&amp;gt; A?

    init&amp;lt;I: IteratorProtocol&amp;gt;(_ iterator: I) where I.Element == A {
        var iteratorCopy = iterator
        self.nextImpl = { iteratorCopy.next() }
    }

    func next() -&amp;gt; A? {
        return nextImpl()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The specific iterator type (&lt;code&gt;I&lt;/code&gt;) is only specified in the initializer, and after that, it&amp;rsquo;s &amp;ldquo;erased.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;From this refactoring, we can come up with a simple algorithm for creating a type eraser. First, we create a struct or class named &lt;code&gt;AnyProtocolName&lt;/code&gt;. Then, for each associated type, we add a generic parameter. Finally, for each method, we store the implementation in a property on &lt;code&gt;AnyProtocolName&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For a simple protocol like &lt;code&gt;IteratorProtocol&lt;/code&gt;, this only takes a few lines of code, but for more complex protocols (such as &lt;code&gt;Sequence&lt;/code&gt;), this is quite a lot of work. Even worse, the size of the object or struct will increase linearly with each protocol method (because a new closure is added for each method).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The standard library takes a different approach to erasing types. We start by creating a simple class that conforms to &lt;code&gt;IteratorProtocol&lt;/code&gt;. Its generic type is the &lt;code&gt;Element&lt;/code&gt; of the iterator, and the implementation will simply crash:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class IteratorBox&amp;lt;A&amp;gt;: IteratorProtocol {
    func next() -&amp;gt; A? {
        fatalError(&amp;quot;This method is abstract.&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we create another class, &lt;code&gt;IteratorBoxHelper&lt;/code&gt;, which is also generic. Here, the generic parameter is the specific iterator type (for example, &lt;code&gt;ConstantIterator&lt;/code&gt;). The &lt;code&gt;next&lt;/code&gt; method simply forwards to the &lt;code&gt;next&lt;/code&gt; method of the underlying iterator:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift-example&#34;&gt;class IteratorBoxHelper&amp;lt;I: IteratorProtocol&amp;gt; {
    var iterator: I
    init(iterator: I) {
        self.iterator = iterator
    }

    func next() -&amp;gt; I.Element? {
        return iterator.next()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now for the hacky part. We change &lt;code&gt;IteratorBoxHelper&lt;/code&gt; so that it&amp;rsquo;s a subclass of &lt;code&gt;IteratorBox&lt;/code&gt;, and the two generic parameters are constrained in such a way that &lt;code&gt;IteratorBox&lt;/code&gt; gets &lt;code&gt;I&lt;/code&gt;&amp;rsquo;s element as the generic parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;class IteratorBoxHelper&amp;lt;I: IteratorProtocol&amp;gt;: IteratorBox&amp;lt;I.Element&amp;gt; {
    var iterator: I
    init(_ iterator: I) {
        self.iterator = iterator
    }

    override func next() -&amp;gt; I.Element? {
        return iterator.next()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to create a value of &lt;code&gt;IteratorBoxHelper&lt;/code&gt; and use it as an &lt;code&gt;IteratorBox&lt;/code&gt;, effectively erasing the type of &lt;code&gt;I&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let iter: IteratorBox&amp;lt;Int&amp;gt; = IteratorBoxHelper(ConstantIterator())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the standard library, the &lt;code&gt;IteratorBox&lt;/code&gt; and &lt;code&gt;IteratorBoxHelper&lt;/code&gt; are then made private, and yet another wrapper (&lt;code&gt;AnyIterator&lt;/code&gt;) makes sure that these implementation details are hidden from the public interface.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In my (limited) testing, I found that the struct version of &lt;code&gt;AnyIterator&lt;/code&gt; was about 10% faster (I&amp;rsquo;m not exactly sure why, probably because of less indirection). I &lt;a href=&#34;https://lists.swift.org/pipermail/swift-dev/Week-of-Mon-20160905/002852.html&#34;&gt;started a topic&lt;/a&gt; on the swift-dev mailing list, but I&amp;rsquo;m not sure if anyone is taking it and making the change. If anyone reading this feels like proposing that change (and thoroughly testing performance), go ahead!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Sort Descriptors in Swift</title>
          <link>http://chris.eidhof.nl/post/sort-descriptors-in-swift/</link>
          <pubDate>Mon, 29 Aug 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/sort-descriptors-in-swift/</guid>
          <description>

&lt;p&gt;Just last week, someone asked me &amp;ldquo;in what respect does Swift fall short of the
dynamic features of Objective-C&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;Dynamic programming means a lot of different
things to different people, and I think they meant runtime programming. In this
post, we&amp;rsquo;ll look at replacing Objective-C&amp;rsquo;s runtime programming with
Swift&amp;rsquo;s functions.&lt;/p&gt;

&lt;p&gt;This post is an excerpt from the Functions chapter in &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced
Swift&lt;/a&gt;, which we&amp;rsquo;re currently
rewriting (and making very good progress).  The text below was originally written by &lt;a href=&#34;https://twitter.com/airspeedswift&#34;&gt;Airspeed
Velocity&lt;/a&gt;. I took his text and code, updated
everything for Swift 3 and made some heavy edits. Thanks to &lt;a href=&#34;https://twitter.com/olebegemann&#34;&gt;Ole Begemann&lt;/a&gt; for reading through a draft of this.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the chapter on &lt;a href=&#34;#collections&#34;&gt;collections&lt;/a&gt;, we talked about parametrizing
behavior by passing functions as arguments. Let&amp;rsquo;s look at another example of
this: sorting.&lt;/p&gt;

&lt;p&gt;If you want to sort an array in Objective-C using Foundation, you are met with a
long list of different options. These provide a lot of flexibility and power,
but at the cost of complexity ? even the simplest probably needs a trip to the
documentation to know how to use it.&lt;/p&gt;

&lt;p&gt;Sorting collections in Swift is simple:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var myArray = [3, 1, 2]
myArray.sorted() // [1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are really four sort methods: &lt;code&gt;sorted(by:)&lt;/code&gt; and &lt;code&gt;sort(by:)&lt;/code&gt;, times two for
the overloads that default to sorting comparable things in ascending order. But
the overloading means that when you want the simplest case, &lt;code&gt;sorted()&lt;/code&gt; is all
you need. If you want to sort in a different order, just supply a function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;myArray.sorted(by: &amp;gt;) // [3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also supply a function if your elements don&amp;rsquo;t conform to &lt;code&gt;Equatable&lt;/code&gt; but
&lt;em&gt;do&lt;/em&gt; have a &lt;code&gt;&amp;lt;&lt;/code&gt; operator, like tuples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var numberStrings = [(2, &amp;quot;two&amp;quot;), (1, &amp;quot;one&amp;quot;), (3, &amp;quot;three&amp;quot;)]
numberStrings.sort(by: &amp;lt;)
numberStrings // [(1, &amp;quot;one&amp;quot;), (2, &amp;quot;two&amp;quot;), (3, &amp;quot;three&amp;quot;)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, you can supply a more complicated function if you want to sort by some
arbitrary calculated criteria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let animals = [&amp;quot;elephant&amp;quot;, &amp;quot;zebra&amp;quot;, &amp;quot;dog&amp;quot;]
let sortedAnimals = animals.sorted { lhs, rhs in
    let l = lhs.characters.reversed()
    let r = rhs.characters.reversed()
    return l.lexicographicallyPrecedes(r)
}
sortedAnimals // [&amp;quot;zebra&amp;quot;, &amp;quot;dog&amp;quot;, &amp;quot;elephant&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is this last ability ? the ability to use any comparison function to sort a
collection ? that makes the Swift sort so powerful, and makes this one function
able to replicate much (if not all) of the functionality of the various
different sorting methods in Foundation.&lt;/p&gt;

&lt;p&gt;To demonstrate this, let&amp;rsquo;s take a complex example inspired by the &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/SortDescriptors/Articles/Creating.html&#34;&gt;Sort
Descriptor Programming
Topics&lt;/a&gt;.
The &lt;code&gt;sortedArray(using:)&lt;/code&gt; method on &lt;code&gt;NSArray&lt;/code&gt; is very flexible and a great
example of the power of Objective-C&amp;rsquo;s dynamic nature. Support for selectors and
dynamic dispatch is still there in Swift, but the Swift standard library favors
a more function-based approach instead. Later on, we&amp;rsquo;ll show a few techniques
where functions as arguments, and treating functions as data, can be used to get
the same dynamic effects.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start by defining a &lt;code&gt;Person&lt;/code&gt; object. Because we want to show how
Objective-C&amp;rsquo;s powerful runtime system works, we&amp;rsquo;ll have to make it an &lt;code&gt;NSObject&lt;/code&gt;
subclass (in pure Swift, a struct might have been a better choice):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class Person: NSObject {
    var first: String
    var last: String
    var yearOfBirth: Int
    init(first: String, last: String, yearOfBirth: Int) {
        self.first = first
        self.last = last
        self.yearOfBirth = yearOfBirth
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s also define an array of people, with different names and birth years:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let people = [
    Person(first: &amp;quot;Jo&amp;quot;, last: &amp;quot;Smith&amp;quot;, yearOfBirth: 1970),
    Person(first: &amp;quot;Joe&amp;quot;, last: &amp;quot;Smith&amp;quot;, yearOfBirth: 1970),
    Person(first: &amp;quot;Joe&amp;quot;, last: &amp;quot;Smyth&amp;quot;, yearOfBirth: 1970),
    Person(first: &amp;quot;Joanne&amp;quot;, last: &amp;quot;smith&amp;quot;, yearOfBirth: 1985),
    Person(first: &amp;quot;Joanne&amp;quot;, last: &amp;quot;smith&amp;quot;, yearOfBirth: 1970),
    Person(first: &amp;quot;Robert&amp;quot;, last: &amp;quot;Jones&amp;quot;, yearOfBirth: 1970),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We want to sort this array first by last name, then by first name, and finally
by birth year. We want to do this case insensitively and using the user&amp;rsquo;s
locale. An &lt;code&gt;NSSortDescriptor&lt;/code&gt; object describes how to order objects, and we can
use them to express the individual sorting criteria.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let lastDescriptor = NSSortDescriptor(key: &amp;quot;last&amp;quot;, ascending: true,
  selector: #selector(NSString.localizedCaseInsensitiveCompare(_:)))
let firstDescriptor = NSSortDescriptor(key: &amp;quot;first&amp;quot;, ascending: true, 
  selector: #selector(NSString.localizedCaseInsensitiveCompare(_:)))
let yearDescriptor = NSSortDescriptor(key: &amp;quot;yearOfBirth&amp;quot;, ascending: true)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To sort the array, we can use the &lt;code&gt;sortedArray(using:)&lt;/code&gt; method on &lt;code&gt;NSArray&lt;/code&gt;.
This takes a list of sort descriptors. To determine the order of two elements,
it starts by using the first sort descriptor, and uses that result. However, if
two elements are equal according to the first descriptor, it uses the second
descriptor, and so on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;(people as NSArray).sortedArray(using: [lastDescriptor, firstDescriptor, yearDescriptor]) 
// [Robert Jones (1970), Jo Smith (1970), Joanne smith (1970), Joanne smith (1985), Joe Smith (1970), Joe Smyth (1970)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A sort descriptor uses two runtime features of Objective-C: the &lt;code&gt;key&lt;/code&gt; is a key
path, and &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueCoding/Articles/KeyValueCoding.html&#34;&gt;key-value
coding&lt;/a&gt;
is used to lookup the value of that key at runtime. The &lt;code&gt;selector&lt;/code&gt; parameter
takes a selector (which is really just a &lt;code&gt;String&lt;/code&gt; describing a method name). At
runtime, the selector is turned into a comparison function. When comparing two
objects, the values for the key are compared using that comparison function.&lt;/p&gt;

&lt;p&gt;This is a pretty cool use of runtime programming, especially when you realize
the array of sort descriptors can be built at runtime, say based on a user
clicking a column heading.&lt;/p&gt;

&lt;p&gt;How can we replicate this functionality using Swift&amp;rsquo;s &lt;code&gt;sort&lt;/code&gt;? It&amp;rsquo;s simple to
replicate &lt;em&gt;parts&lt;/em&gt; of the sort, for example, if you want to sort an array using
&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var strings = [&amp;quot;Hello&amp;quot;, &amp;quot;hallo&amp;quot;, &amp;quot;Hallo&amp;quot;, &amp;quot;hello&amp;quot;]
strings.sort { $0.localizedCaseInsensitiveCompare($1) == .orderedAscending}
strings // [&amp;quot;hallo&amp;quot;, &amp;quot;Hallo&amp;quot;, &amp;quot;Hello&amp;quot;, &amp;quot;hello&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to sort using just a single property of an object, that&amp;rsquo;s also
simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;people.sorted { $0.yearOfBirth &amp;lt; $1.yearOfBirth } 
// [Jo Smith (1970), Joe Smith (1970), Joe Smyth (1970), Joanne smith (1970), Robert Jones (1970), Joanne smith (1985)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach doesn&amp;rsquo;t work so great when optional properties are combined with
methods like &lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;, though ? it gets ugly fast. For
example, consider sorting an array of filenames by file extension (using the
&lt;code&gt;fileExtension&lt;/code&gt; property from the &lt;a href=&#34;#optionals&#34;&gt;Optionals&lt;/a&gt; chapter):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var files = [&amp;quot;one&amp;quot;, &amp;quot;file.h&amp;quot;, &amp;quot;file.c&amp;quot;, &amp;quot;test.h&amp;quot;]
files.sort { l, r in r.fileExtension.flatMap { l.fileExtension?.localizedCaseInsensitiveCompare($0) } == .orderedAscending }
files // [&amp;quot;one&amp;quot;, &amp;quot;file.c&amp;quot;, &amp;quot;file.h&amp;quot;, &amp;quot;test.h&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Later on, we&amp;rsquo;ll make it easier to use optionals when sorting. However, for now,
we haven&amp;rsquo;t even tried sorting by multiple properties. To sort by last name, then
first name, we can use the standard library&amp;rsquo;s &lt;code&gt;lexicographicalCompare&lt;/code&gt; method.
This takes two sequences and performs a phonebook-style comparison by moving
through each pair of elements until it finds one that isn&amp;rsquo;t equal. So we can
build two arrays of the elements and use &lt;code&gt;lexicographicalCompare&lt;/code&gt; to compare
them. It also takes a function to perform the comparison. We&amp;rsquo;ll put our use of
&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt; in the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sortedPeople = people.sorted { p0, p1 in
    let left =  [p0.last, p0.first]
    let right = [p1.last, p1.first]

    return left.lexicographicallyPrecedes(right) {
        $0.localizedCaseInsensitiveCompare($1) == .orderedAscending
    }
}
sortedPeople // [Robert Jones (1970), Jo Smith (1970), Joanne smith (1985), Joanne smith (1970), Joe Smith (1970), Joe Smyth (1970)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, we&amp;rsquo;ve almost replicated the functionality of the original sort in
roughly the same number of lines. But there&amp;rsquo;s still a lot of room for
improvement: the building of arrays on every comparison is very inefficient, the
comparison is hardcoded, and we can&amp;rsquo;t really sort by &lt;code&gt;yearOfBirth&lt;/code&gt; using this
approach.&lt;/p&gt;

&lt;h3 id=&#34;functions-as-data&#34;&gt;Functions as Data&lt;/h3&gt;

&lt;p&gt;Rather than writing an even more complicated function that we can use to sort,
let&amp;rsquo;s take a step back. So far, the sort descriptors were much clearer, but they
use runtime programming. The functions we wrote do not use runtime programming,
but they are not so easy to write (and read).&lt;/p&gt;

&lt;p&gt;A sort descriptor is a way of describing the ordering of objects. Instead of
storing that information as a class, we can define a function to describe the
ordering of objects. The simplest possible definition would take two objects,
and returns &lt;code&gt;true&lt;/code&gt; if they are ordered. This is also exactly the type that the
standard library&amp;rsquo;s &lt;code&gt;sort(by:)&lt;/code&gt; and &lt;code&gt;sorted(by:)&lt;/code&gt; methods take as an argument.
It&amp;rsquo;s helpful to define a generic &lt;code&gt;typealias&lt;/code&gt; to describe sort descriptors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;typealias SortDescriptor&amp;lt;Value&amp;gt; = (Value, Value) -&amp;gt; Bool
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an example, we could define a sort descriptor that compares two &lt;code&gt;Person&lt;/code&gt;
objects by year of birth, or a sort descriptor that sorts by last name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sortByYear: SortDescriptor&amp;lt;Person&amp;gt; = { $0.yearOfBirth &amp;lt; $1.yearOfBirth }
let sortByLastName: SortDescriptor&amp;lt;Person&amp;gt; = { 
  $0.last.localizedCaseInsensitiveCompare($1.last) == .orderedAscending 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rather than writing the sort descriptors by hand, we can write a function that
generates them. It&amp;rsquo;s not nice that we to write the same property twice: in the
&lt;code&gt;sortByLastName&lt;/code&gt;, we could have easily made a mistake and accidentally compared
&lt;code&gt;$0.last&lt;/code&gt; with &lt;code&gt;$1.first&lt;/code&gt;. Also, it&amp;rsquo;s tedious to write these sort descriptors:
to sort by first name, it&amp;rsquo;s probably easiest to copy and paste the
&lt;code&gt;sortByLastName&lt;/code&gt; definition and modify it.&lt;/p&gt;

&lt;p&gt;Rather than copying and pasting, we can define a function with an interface that
is much like &lt;code&gt;NSSortDescriptor&lt;/code&gt;, but without the runtime programming. This
function takes a key and a comparison method, and returns a sort descriptor (the
function, not the class &lt;code&gt;NSSortDescriptor&lt;/code&gt;). Here, &lt;code&gt;key&lt;/code&gt; is not a string, but a
function. To compare two keys, we use a function &lt;code&gt;isOrderedBefore&lt;/code&gt;. Finally, the
result type is a function as well, even though that is slightly obscured by the
&lt;code&gt;typealias&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func sortDescriptor&amp;lt;Value, Key&amp;gt;(
  key: @escaping (Value) -&amp;gt; Key,
    _ isOrderedBefore: @escaping (Key, Key) -&amp;gt; Bool) 
    -&amp;gt; SortDescriptor&amp;lt;Value&amp;gt; {
    return { isOrderedBefore(key($0), key($1)) }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to define &lt;code&gt;sortByYear&lt;/code&gt; in a different way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sortByYearAlt: SortDescriptor&amp;lt;Person&amp;gt; = sortDescriptor(key: { $0.yearOfBirth }, &amp;lt;)
people.sorted(by: sortByYearAlt) 
// [Jo Smith (1970), Joe Smith (1970), Joe Smyth (1970), Joanne smith (1970), Robert Jones (1970), Joanne smith (1985)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can even define an overloaded variant that works for all &lt;code&gt;Comparable&lt;/code&gt; types:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func sortDescriptor&amp;lt;Value, Key&amp;gt;(key: @escaping (Value) -&amp;gt; Key)
    -&amp;gt; SortDescriptor&amp;lt;Value&amp;gt; where Key: Comparable {
    return { key($0) &amp;lt; key($1) }
}
let sortByYearAlt2: SortDescriptor&amp;lt;Person&amp;gt; = sortDescriptor(key: { $0.yearOfBirth })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both &lt;code&gt;sortDescriptor&lt;/code&gt; above work with boolean functions. The &lt;code&gt;NSSortDescriptor&lt;/code&gt;
class has an initializer that takes a comparison function such as
&lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;. Adding support for this is easy as well:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func sortDescriptor&amp;lt;Value, Key&amp;gt;(
    key: @escaping (Value) -&amp;gt; Key,
    ascending: Bool = true,
    _ comparator: @escaping (Key) -&amp;gt; (Key) -&amp;gt; ComparisonResult
    ) -&amp;gt; SortDescriptor&amp;lt;Value&amp;gt; {
    return { lhs, rhs in
        let order: ComparisonResult = ascending ? .orderedAscending : .orderedDescending
        return comparator(key(lhs))(key(rhs)) == order
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to write our &lt;code&gt;sortByFirstName&lt;/code&gt; in a much shorter and clearer way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let sortByFirstName: SortDescriptor&amp;lt;Person&amp;gt; = 
  sortDescriptor(key: { $0.first }, String.localizedCaseInsensitiveCompare)
people.sorted(by: sortByFirstName) 
// [Jo Smith (1970), Joanne smith (1985), Joanne smith (1970), Joe Smith (1970), Joe Smyth (1970), Robert Jones (1970)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;SortDescriptor&lt;/code&gt; is just as expressive as its &lt;code&gt;NSSortDescriptor&lt;/code&gt; variant,
but it is typesafe, and it does not rely on runtime programming.&lt;/p&gt;

&lt;p&gt;Currently, we can only use a single &lt;code&gt;SortDescriptor&lt;/code&gt; function to sort arrays. If
you recall, we used the &lt;code&gt;NSArray.sortedArray(using:)&lt;/code&gt; method to sort an array
with a number of comparison operators. We could easily add a similar method to
&lt;code&gt;Array&lt;/code&gt;, or even to the &lt;code&gt;Sequence&lt;/code&gt; protocol. However, we would have to add it
twice: once for the mutating variant, and once for the non-mutating variant.&lt;/p&gt;

&lt;p&gt;We take a different approach so that we don&amp;rsquo;t have to write more extensions.
Instead, we write a function that combines multiple sort descriptors into a
single sort descriptor. It works just like the &lt;code&gt;sortedArray(using:)&lt;/code&gt; method: it
first tries the first descriptor and uses that result. Unless the values are
equal, then it uses the second descriptor, and so on.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func combine&amp;lt;Value&amp;gt;
    (sortDescriptors: [SortDescriptor&amp;lt;Value&amp;gt;]) -&amp;gt; SortDescriptor&amp;lt;Value&amp;gt; {
    return { lhs, rhs in
        for isOrderedBefore in sortDescriptors {
            if isOrderedBefore(lhs,rhs) { return true }
            if isOrderedBefore(rhs,lhs) { return false }
        }
        return false
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now finally replicate the initial example we had using sort descriptors:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let combined: SortDescriptor&amp;lt;Person&amp;gt; = combine(
  sortDescriptors: [sortByLastName,sortByFirstName,sortByYear]
)
people.sorted(by: combined) 
// [Robert Jones (1970), Jo Smith (1970), Joanne smith (1970), Joanne smith (1985), Joe Smith (1970), Joe Smyth (1970)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We ended up with the same behavior as before. However, the version using
functions is type-safe and does not rely on runtime programming, so it can be
optimized by the compiler as well. And we can use it with structs, or
non-Objective-C Objects.&lt;/p&gt;

&lt;p&gt;This approach of using functions as data ? storing them in array and building
those arrays at runtime ? opens up a new level of dynamic behavior, and it is
one way in which a statically typed compile-time-oriented language like Swift
can still replicate some of the dynamic behavior of languages like Objective-C
or Ruby.&lt;/p&gt;

&lt;p&gt;Also, it is possible to write functions that combine other functions. For
example, our &lt;code&gt;combine(sortDescriptors:)&lt;/code&gt; function took an array of sort
descriptors, and combined them into a single sort descriptor. Alternatively, we
could have written an operator to combine two sort functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;infix operator &amp;lt;||&amp;gt; : LogicalDisjunctionPrecedence
func &amp;lt;||&amp;gt;&amp;lt;A&amp;gt;(lhs: @escaping (A,A) -&amp;gt; Bool, rhs: @escaping (A,A) -&amp;gt; Bool) -&amp;gt; (A,A) -&amp;gt; Bool {
    return { x,y in
        if lhs(x,y) { return true }
        if lhs(y,x) { return false }
        
        // Otherwise, they&#39;re the same, so we check for the second condition
        if rhs(x,y) { return true }
        
        return false
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of the time, writing a custom operator is a bad idea. Custom operators are
often harder to read than functions, because the name isn&amp;rsquo;t explicit. However,
they can be very powerful when used sparingly. The operator above allows us to
rewrite our combined sort example like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let combinedAlt = sortByLastName &amp;lt;||&amp;gt; sortByFirstName &amp;lt;||&amp;gt; sortByYear
people.sorted(by: combinedAlt) 
// [Robert Jones (1970), Jo Smith (1970), Joanne smith (1970), Joanne smith (1985), Joe Smith (1970), Joe Smyth (1970)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That said, we prefer the &lt;code&gt;combine(sortDescriptors:)&lt;/code&gt; function over the custom
operator. It is clearer at the call-site, which makes for more readable code.
Unless you are writing highly domain-specific code, a custom operator is
probably overkill.&lt;/p&gt;

&lt;p&gt;The Foundation version still has one functional advantage over our version. It
can deal with optionals without having to write any more code. For example, if
we would make the &lt;code&gt;last&lt;/code&gt; property on &lt;code&gt;Person&lt;/code&gt; an optional string, we wouldn&amp;rsquo;t
have to change anything in our sorting code that uses &lt;code&gt;NSSortDescriptor&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, all is not lost. You can feel it coming: once again, we write a
function which takes a function and returns a function. We can take a regular
comparing function such as &lt;code&gt;localizedCaseInsensitiveCompare&lt;/code&gt;, which works on two
&lt;code&gt;String&lt;/code&gt;s, and turn it into a function that takes two optional &lt;code&gt;String&lt;/code&gt;s. If
both values are &lt;code&gt;nil&lt;/code&gt;, they are equal. If the left-hand side is nil, but the
right-hand isn&amp;rsquo;t they&amp;rsquo;re ascending, and the other way around. Finally, if they
are both non-&lt;code&gt;nil&lt;/code&gt;, we can use the &lt;code&gt;compare&lt;/code&gt; function to compare them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func lift&amp;lt;A&amp;gt;(_ compare: @escaping (A) -&amp;gt; (A) -&amp;gt; ComparisonResult) -&amp;gt; (A?) -&amp;gt; (A?) -&amp;gt; ComparisonResult {
    return { lhs in { rhs in
        switch (lhs, rhs) {
        case (nil, nil): return .orderedSame
        case (nil, _): return .orderedAscending
        case (_, nil): return .orderedDescending
        case let (l?, r?): return compare(l)(r)
        default: fatalError() // Impossible case
        }
    } }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to &amp;ldquo;lift&amp;rdquo; a regular comparison function into the domain of
optionals, and it can be used together with our sortDescriptor function. If you
recall the &lt;code&gt;files&lt;/code&gt; array from before, sorting them by &lt;code&gt;fileExtension&lt;/code&gt; got really
ugly because we had to deal with optionals. However, with our new &lt;code&gt;lift&lt;/code&gt;
function, it&amp;rsquo;s very clean again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let lcic = lift(String.localizedCaseInsensitiveCompare)
let result = files.sorted(by: sortDescriptor(key: { $0.fileExtension }, lcic))
result // [&amp;quot;one&amp;quot;, &amp;quot;file.c&amp;quot;, &amp;quot;file.h&amp;quot;, &amp;quot;test.h&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;We can write a similar version of &lt;code&gt;lift&lt;/code&gt; for functions that return a &lt;code&gt;Bool&lt;/code&gt;.
Before Swift 3, operators like &lt;code&gt;&amp;gt;&lt;/code&gt; were defined on optionals. They were
removed because they can lead to accidental bugs. However, with a boolean
&lt;code&gt;lift&lt;/code&gt; you can easily take an existing operator and make it work for
optionals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One drawback of the function-based approach is that functions are opaque. We can
take an &lt;code&gt;NSSortDescriptor&lt;/code&gt;, print it to the console, and we get some information
about the sort descriptor: the key path, the selector name and whether it&amp;rsquo;s
ascending. Our function-based approach cannot do this. For sort descriptors,
this is not a problem in practice. If it&amp;rsquo;s important to have that information,
we could wrap the functions in a struct or class, and store additional debug
information.&lt;/p&gt;

&lt;p&gt;This approach has also given us a clean separation between the sorting method
and the comparison method. The algorithm that Swift&amp;rsquo;s sort uses is a hybrid of
multiple sorting algorithms ? as of writing, it is an
&lt;a href=&#34;https://en.wikipedia.org/wiki/Introsort&#34;&gt;introsort&lt;/a&gt; (which is itself a hybrid
of a quicksort and a heapsort), but it switches to an &lt;a href=&#34;https://en.wikipedia.org/wiki/Insertion_sort&#34;&gt;insertion
sort&lt;/a&gt; for small collections to
avoid the upfront startup cost of the more complex sort algorithms.&lt;/p&gt;

&lt;p&gt;Introsort is not a
&amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Category:Stable_sorts&#34;&gt;stable&lt;/a&gt;&amp;rdquo; sort. That is,
it does not necessarily maintain relative ordering of values that are otherwise
equal according to the comparison function.&lt;/p&gt;

&lt;p&gt;But if you implemented a stable sort, the separation of the sort method from the
comparison would allow you to swap it in easily:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;people.stableSorted(by: combine(
  sortDescriptors: [sortByLastName,sortByFirstName,sortByYear]
))
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Structs and mutation in Swift</title>
          <link>http://chris.eidhof.nl/post/structs-and-mutation-in-swift/</link>
          <pubDate>Tue, 16 Aug 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/structs-and-mutation-in-swift/</guid>
          <description>&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This post is a draft-version of a new section in our book &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;. We&amp;rsquo;re currently updating the book for Swift 3. It&amp;rsquo;ll be a free update for everyone who has bought a digital version of the book. Thanks to &lt;a href=&#34;https://twitter.com/olebegemann&#34;&gt;Ole Begemann&lt;/a&gt; for suggestions and improvements.&lt;/p&gt;

&lt;p&gt;Value types imply that whenever a variable is copied, the value itself ? and not just a reference to the value ? is copied. For example, in almost all programming languages, scalar types are value types. This means that whenever a value is assigned to a new variable, it is copied rather than passed by reference:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var a = 42
var b = a
b += 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After the code above executes, the value of &lt;code&gt;b&lt;/code&gt; will be 43, but &lt;code&gt;a&lt;/code&gt; will still be 42. This is so natural that it seems like stating the obvious. However, in Swift, all structs behave this way, not just scalar types.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with a simple struct that describes a &lt;code&gt;Point&lt;/code&gt;. This is similar to &lt;code&gt;CGPoint&lt;/code&gt;, except that it contains &lt;code&gt;Int&lt;/code&gt;s, whereas &lt;code&gt;CGPoint&lt;/code&gt; contains &lt;code&gt;CGFloat&lt;/code&gt;s.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Point {
    var x: Int
    var y: Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For structs, Swift automatically adds a memberwise initializer. This means we can now initialize a new variable:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;let origin = Point(x: 0, y: 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because structs in Swift have value semantics, we cannot change any of the properties of a struct variable that&amp;rsquo;s defined using let. For example, the following code will not work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-highlight-swift&#34;&gt;origin.x = 10 // error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though we defined &lt;code&gt;x&lt;/code&gt; within the struct as a &lt;code&gt;var&lt;/code&gt; property, we cannot change it, because &lt;code&gt;origin&lt;/code&gt; is defined using &lt;code&gt;let&lt;/code&gt;. This has some major advantages. For example, if you read a line like &lt;code&gt;let point = ...&lt;/code&gt;, and you know that &lt;code&gt;point&lt;/code&gt; is a struct variable, then you also know that it will never, ever, change. This is a great help when reading through code.&lt;/p&gt;

&lt;p&gt;To create a variable that we can mutate, we need to create it using &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var otherPoint = Point(x: 0, y: 0)
otherPoint.x += 10
otherPoint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we create a variable using &lt;code&gt;var&lt;/code&gt;, we can mutate it. However, unlike with objects, every struct variable is unique. For example, we can create a new variable &lt;code&gt;thirdPoint&lt;/code&gt;, and assign the value of &lt;code&gt;origin&lt;/code&gt; to it. Now we can change &lt;code&gt;thirdPoint&lt;/code&gt;, but &lt;code&gt;origin&lt;/code&gt; (which we defined as an immutable variable using &lt;code&gt;let&lt;/code&gt;) will not change.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var thirdPoint = origin
thirdPoint.x += 10
thirdPoint
origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you assign a struct to a new variable, Swift automatically makes a copy. Even though this sounds very expensive, many of the copies can be optimized away by the compiler, and Swift tries hard to make the copies very cheap. In fact, many structs in the standard library are implemented using a technique called copy-on-write, which we will look at later.&lt;/p&gt;

&lt;p&gt;If we have struct values that we plan to use more often, we can define them in an extension as a static property. For example, we can define an &lt;code&gt;origin&lt;/code&gt; property on &lt;code&gt;Point&lt;/code&gt;, so that we can write &lt;code&gt;Point.origin&lt;/code&gt; everywhere we need it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Point {
    static let origin = Point(x: 0, y: 0)
}
Point.origin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Structs can also contain other structs. For example, if we define a &lt;code&gt;Size&lt;/code&gt; struct, we can create a &lt;code&gt;Rect&lt;/code&gt; struct which is composed out of a point and a size:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Size {
    var width: Int
    var height: Int
}

struct Rectangle {
    var origin: Point
    var size: Size
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just like before, we get a memberwise initializer for &lt;code&gt;Rectangle&lt;/code&gt;. The order of the parameters matches the order of the property definitions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;Rectangle(origin: Point.origin, 
          size: Size(width: 320, height: 480))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want a custom initializer for our struct, we can add it directly inside the struct definition. However, if the struct definition contains a custom initializer, Swift does not generate a memberwise initializer. By defining our custom initializer in an extension, we also get to keep the memberwise initializer.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Rectangle {
    init(x: Int = 0, y: Int = 0, width: Int, height: Int) {
        origin = Point(x: x, y: y)
        size = Size(width: width, height: height)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead of setting &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; directly, we could have also called &lt;code&gt;self.init(origin:size:)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we define a mutable variable &lt;code&gt;screen&lt;/code&gt;, we can add a &lt;code&gt;didSet&lt;/code&gt; block that gets executed whenever &lt;code&gt;screen&lt;/code&gt; changes. This &lt;code&gt;didSet&lt;/code&gt; works for every definition of a struct, be it in a playground, in a class or when defining a global variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var screen = Rectangle(width: 320, height: 480) {
    didSet {
        print(&amp;quot;Screen changed! \(screen)&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Maybe somewhat surprisingly, even if we change something deep inside the struct, this will get triggered:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;screen.origin.x = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Understanding why this works is key to understanding value types. Mutating a struct variable is semantically the same as assigning a new value to it. When we mutate something deep inside the struct, it still means we are mutating the struct, so &lt;code&gt;didSet&lt;/code&gt; still needs to get triggered.&lt;/p&gt;

&lt;p&gt;With regular structs, the compiler will mutate the value in place, and not actually make a copy. With copy-on-write structs (which we&amp;rsquo;ll discuss later), this works differently.&lt;/p&gt;

&lt;p&gt;It would make sense to add two &lt;code&gt;Points&lt;/code&gt; together. We can use the &lt;code&gt;+&lt;/code&gt; operator for this, add both members, and return a new &lt;code&gt;Point&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func +(lhs: Point, rhs: Point) -&amp;gt; Point {
    return Point(x: lhs.x + rhs.x, y: lhs.y + rhs.y)
}
screen.origin + Point(x: 10, y: 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could also lift this operation to rectangles, and add a &lt;code&gt;translate&lt;/code&gt; method which moves the rectangle by a given offset. Our first attempt doesn&amp;rsquo;t work:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-highlight-swift&#34;&gt;extension Rectangle {
    func translate(by offset: Point) {
        origin = origin + offset
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The compiler tells us that we cannot assign to the &lt;code&gt;origin&lt;/code&gt; property, because &lt;code&gt;self&lt;/code&gt; is immutable (writing &lt;code&gt;origin =&lt;/code&gt; is shorthand for &lt;code&gt;self.origin =&lt;/code&gt;). We could think of &lt;code&gt;self&lt;/code&gt; as an extra, implicit parameter that gets passed to every method on &lt;code&gt;Rectangle&lt;/code&gt;. You never have to pass the parameter, but it&amp;rsquo;s always there inside the method body. And it&amp;rsquo;s defined as &lt;code&gt;let&lt;/code&gt; by default. The reason this &lt;code&gt;let&lt;/code&gt; restriction exists is so that value semantics can be guaranteed. If we want to be able to mutate &lt;code&gt;self&lt;/code&gt;, or any property of &lt;code&gt;self&lt;/code&gt;, or even nested properties (e.g. &lt;code&gt;self.origin.x&lt;/code&gt;), we need to mark our method as &lt;code&gt;mutating&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Rectangle {
    mutating func translate(by offset: Point) {
        origin = origin + offset
    }
}
screen.translate(by: Point(x: 10, y: 10))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The compiler enforces the &lt;code&gt;mutating&lt;/code&gt; keyword. Unless we use it, we are not allowed to mutate anything inside the method. By marking the method as &lt;code&gt;mutating&lt;/code&gt;, we change the behavior of &lt;code&gt;self&lt;/code&gt;. Instead of it being a &lt;code&gt;let&lt;/code&gt;, it now works like a &lt;code&gt;var&lt;/code&gt;: we can freely change any property. (To be precise, it&amp;rsquo;s not even a &lt;code&gt;var&lt;/code&gt;, but we will get to that in a little bit).&lt;/p&gt;

&lt;p&gt;If we define a &lt;code&gt;Rectangle&lt;/code&gt; variable using &lt;code&gt;let&lt;/code&gt;, we cannot call &lt;code&gt;translate&lt;/code&gt; on it, because the only &lt;code&gt;Rectangle&lt;/code&gt;s that are mutable are the ones defined using &lt;code&gt;var&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-highlight-swift&#34;&gt;let otherScreen = screen
otherScreen.translate(by: Point(x: 10, y: 10)) // error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thinking back to the collections chapter, we can now see how the difference between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; applies to our collections as well. The &lt;code&gt;append&lt;/code&gt; method on arrays is defined as &lt;code&gt;mutating&lt;/code&gt;, and therefore we are not allowed to call it on an array defined with &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Likewise, if we think about a property setter on a struct, it makes sense that they are mutating. Because Swift automatically marks every setter as &lt;code&gt;mutating&lt;/code&gt;, you cannot call a setter on a &lt;code&gt;let&lt;/code&gt; variable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-highlight-swift&#34;&gt;let point = Point.origin
// doesn&#39;t work, because the setter is mutating.
point.x = 10 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In many cases, it makes sense to have both a &lt;code&gt;mutating&lt;/code&gt; and a non-mutating variant of the same method. For example, arrays have both a &lt;code&gt;sort()&lt;/code&gt; method (which is mutating and sorts in place) and a &lt;code&gt;sorted()&lt;/code&gt; method (which returns a new array). We can also add a non-mutating variant of our &lt;code&gt;translate(by:_)&lt;/code&gt; method. Instead of mutating &lt;code&gt;self&lt;/code&gt;, we create a copy, mutate that, and return a new &lt;code&gt;Rectangle&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Rectangle {
    func translated(by offset: Point) -&amp;gt; Rectangle {
        var copy = self
        copy.translate(by: offset)
        return copy
    }
}
screen.translated(by: Point(x: 20, y: 20))
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The names &lt;code&gt;sort&lt;/code&gt; and &lt;code&gt;sorted&lt;/code&gt; are not chosen at random, but are names that conform to the Swift &lt;a href=&#34;https://swift.org/documentation/api-design-guidelines/&#34;&gt;API Design Guidelines&lt;/a&gt;. Likewise, we applied these guidelines to &lt;code&gt;translate&lt;/code&gt; and &lt;code&gt;translated&lt;/code&gt;. There is even specific documentation for methods that have a mutating and a non-mutating variant: because &lt;code&gt;translate&lt;/code&gt; has a side-effect, it should read as an imperative verb phrase. The non-mutating variant should have a -ed or -ing suffix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In functional programming, side-effects are often considered bad, because they might influence your code in unexpected ways. For example, if an object is referenced in multiple places, every change automatically happens in every place. As we have seen in the introduction, when dealing with multi-threaded code, this can easily lead to bugs: because the object you are just checking can be modified from a different thread, all your assumptions might be invalid.&lt;/p&gt;

&lt;p&gt;With Swift structs, &lt;code&gt;mutating&lt;/code&gt; does not have the same problems. The mutation of the struct is a local side-effect, and only applies to the current struct variable. Because every struct variable is unique (or in other words: every struct value has exactly one owner), it&amp;rsquo;s almost impossible to introduce bugs this way. Unless you&amp;rsquo;re referring to a global struct variable across threads, that is.&lt;/p&gt;

&lt;p&gt;To understand how the &lt;code&gt;mutating&lt;/code&gt; keyword works, we can look at the behavior of &lt;code&gt;inout&lt;/code&gt;. In Swift, we can mark function parameters as &lt;code&gt;inout&lt;/code&gt;. Before we do that, let&amp;rsquo;s define a free function that moves a rectangle by ten points on both axes. We cannot simply call &lt;code&gt;translate&lt;/code&gt; directly on the &lt;code&gt;rectangle&lt;/code&gt; parameter, because all function parameters are immutable by default. In order to change it, we create a mutable copy using &lt;code&gt;var&lt;/code&gt;, call &lt;code&gt;translate&lt;/code&gt; and return the changed value. Then we need to re-assign it to &lt;code&gt;screen&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func moveByTenTen(rectangle: Rectangle) -&amp;gt; Rectangle {
    var changed = rectangle
    changed.translate(by: Point(x: 10, y: 10))
    return changed
}
screen = moveByTenTen(rectangle: screen)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How could we write a function that changes the &lt;code&gt;rectangle&lt;/code&gt; in place? Thinking back, the &lt;code&gt;mutating&lt;/code&gt; keyword did exactly that. It makes the implicit &lt;code&gt;self&lt;/code&gt; parameter mutable, and it changes the value of the variable.&lt;/p&gt;

&lt;p&gt;In functions, we can mark parameters as &lt;code&gt;inout&lt;/code&gt;. Just like with a regular parameter, a copy of the value gets passed in to the function. However, we can change the copy (it&amp;rsquo;s as if it were defined as a &lt;code&gt;var&lt;/code&gt;). And once the function returns, the original value gets overwritten:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func moveByTwentyTwenty(rectangle: inout Rectangle) {
    rectangle.translate(by: Point(x: 20, y: 20))
}
moveByTwentyTwenty(rectangle: &amp;amp;screen)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;moveByTwentyTwenty&lt;/code&gt; function takes the &lt;code&gt;screen&lt;/code&gt; rectangle, changes it locally, and copies the new value back (overriding the previous value of &lt;code&gt;screen&lt;/code&gt;). This behavior is exactly the same as a &lt;code&gt;mutating&lt;/code&gt; method. In fact, &lt;code&gt;mutating&lt;/code&gt; methods are just like regular methods on struct, except that &lt;code&gt;self&lt;/code&gt; is marked as &lt;code&gt;inout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Just to make sure, we cannot call &lt;code&gt;moveByTwentyTwenty&lt;/code&gt; on a rectangle that&amp;rsquo;s defined using &lt;code&gt;let&lt;/code&gt;. We can only use it with mutable values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-highlight-swift&#34;&gt;let immutableScreen = screen
moveByTwentyTwenty(rectangle: &amp;amp;immutableScreen) // error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it also makes sense how we could define a mutating operator like &lt;code&gt;+=&lt;/code&gt;. Such operators modify the left-hand side by adding the right-hand side:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func +=(lhs: inout Point, rhs: Point) {
    lhs = lhs + rhs
}
var myPoint = Point.origin
myPoint += Point(x: 10, y: 10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;a href=&#34;#functions&#34;&gt;Functions&lt;/a&gt; chapter, we will go into more detail about &lt;code&gt;inout&lt;/code&gt;. For now, it suffices to say that &lt;code&gt;inout&lt;/code&gt; is in lots of places. For example, it&amp;rsquo;s now easy to understand how modifying a subscript works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var array = [Point(x: 0, y: 0), Point(x: 10, y: 10)]
array[0] += Point(x: 100, y: 100)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The expression &lt;code&gt;array[0]&lt;/code&gt; is automatically passed in as an &lt;code&gt;inout&lt;/code&gt; variable. In the Functions chapter, we will look in more detail at &lt;code&gt;inout&lt;/code&gt; parameters, and see why we can use expressions like &lt;code&gt;array[0]&lt;/code&gt; as an &lt;code&gt;inout&lt;/code&gt; parameter.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Protocols in Swift</title>
          <link>http://chris.eidhof.nl/post/protocols-in-swift/</link>
          <pubDate>Fri, 12 Aug 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/protocols-in-swift/</guid>
          <description>&lt;p&gt;Let&amp;rsquo;s say we are writing our own data-structure, a singly linked list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;enum ListNode&amp;lt;A&amp;gt; {
    case end
    indirect case cons(A, ListNode)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Today&amp;rsquo;s goal is to make &lt;code&gt;ListNode&lt;/code&gt; conform to the &lt;code&gt;Collection&lt;/code&gt; protocol. It&amp;rsquo;s actually fairly easy, but it&amp;rsquo;s almost impossible to figure it out by just looking at the types. The documentation tells us which methods to implement, but why is it like that? Even though the protocol is clearly specified, it&amp;rsquo;s not so easy to see what you need to do. Let&amp;rsquo;s give it a try without looking at the documentation, and see what the compiler tells us:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension ListNode: Collection { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The compiler tells us we don&amp;rsquo;t conform to the following three protocols: &lt;code&gt;Sequence&lt;/code&gt;, &lt;code&gt;IndexableBase&lt;/code&gt;, and &lt;code&gt;Collection&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Looking at all these protocols, you might get overwhelmed. The most complicated one, &lt;code&gt;Collection&lt;/code&gt;, comes in at a whopping four associated types, two subscripts, four computed properties and seven methods. A protocol is a formal &amp;ldquo;todo-list&amp;rdquo; of all the things your type needs to do in order to conform. I copy/pasted this from the Standard Library, and removed all the documentation comments. With the documentation comments, it gets even harder to see!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol Collection : Indexable, Sequence {
    associatedtype IndexDistance : SignedInteger = Int
    associatedtype Iterator : IteratorProtocol = IndexingIterator&amp;lt;Self&amp;gt;
    associatedtype SubSequence : IndexableBase, Sequence = Slice&amp;lt;Self&amp;gt;
    associatedtype Indices : IndexableBase, Sequence = DefaultIndices&amp;lt;Self&amp;gt;
    public subscript(position: Self.Index) -&amp;gt; Self.Iterator.Element { get }
    public subscript(bounds: Range&amp;lt;Self.Index&amp;gt;) -&amp;gt; Self.SubSequence { get }
    public var indices: Self.Indices { get }
    public var isEmpty: Bool { get }
    public var count: Self.IndexDistance { get }
    public var first: Self.Iterator.Element? { get }
    public func makeIterator() -&amp;gt; Self.Iterator
    public func prefix(upTo end: Self.Index) -&amp;gt; Self.SubSequence
    public func suffix(from start: Self.Index) -&amp;gt; Self.SubSequence
    public func prefix(through position: Self.Index) -&amp;gt; Self.SubSequence
    public func index(_ i: Self.Index, offsetBy n: Self.IndexDistance) -&amp;gt; Self.Index
    public func index(_ i: Self.Index, offsetBy n: Self.IndexDistance, limitedBy limit: Self.Index) -&amp;gt; Self.Index?
    public func distance(from start: Self.Index, to end: Self.Index) -&amp;gt; Self.IndexDistance
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The interesting thing is: all associated types have default values. So if we decide to stick with them, we can cross those off of the todo-list, and fill the other parameters with their types:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol Collection : Indexable, Sequence {
    public subscript(position: Self.Index) -&amp;gt; IndexingIterator&amp;lt;Self&amp;gt;.Element { get }
    public subscript(bounds: Range&amp;lt;Self.Index&amp;gt;) -&amp;gt; Slice&amp;lt;Self&amp;gt; { get }
    public var indices: DefaultIndices&amp;lt;Self&amp;gt; { get }
    public var isEmpty: Bool { get }
    public var count: Int { get }
    public var first: IndexingIterator&amp;lt;Self&amp;gt;.Element? { get }
    public func makeIterator() -&amp;gt; IndexingIterator&amp;lt;Self&amp;gt;
    public func prefix(upTo end: Self.Index) -&amp;gt; Slice&amp;lt;Self&amp;gt;
    public func suffix(from start: Self.Index) -&amp;gt; Slice&amp;lt;Self&amp;gt;
    public func prefix(through position: Self.Index) -&amp;gt; Slice&amp;lt;Self&amp;gt;
    public func index(_ i: Self.Index, offsetBy n: Int) -&amp;gt; Self.Index
    public func index(_ i: Self.Index, offsetBy n: Int, limitedBy limit: Self.Index) -&amp;gt; Self.Index?
    public func distance(from start: Self.Index, to end: Self.Index) -&amp;gt; Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many of the properties and methods have default implementations as well. For example, here are the default extensions on &lt;code&gt;Collection&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Collection {
    public func map&amp;lt;T&amp;gt;(_ transform: @noescape (Self.Iterator.Element) throws -&amp;gt; T) rethrows -&amp;gt; [T]
    public func dropFirst(_ n: Int) -&amp;gt; Self.SubSequence
    public func dropLast(_ n: Int) -&amp;gt; Self.SubSequence
    public func prefix(_ maxLength: Int) -&amp;gt; Self.SubSequence
    public func suffix(_ maxLength: Int) -&amp;gt; Self.SubSequence
    public func prefix(upTo end: Self.Index) -&amp;gt; Self.SubSequence
    public func suffix(from start: Self.Index) -&amp;gt; Self.SubSequence
    public func prefix(through position: Self.Index) -&amp;gt; Self.SubSequence
    public func split(maxSplits: Int = default, omittingEmptySubsequences: Bool = default, whereSeparator isSeparator: @noescape (Self.Iterator.Element) throws -&amp;gt; Bool) rethrows -&amp;gt; [Self.SubSequence]
    public func index(where predicate: @noescape (Self.Iterator.Element) throws -&amp;gt; Bool) rethrows -&amp;gt; Self.Index?
}

extension Collection {
    public var isEmpty: Bool { get }
    public var first: Self.Iterator.Element? { get }
    public var underestimatedCount: Int { get }
    public var count: Self.IndexDistance { get }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These default extensions allow us to cross the &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;suffix&lt;/code&gt; methods off of our list. Our todo-list is now a bit shorter:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol Collection : Indexable, Sequence {
    public subscript(position: Self.Index) -&amp;gt; IndexingIterator&amp;lt;Self&amp;gt;.Element { get }
    public subscript(bounds: Range&amp;lt;Self.Index&amp;gt;) -&amp;gt; Slice&amp;lt;Self&amp;gt; { get }
    public var indices: DefaultIndices&amp;lt;Self&amp;gt; { get }
    public func makeIterator() -&amp;gt; IndexingIterator&amp;lt;Self&amp;gt;
    public func index(_ i: Self.Index, offsetBy n: Int) -&amp;gt; Self.Index
    public func index(_ i: Self.Index, offsetBy n: Int, limitedBy limit: Self.Index) -&amp;gt; Self.Index?
    public func distance(from start: Self.Index, to end: Self.Index) -&amp;gt; Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are more extensions that apply, though. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension Collection where SubSequence == Slice&amp;lt;Self&amp;gt; {
    public subscript(bounds: Range&amp;lt;Self.Index&amp;gt;) -&amp;gt; Slice&amp;lt;Self&amp;gt; { get }
}
extension Collection where Indices == DefaultIndices&amp;lt;Self&amp;gt; {
    public var indices: DefaultIndices&amp;lt;Self&amp;gt; { get }
}
extension Collection where Iterator == IndexingIterator&amp;lt;Self&amp;gt; {
    public func makeIterator() -&amp;gt; IndexingIterator&amp;lt;Self&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because all three apply, we can get rid of three more todos. Our list is getting shorter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol Collection : Indexable, Sequence {
    public subscript(position: Self.Index) -&amp;gt; IndexingIterator&amp;lt;Self&amp;gt;.Element { get }
    public func index(_ i: Self.Index, offsetBy n: Int) -&amp;gt; Self.Index
    public func index(_ i: Self.Index, offsetBy n: Int, limitedBy limit: Self.Index) -&amp;gt; Self.Index?
    public func distance(from start: Self.Index, to end: Self.Index) -&amp;gt; Int
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we start adding the &lt;code&gt;Indexable&lt;/code&gt; requirements to our todo-list, we end up with a long list again. We now also need to conform to IndexableBase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol Collection : IndexableBase, Sequence {
    public subscript(position: Self.Index) -&amp;gt; IndexingIterator&amp;lt;Self&amp;gt;.Element { get }
    public func index(_ i: Self.Index, offsetBy n: Int) -&amp;gt; Self.Index
    public func index(_ i: Self.Index, offsetBy n: Int, limitedBy limit: Self.Index) -&amp;gt; Self.Index?
    public func distance(from start: Self.Index, to end: Self.Index) -&amp;gt; Int
    associatedtype Index : Comparable
    public var startIndex: Self.Index { get }
    public var endIndex: Self.Index { get }
    public subscript(position: Self.Index) -&amp;gt; Self._Element { get }
    associatedtype SubSequence
    public subscript(bounds: Range&amp;lt;Self.Index&amp;gt;) -&amp;gt; Self.SubSequence { get }
    public func index(after i: Self.Index) -&amp;gt; Self.Index
    public func formIndex(after i: inout Self.Index)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, after removing all default implementations that are provided by collection, and using all extension that apply to our current protocol, we can cross out almost all the newly added &lt;code&gt;Indexable&lt;/code&gt; requirements (many have a default implementation). We can keep playing the game of looking at the extensions, crossing out requirements, adding new ones, until we finally end up with a minimal set of things we need to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public protocol Collection {
    associatedtype Index : Comparable
    public var startIndex: Self.Index { get }
    public var endIndex: Self.Index { get }
    public func index(after i: Self.Index) -&amp;gt; Self.Index
    public subscript(position: Self.Index) -&amp;gt; Element { get }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo and behold, we can make &lt;code&gt;ListNode&lt;/code&gt; conform:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension ListNode: Collection {
    var startIndex: Int { return 0 }
    /// This is 0(n), not the expected O(1) from `Collection`.
    var endIndex: Int {
        switch self {
        case .end: return 0
        case .cons(_, let tail): return 1 + tail.endIndex
        }
    }
    func index(after: Int) -&amp;gt; Int {
        return after+1
    }
    /// This is 0(n), not the expected O(1) from `Collection`.
    subscript(position: Int) -&amp;gt; A {
        switch (self, position) {
        case (.end, _): fatalError(&amp;quot;Index out of bounds&amp;quot;)
        case (.cons(let x, _), 0): return x
        case (.cons(_, let tail), _): return tail[position-1]
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we didn&amp;rsquo;t have to specify the &lt;code&gt;associatedtype&lt;/code&gt;, the compiler inferred this for us.&lt;/p&gt;

&lt;p&gt;Long story short: it&amp;rsquo;s really hard to see what you need to conform to. Or to be more precise: it&amp;rsquo;s not that hard, it&amp;rsquo;s just a &lt;em&gt;lot&lt;/em&gt; of manual work. Luckily, all of this can be completely automated. Unfortunately, the tooling in this respect is currently still very immature, even though the standard library isn&amp;rsquo;t. I have no idea if this will improve soon.&lt;/p&gt;

&lt;p&gt;Rather than waiting for Apple to fix this, maybe someone in the community could do this? I imagine it&amp;rsquo;s a few days of hard work: first you need to parse all the protocols in the standard library (or better: use SourceKit, because then you can also make it work on your own protocols). Then you need to have some kind of evaluation system that checks which extensions can be applied. It might need to be interactive, for example, once you specify that the &lt;code&gt;Index&lt;/code&gt; associated type will be an &lt;code&gt;Int&lt;/code&gt;, it could tell you what you still need to implement.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to build this myself, however, I&amp;rsquo;m currently too busy writing the update of &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;, and preparing new &lt;a href=&#34;https://talk.objc.io&#34;&gt;Swift Talk episodes&lt;/a&gt;. It would be the perfect procrastination project&amp;hellip;&lt;/p&gt;

&lt;p&gt;Update: Nicola &lt;a href=&#34;https://twitter.com/NSalmoria/status/764158023124258817&#34;&gt;writes in&lt;/a&gt; that &amp;ldquo;Conforming to the Collection Protocol&amp;rdquo; is actually a section of the &lt;a href=&#34;https://developer.apple.com/reference/swift/collection&#34;&gt;API documentation&lt;/a&gt;. Very good point. He also raises the point that my &lt;code&gt;endIndex&lt;/code&gt; and &lt;code&gt;subscript&lt;/code&gt; implementations aren&amp;rsquo;t &lt;code&gt;O(1)&lt;/code&gt;, which is the expected complexity as described in the &lt;code&gt;Collection&lt;/code&gt; protocol.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Responder Chain Alternatives</title>
          <link>http://chris.eidhof.nl/post/responder-chain-alternative/</link>
          <pubDate>Fri, 03 Jun 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/responder-chain-alternative/</guid>
          <description>&lt;p&gt;There&amp;rsquo;s been some recent talk about the &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/EventOverview/EventArchitecture/EventArchitecture.html#//apple_ref/doc/uid/10000060i-CH3-SW2&#34;&gt;responder chain&lt;/a&gt;. The responder chain works on a tree structure: the view hierarchy plus some other things. An event or action gets sent to a certain view (a node in the tree structure). Until it gets handled, it moves up the tree towards the root, going through all superviews, all the way until the &lt;code&gt;NSWindow&lt;/code&gt;, up to the &lt;code&gt;NSWindowController&lt;/code&gt;. You can even modify this tree structure, and insert your own responders. Depending on what you&amp;rsquo;re building (e.g. a document-based application), the responder chain can even be more advanced.&lt;/p&gt;

&lt;p&gt;The responder chain is really powerful, and saves you from writing boilerplate. It is built on top of runtime programming. For example, an action consists of a selector (in other words: a string) and the sender object. Using introspection, the application tries to dispatch an action through the responder chain, starting with the first responder, all the way up until some object handles the event.&lt;/p&gt;

&lt;p&gt;When you create a new Mac application, it comes with a menu by default. The menu items in send actions, for example, &lt;code&gt;paste:&lt;/code&gt;. If you want to implement paste support, it&amp;rsquo;s really easy. The only thing you&amp;rsquo;ll have to do (besides the domain logic of pasting) is implement a &lt;code&gt;paste:&lt;/code&gt; method somewhere in an object that will be in the responder chain. That&amp;rsquo;s it. Menu items can even be enabled and disabled automatically if you implement &lt;code&gt;validateMenuItem:&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is easy to write, but you do pay a price: maintaining these actions is more difficult than writing them. It&amp;rsquo;s hard to change code: if you ever want to refactor (for example, if you choose to rename the action), you&amp;rsquo;ll have to be very careful to change it in all places in your code, and in the Interface Builder file. If you forget to change things in one place, Interface Builder might be able to tell you this. But not always.&lt;/p&gt;

&lt;p&gt;The responder chain is easy, but it&amp;rsquo;s not simple&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:simpleasy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:simpleasy&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. There is a lot of magic behind the scenes. It makes it hard to change your code. In addition, the responder chain on the Mac is complex: you need to have the order of the chain in your head (or read the documentation) to work effectively. You need to know your view hierarchy, and changes you intend to be local can accidentally be global.&lt;/p&gt;

&lt;p&gt;The responder chain is cool, but I&amp;rsquo;m not sure if we need to replicate it in Swift. Rather, we could try to think of a way that is just as easy as the responder chain, but also &lt;em&gt;simple&lt;/em&gt;. It should be easy to refactor code. It should be easy to understand. It should be easy to debug. In order to make a local change, you shouldn&amp;rsquo;t have to worry about the global effects. I&amp;rsquo;m not sure if we can solve all these issues, but I&amp;rsquo;m pretty sure we can solve a few of them.&lt;/p&gt;

&lt;p&gt;(Functional) Reactive Programming&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; might be one solution to this. I&amp;rsquo;m not sure, because I have never applied FRP in production. The idea behind FRP is simple (and easy), but all implementations I&amp;rsquo;ve tried aren&amp;rsquo;t easy, nor simple. I think a React-like architecture is really cool, it&amp;rsquo;s simple, it&amp;rsquo;s easy, but then you want to do animations: not so easy.&lt;/p&gt;

&lt;p&gt;In short, I don&amp;rsquo;t know a good alternative to the responder chain. I don&amp;rsquo;t think FRP will be a silver bullet. For now, we can keep using the responder chain anyway, because Cocoa and Objective-C are probably not going anywhere&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:lindy&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:lindy&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Sometimes, I hope that the answer comes when the Interface Builder team starts talking to the SourceKit API, and really leverage all this deep knowledge about the current program. In the mean time, we can try to come up with solutions ourselves, by keeping the following in mind: it should not only be easy, but also simple.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:simpleasy&#34;&gt;See Rich Hickey&amp;rsquo;s amazing &lt;a href=&#34;https://www.infoq.com/presentations/Simple-Made-Easy&#34;&gt;presentation&lt;/a&gt;, or read the &lt;a href=&#34;https://github.com/matthiasn/talk-transcripts/blob/master/Hickey_Rich/SimpleMadeEasy.md&#34;&gt;transcript&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:simpleasy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;It&amp;rsquo;s not so much about the functional part of FRP, but more about the reactive part, as pointed out by &lt;a href=&#34;https://twitter.com/simjp/status/738830379298131969&#34;&gt;JP&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:lindy&#34;&gt;If I understand the &lt;a href=&#34;https://en.wikipedia.org/wiki/Lindy_effect&#34;&gt;Lindy effect&lt;/a&gt; correctly, Cocoa might be around for 30 more years&amp;hellip;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:lindy&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Undo History in Swift</title>
          <link>http://chris.eidhof.nl/post/undo-history-in-swift/</link>
          <pubDate>Mon, 30 May 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/undo-history-in-swift/</guid>
          <description>&lt;p&gt;Over the last weeks, there have been a number of blog posts that want to add dynamic behavior to Swift. Swift is already a very dynamic language: it has generics, protocols, first-class functions, and the standard library is filled with functions like &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt;, which dynamically get their operation (not using a string like with KVC, but using a function, which is safer and more flexible). Most of the people that say they want dynamic behavior mean that they &lt;a href=&#34;http://inessential.com/2016/05/26/a_definition_of_dynamic_programming_in_t&#34;&gt;want reflection&lt;/a&gt; specifically: they want to analyze and modify the program at runtime.&lt;/p&gt;

&lt;p&gt;In Swift, there is only a very limited reflection mechanism, although you can already inspect and generate code at runtime. For example, here&amp;rsquo;s how to generate a dictionary ready for &lt;code&gt;NSCoding&lt;/code&gt; or JSON serialization: &lt;a href=&#34;http://chris.eidhof.nl/post/swift-mirrors-and-json/&#34;&gt;Swift mirrors and JSON&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Today, we&amp;rsquo;ll have a look at implementing undo functionality in Swift. One of the examples people keep bringing up to make the case for reflection (the way Objective-C) supports it is &lt;code&gt;NSUndoManager&lt;/code&gt;.  With struct semantics, we can add undo support to our apps in a different way. Before we get started, make sure that you understand how structs work in Swift (most importantly, how they are all unique copies). Clearly, this post will not remove the need for runtime programming in Swift, nor is it a replacement for &lt;code&gt;NSUndoManager&lt;/code&gt;. It&amp;rsquo;s just a simple example of how to think different.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll build a struct called &lt;code&gt;UndoHistory&lt;/code&gt;. It&amp;rsquo;s generic, with the caveat that it only works when &lt;code&gt;A&lt;/code&gt; is a struct. To keep a history of all the states, we can store every value in an array. Whenever we want to change something, we just push onto the array, and whenever we want to undo, we pop from the array. We always want to start with an initial state, so we create an initializer for that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct UndoHistory&amp;lt;A&amp;gt; {
    private let initialValue: A
    private var history: [A] = []
    init(initialValue: A) {
        self.initialValue = initialValue
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, if we want to add undo support to a table view controller that&amp;rsquo;s backed by an array, we can create a value of this struct:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var history = UndoHistory(initialValue: [1, 2, 3])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To support undo for a different struct, we just start with a different initial value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;struct Person {
    var name: String
    var age: Int
}

var personHistory = UndoHistory(initialValue: Person(name: &amp;quot;Chris&amp;quot;, age: 31))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, we want to have a way of getting the current state, and setting the current state (in other words: adding an item to our history). To get the current state, we simply return the last item in our &lt;code&gt;history&lt;/code&gt; array, and if the array is empty, we return the initial value. To set the current state, we simply append to our &lt;code&gt;history&lt;/code&gt; array.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension UndoHistory {
    var currentItem: A {
        get {
            return history.last ?? initialValue
        }
        set {
            history.append(newValue)
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, if we want to change the person&amp;rsquo;s age, we can easily do that through our new computed property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;personHistory.currentItem.age += 1
personHistory.currentItem.age // Prints 32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, the code isn&amp;rsquo;t complete without an &lt;code&gt;undo&lt;/code&gt; method. This is as simple as removing the last item from the array. Depending on your preference, you could also make it &lt;code&gt;throw&lt;/code&gt; when the undo stack is empty, but I&amp;rsquo;ve chosen not to do that.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;extension UndoHistory {
    mutating func undo() {
        guard !history.isEmpty else { return }
        history.removeLast()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using it is easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;personHistory.undo()
personHistory.currentItem.age // Prints 31 again
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, our &lt;code&gt;UndoHistory&lt;/code&gt; works on more than just simple &lt;code&gt;Person&lt;/code&gt; structs. For example, if we want to create a table view controller that&amp;rsquo;s backed by an &lt;code&gt;Array&lt;/code&gt;, we can use the &lt;code&gt;currentItem&lt;/code&gt; property to get the array out &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;final class MyTableViewController&amp;lt;Item&amp;gt;: UITableViewController {
    var data: UndoHistory&amp;lt;[Item]&amp;gt;
    
    init(value: [Item]) {
        data = UndoHistory(initialValue: value)
        super.init(style: .Plain)
    }
    
    override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&amp;gt; Int {
        return data.currentItem.count
    }
    
    override func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -&amp;gt; UITableViewCell {
        let cell = tableView.dequeueReusableCellWithIdentifier(&amp;quot;Identifier&amp;quot;, forIndexPath: indexPath)
        let item = data.currentItem[indexPath.row]
        // configure `cell` with `item`
        return cell
    }

    override func tableView(tableView: UITableView, commitEditingStyle editingStyle: UITableViewCellEditingStyle, forRowAtIndexPath indexPath: NSIndexPath) {
        guard editingStyle == .Delete else { return }
        data.currentItem.removeAtIndex(indexPath.row)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another thing that is really cool with struct semantics: we get observation for free. For example, we could change the definition of &lt;code&gt;data&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;var data: UndoHistory&amp;lt;[Item]&amp;gt; {
    didSet {
        tableView.reloadData()
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even if we change something deep inside the array (e.g. &lt;code&gt;data.currentItem[17].name = &amp;quot;John&amp;quot;&lt;/code&gt;) our &lt;code&gt;didSet&lt;/code&gt; will get triggered. Of course, we probably want to do something a little bit smarter than &lt;code&gt;reloadData&lt;/code&gt;. For example, we could use the &lt;a href=&#34;https://github.com/osteslag/Changeset&#34;&gt;Changeset&lt;/a&gt; library to compute a diff and have insert/delete/move animations&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, this approach has its drawbacks too. For example, it keeps a full history of the state, rather than a diff. It only works with structs (to be precise: only with structs that have value semantics). That said, you do not have to read the &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html&#34;&gt;runtime programming guide&lt;/a&gt;, you only need to have a good grasp of structs and generics to come up with this solution &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;It would probably be nice to define a computed property &lt;code&gt;items&lt;/code&gt; which just gets and sets &lt;code&gt;data.currentItem&lt;/code&gt;. This makes the data source / delegate method implementations much nicer.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;If you want to take this further, there are a couple of fun exercises: try adding redo support, or labeled actions. You can implement reordering in the table view, and you will see that if you do it naively, you&amp;rsquo;ll end up with two entries in your undo history.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;In &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt; we go into way much more detail on these and many other topics.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Dynamic Swift</title>
          <link>http://chris.eidhof.nl/post/dynamic-swift/</link>
          <pubDate>Thu, 26 May 2016 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/dynamic-swift/</guid>
          <description>&lt;p&gt;Recently, &lt;a href=&#34;http://inessential.com&#34;&gt;Brent&lt;/a&gt; and others wrote a lot about the lack of dynamic features&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in Swift. I tried distilling Brent&amp;rsquo;s thoughts, and came up with the following summary:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s easy to write code in AppKit and UIKit, because many things just work, without having to write a lot of code.&lt;/li&gt;
&lt;li&gt;AppKit/UIKit are written in Objective-C, and use runtime programming to remove boilerplate.&lt;/li&gt;
&lt;li&gt;Therefore, we either need these same features in Swift, or need to find a different way of solving some problems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I think we don&amp;rsquo;t need all the runtime programming features from Objective-C.&lt;/p&gt;

&lt;p&gt;As long as AppKit and UIKit will be around, we&amp;rsquo;ll have Objective-C and its runtime. If Apple releases a Swift-only successor to either one of these frameworks, I&amp;rsquo;m confident that they will do a good job: they&amp;rsquo;ll make us write less boilerplate, rather than more.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at a completely different context: web programming. I&amp;rsquo;ve seen amazing web frameworks that rely a lot on runtime programming (stuff like Rails, but also &lt;a href=&#34;http://seaside.st&#34;&gt;Seaside&lt;/a&gt;, back in its day). But, there are web frameworks in languages like Haskell, Scala and C# that use features like protocols, datatype-generic programming&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and passing around functions to reduce boilerplate. With both approaches you can get short, simple, maintainable code that&amp;rsquo;s easy to write.&lt;/p&gt;

&lt;p&gt;Yet, techniques you don&amp;rsquo;t know will almost always seem more complicated at first. I tried arguing with a Haskell programmer that runtime programming can be useful. I tried arguing with a Ruby programmer that static types can be helpful. To both, it seemed unnecessary and complicated. They&amp;rsquo;ve been writing great code without those features.&lt;/p&gt;

&lt;p&gt;Brent, if you read this, I&amp;rsquo;d like to offer you a free copy of my books. Just send me an email. There are some techniques in there that will show how to replace runtime programming with things like functions, or protocols. These techniques definitely won&amp;rsquo;t solve all your problems. I do think they will show you some ways in which you can write short, simple, and maintainable code in Swift today, without having to resort to runtime programming.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;To have a productive discussion, I think it&amp;rsquo;s important to understand about which dynamic features we are speaking. Dynamic can mean so many different things: KVO/KVC, late binding, subclassing, swizzling, dependency injection, reflection, runtime casting, and so on. Because the word dynamic means different things to different people, the discussion has been (and will be) hand-wavy. Swift has a lot of dynamic features, but they are different: protocols, safe runtime casting, passing around functions, and so on.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Datatype-generic programming is a cool technique in functional programming. It allows you to write methods that operate on the structure of the data. For example, it would let you write something like an NSCoder implementation that works on all structs and classes. It&amp;rsquo;s much the same as writing it using runtime introspection, except that it&amp;rsquo;s type-safe, and more importantly, the compiler can help you catch mistakes. Unfortunately, datatype-generic programming isn&amp;rsquo;t yet (but almost!) possible in Swift.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rejected Swift Proposals</title>
          <link>http://chris.eidhof.nl/post/rejected-swift-proposals/</link>
          <pubDate>Fri, 22 Apr 2016 15:46:42 CEST</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/rejected-swift-proposals/</guid>
          <description>

&lt;p&gt;Not too long ago, we finally shipped &lt;a href=&#34;http://www.objc.io/books/advanced-swift&#34;&gt;Advanced Swift&lt;/a&gt;. It was a long process, but I&amp;rsquo;m really happy about the result. Just before we finished it, Swift became open-source, the mailing lists opened up, and many GitHub repositories appeared.&lt;/p&gt;

&lt;p&gt;At first, I subscribed to all the mailing lists, and added a filter to move them into a separate folder. There was so much discussion that I couldn&amp;rsquo;t keep up at all - at least not while finishing the book. I was so overwhelmed that I completely stopped reading the lists, let alone participate in the discussions.&lt;/p&gt;

&lt;p&gt;In the next edition of Advanced Swift (the update for Swift 3) we want to include a chapter about the history of Swift. At the beginning of this week, I set aside a day to read through all current proposals in detail. Not only to understand what is coming up, but also to learn what got rejected. With most rejections, the core team included a good rationale that can help us understand how they see the language evolve.&lt;/p&gt;

&lt;p&gt;One interesting thing I found while going through all proposals is the ever-present discussion about &amp;ldquo;readability&amp;rdquo;. I&amp;rsquo;m convinced more than ever that readability is subjective in many cases.&lt;/p&gt;

&lt;p&gt;I am going to write a series of posts about all the proposals. First off, let&amp;rsquo;s start with all the rejected proposals. Here, it&amp;rsquo;s especially interesting to see why they got rejected, and I&amp;rsquo;ve selectively quoted the rationales given by the core team.&lt;/p&gt;

&lt;h2 id=&#34;se-0009-require-self-for-accessing-instance-members-https-github-com-apple-swift-evolution-blob-master-proposals-0009-require-self-for-accessing-instance-members-md&#34;&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0009-require-self-for-accessing-instance-members.md&#34;&gt;SE-0009 Require self for accessing instance members&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This proposal wants to make &lt;code&gt;self.&lt;/code&gt; mandatory for all instance members. The author feels that requiring &lt;code&gt;self.&lt;/code&gt; increases readability, and make everything more consistent.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mandatory ?self.? introduces a significant amount of verbosity that does not justify itself with added clarity. While it is true that mandatory ?self.? may prevent a class of bugs, the cost of eliminating those bugs is fairly high in terms of visual clutter, which goes against the generally uncluttered feel of Swift. Paul Cantrell put it well in his review &lt;a href=&#34;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002910.html&#34;&gt;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/002910.html&lt;/a&gt; when he said, ?anything that is widely repeated becomes invisible.? Swift aims to avoid such boilerplate and repetition in its design, a principle also espoused by the Swift API Design Guidelines &lt;a href=&#34;https://swift.org/documentation/api-design-guidelines.html&#34;&gt;https://swift.org/documentation/api-design-guidelines.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The requirement to use ?self.? within potentially-escaping closures is a useful indicator of the potential for retain cycles that we don?t want to lose. Additionally, developers can optionally use ?self.? when they feel it improves clarity (e.g., when similar operations are being performed on several different instances, of which ?self? is one).&lt;/p&gt;

&lt;p&gt;The name-shadowing concerns behind the mandatory ?self.? apply equally well to anything found by unqualified name lookup, including names found in the global scope. To call out members of types as requiring qualification while global names do not (even when global names tend to be far more numerous) feels inconsistent, but requiring qualification for everything (e.g., ?Swift.print?, ?self.name?) exacerbates the problem of visual clutter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160104/005478.html&#34;&gt;Rationale&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The author of the proposal feels that requiring &lt;code&gt;self.&lt;/code&gt; makes the code more readable. I can see why, yet still feel the opposite. This is one of those cases where we can hardly say anything objective about it being more readable, instead, we should probably say &amp;ldquo;it&amp;rsquo;s more readable for me&amp;rdquo;.&lt;/p&gt;

&lt;h2 id=&#34;se-0010-add-staticstring-unicodescalarview-https-github-com-apple-swift-evolution-blob-master-proposals-0010-add-staticstring-unicodescalarview-md&#34;&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0010-add-staticstring-unicodescalarview.md&#34;&gt;SE-0010 Add StaticString.UnicodeScalarView&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This proposal wants to make it possible to make static substrings of &lt;code&gt;StaticString&lt;/code&gt; by adding a new type &lt;code&gt;StaticString.UnicodeScalarView&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While the addition of StaticString.UnicodeScalarView is a useful feature by itself, the core team felt that it would be inconsistent just to add this narrow set of APIs for Unicode scalars. (&amp;hellip;) If StaticString is to gain Unicode support, it should be done comprehensively, not piecemeal. Moreover, &lt;em&gt;with the aforementioned String re-evaluation underway&lt;/em&gt;, it is possible that StaticString itself might change considerably or even be obsoleted.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7697&#34;&gt;Rationale&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Emphasis mine: strings are being re-evaluated. I&amp;rsquo;m not sure what will happen to the &lt;code&gt;String&lt;/code&gt; type. I can imagine that it could get simpler somehow.&lt;/p&gt;

&lt;h2 id=&#34;se-0027-expose-code-unit-initializers-on-string-https-github-com-apple-swift-evolution-blob-master-proposals-0027-string-from-code-units-md&#34;&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0027-string-from-code-units.md&#34;&gt;SE-0027 Expose code unit initializers on String&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This proposal wants to make it easier to build Swift strings from C strings.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At this point, the core team feels that we have not fully explored the design space here, and that known alternatives (e.g., making the UTF-16 and UTF-32 views of a String mutable collections) might provide a better long-term solution. Moreover, the String type itself is undergoing a significant re-evaluation, so the core team feels that improvements to String should be delayed until the newer design is better understood.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://thread.gmane.org/gmane.comp.lang.swift.evolution/7695&#34;&gt;Rationale&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just like before, it seems like big changes will happen to the &lt;code&gt;String&lt;/code&gt; type.&lt;/p&gt;

&lt;h2 id=&#34;se-0024-optional-value-setter-https-github-com-apple-swift-evolution-blob-master-proposals-0024-optional-value-setter-md&#34;&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0024-optional-value-setter.md&#34;&gt;SE-0024 Optional Value Setter &lt;code&gt;??=&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This proposal wants to add another setter, &lt;code&gt;??=&lt;/code&gt;, which sets the left-hand side to the value of the right-hand side (but only if the left-hand side is &lt;code&gt;nil&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The proposal is rejected. While the ???=? operator?s semantics are clear and fit with other compound assignment operators, the use cases are not strong enough to motivate inclusion of this operator. &lt;a href=&#34;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6895&#34;&gt;Radek?s lukewarm +0.5 review&lt;/a&gt; captures the sentiment of the core team fairly well (as was echoed by others): one very common use case in the Ruby?s similar ||= operator is to assign a default value to an optional parameter or a local variable. However, neither case works well in Swift because ??= does not erase the optionality of the variable (and cannot be used to change a parameter now that var has been removed from parameters). Property access and subscripting could still benefit from ??=, but the latter case is likely to be handled better by a Dictionary subscript operator that can substitute a default value (see, e.g., &lt;a href=&#34;http://thread.gmane.org/gmane.comp.lang.swift.evolution/6895&#34;&gt;Joe Groff?s suggestion&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://article.gmane.org/gmane.comp.lang.swift.evolution/7694&#34;&gt;Rationale&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve used &lt;code&gt;||=&lt;/code&gt; in Ruby as well, and really like it there. But with Swift&amp;rsquo;s Optionals, I never felt the need for this. As an aside, the mentioned dictionary subscript operator is really cool. We use it in the functions chapter of Advanced Swift, in a way very similar to this: &lt;a href=&#34;https://twitter.com/AirspeedSwift/status/626701244455895044&#34;&gt;https://twitter.com/AirspeedSwift/status/626701244455895044&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;se-0018-flexible-memberwise-initialization-https-github-com-apple-swift-evolution-blob-master-proposals-0018-flexible-memberwise-initialization-md-draft&#34;&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0018-flexible-memberwise-initialization.md&#34;&gt;SE-0018 Flexible Memberwise Initialization&lt;/a&gt; (Draft)&lt;/h2&gt;

&lt;p&gt;This was a really long proposal, and really long rejection &lt;a href=&#34;https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160111/006469.html&#34;&gt;rationale&lt;/a&gt; mail. It&amp;rsquo;s about the automatic memberwise initializers that get generated (e.g. when you create a struct). The proposal wants to make this possible in more places, and make it easier to control this. The core team decided that it isn&amp;rsquo;t in scope for Swift 3. An interesting meta-point they raised it that the length of the proposal was off-putting for many people. Another thing I learned is that the Swift team really strives for predictable models. You can also see this in the accepted proposals, there are a few that really make the language more predictable and consistent (e.g. &lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0046-first-label.md&#34;&gt;named first parameters&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&#34;se-0056-allow-trailing-closures-in-guard-conditions-https-github-com-apple-swift-evolution-blob-master-proposals-0056-trailing-closures-in-guard-md&#34;&gt;&lt;a href=&#34;https://github.com/apple/swift-evolution/blob/master/proposals/0056-trailing-closures-in-guard.md&#34;&gt;SE-0056 Allow trailing closures in guard conditions&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This proposal is about letting trailing closures in &lt;code&gt;guard&lt;/code&gt; conditions compile. For example, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;guard let object = someSequence.findElement { $0.passesTest() } else {
  return
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Currently, it doesn&amp;rsquo;t like the trailing closure when using a &lt;code&gt;guard&lt;/code&gt; (or &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt;), and it needs to be written with parentheses around the closure.&lt;/p&gt;

&lt;p&gt;The proposal was &lt;a href=&#34;https://lists.swift.org/pipermail/swift-evolution-announce/2016-April/000108.html&#34;&gt;rejected&lt;/a&gt; with a very short sentence:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The core team felt that the benefits from this change were outweighed by the inconsistency it would introduce with &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Interestingly, it was proposed by Chris Lattner, a member of the core team. Again, I can see how they made the decision. If you look at it from being able to write it in a &lt;code&gt;guard&lt;/code&gt;, it seems like a logical proposal. However, once you can write trailing closures in a &lt;code&gt;guard&lt;/code&gt; condition, you&amp;rsquo;ll probably be surprised that you can&amp;rsquo;t write them in &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In the next post, we&amp;rsquo;ll look at accepted proposals. Stay tuned!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Struct Semantics in Swift</title>
          <link>http://chris.eidhof.nl/post/struct-semantics-in-swift/</link>
          <pubDate>Sun, 30 Aug 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/struct-semantics-in-swift/</guid>
          <description>&lt;p&gt;In our book &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;, we show how to implement your own copy-on-write structs in detail. This blogpost shows the same technique, but in less detail.&lt;/p&gt;

&lt;p&gt;One big difference between Swift strings and Cocoa strings is how they deal with mutability. If you define a Swift string using &lt;code&gt;let&lt;/code&gt;, the compiler enforces immutability: there is no way to change the string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let myString = &amp;quot;immutable string&amp;quot;
myString += &amp;quot; test&amp;quot; // Illegal
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Cocoa, the same is done using classes: an &lt;code&gt;NSString&lt;/code&gt; is immutable, and an &lt;code&gt;NSMutableString&lt;/code&gt; is mutable. However, there is a catch: NSMutableString is a subclass of NSString. Therefore, we can do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let x: NSMutableString = &amp;quot;Hello&amp;quot;
let y: NSString = x
x.appendString(&amp;quot; world&amp;quot;)
// Now x and y both point to the string &amp;quot;Hello world&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even if we have a variable that&amp;rsquo;s an NSString, we cannot be sure that it&amp;rsquo;s immutable, in order to be completely sure, we need to make a copy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let x: NSMutableString = &amp;quot;Hello&amp;quot;
let y: NSString = x.copy() as! NSString
x.appendString(&amp;quot; world&amp;quot;)
// Now x is &amp;quot;Hello world&amp;quot;, and y is &amp;quot;Hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With Swift strings, this works a bit differently. Because they are defined as structs, they have copy semantics. If you have a constant string, there is no way it can change under your nose:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var x = &amp;quot;Hello&amp;quot;
let y = x
x += &amp;quot; world&amp;quot;
// Now x is &amp;quot;Hello world&amp;quot;, and y is still &amp;quot;Hello&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another advantage of Swift&amp;rsquo;s approach is that both &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are the same String type. They have methods defined that can mutate the string, but all those methods are marked as &lt;code&gt;mutating&lt;/code&gt;. You simply cannot call them on constant values: the compiler won&amp;rsquo;t let you.&lt;/p&gt;

&lt;p&gt;In order to understand how they work, we will make a wrapper around &lt;code&gt;NSData&lt;/code&gt;. For mutation, &lt;code&gt;NSData&lt;/code&gt; also has a subclass &lt;code&gt;NSMutableData&lt;/code&gt;, but it suffers from the same problem as &lt;code&gt;NSString&lt;/code&gt;: you always have to make a copy if you want to be sure that you the data doesn&amp;rsquo;t change accidentally.&lt;/p&gt;

&lt;p&gt;Before we can start, we will need a small wrapper type: &lt;code&gt;Box&lt;/code&gt;. This can wrap anything, be it a class, or a struct, and the result will be a Swift class.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;final class Box&amp;lt;A&amp;gt; {
    let unbox: A
    init(_ value: A) { unbox = value }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can create our own &lt;code&gt;Data&lt;/code&gt; struct. It just contains a single field, &lt;code&gt;boxedData&lt;/code&gt;. We also add a convience accessor &lt;code&gt;data&lt;/code&gt; which just unboxes the data. We provide an initializer, which also has a default (empty) value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Data {
    private var boxedData: Box&amp;lt;NSMutableData&amp;gt;
    var data: NSData { return boxedData.unbox }
    init(data: NSData = NSData()) {
        self.boxedData = Box(NSMutableData(data: data))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, we&amp;rsquo;ll define some read-only functions: these can be used on immutable values of our struct. They just call their respective methods on &lt;code&gt;NSData&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Data {
    var length: Int { return data.length }
    var bytes: UnsafePointer&amp;lt;Void&amp;gt; {
        return data.bytes
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a mutating variant, we first write a mutating accessor for &lt;code&gt;boxedData&lt;/code&gt;. This accessor makes a copy of the data before returning it. This allows us to implemement &lt;code&gt;append&lt;/code&gt;: whenever we &lt;code&gt;append&lt;/code&gt; to a Swift &lt;code&gt;var&lt;/code&gt;, we now automatically make a copy. This way, our data has the same semantics as other Swift structs such as strings and arrays.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private var mutableData: NSMutableData {
    mutating get {
        boxedData = Box(NSMutableData(data: data))
        return boxedData.unbox
    }
}

mutating func append(other: NSData) {
    mutableData.appendData(other)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is one problem with the code above. It is very inefficient. If we define a single variable and mutate it a couple of times, each time the internal data will be copied, even though no other variable is referring to the same data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var myData = Data()
myData.append(someOtherData) // copy
myData.append(moreData) // copy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, we can change our &lt;code&gt;mutableData&lt;/code&gt; accessor to prevent copying when there are no other references to the &lt;code&gt;data&lt;/code&gt; variable. To do this, we need to check if the data is uniquely referenced. In other words, we only make a copy of the data if the data is shared. We can do this using the &lt;code&gt;isUniquelyReferencedNonObjC&lt;/code&gt; function. This is the reason why we need &lt;code&gt;Box&lt;/code&gt;: it only works on Swift classes. &lt;code&gt;NSMutableData&lt;/code&gt; is an Objective-C class, and then the function doesn&amp;rsquo;t work.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private var mutableData: NSMutableData {
    mutating get {
        if !isUniquelyReferencedNonObjC(&amp;amp;boxedData) {
            boxedData = Box(NSMutableData(data: data))
        }
        return boxedData.unbox
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have full copy semantics, and efficient behavior: only when a copy is really necessary, it is made. This way, we never have to remember to write &lt;code&gt;data.copy()&lt;/code&gt; ourselves, we implemented it correctly once and can then forget about it. I think it&amp;rsquo;s probably a matter of time until the Swift Standard Library will get extended with a &lt;code&gt;Data&lt;/code&gt; type, but even then, this technique is very useful when you want to make your own efficient structs by wrapping pointers.&lt;/p&gt;

&lt;p&gt;To test our behavior, we can add some &lt;code&gt;print&lt;/code&gt; statements to the &lt;code&gt;mutableData&lt;/code&gt; accessor, and verify that our behavior is correct:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private var mutableData: NSMutableData {
    mutating get {
        if !isUniquelyReferencedNonObjC(&amp;amp;boxedData) {
            print(&amp;quot;Making a copy&amp;quot;)
            boxedData = Box(NSMutableData(data: data))
        } else {
            print(&amp;quot;Not making a copy&amp;quot;)
        }
        return boxedData.unbox
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As stated in the introduction, we describe this technique in more detail in our book &lt;a href=&#34;https://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;. If you&amp;rsquo;ve enjoyed this post, be sure to grab a copy. Finally, a gist of the code is &lt;a href=&#34;https://gist.github.com/chriseidhof/d96f0f652a7c6358d865&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Literate Swift</title>
          <link>http://chris.eidhof.nl/post/literate-swift/</link>
          <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/literate-swift/</guid>
          <description>&lt;p&gt;Last year, when we started writing &lt;a href=&#34;http://www.objc.io/books/fpinswift/&#34;&gt;Functional Programming in Swift&lt;/a&gt;, we realized that the language would change every few weeks. We didn&amp;rsquo;t anticipate the pace, but we were ready for change. Rather than manually updating every article, we used a technique called &lt;a href=&#34;https://en.wikipedia.org/wiki/Literate_programming&#34;&gt;literate programming&lt;/a&gt;. In literate programming, you write the code and text at the same time. The code in the text can be executed. To do this, we wrote a small utility called Literate Swift.&lt;/p&gt;

&lt;p&gt;For our two new books, &lt;a href=&#34;http://www.objc.io/books/core-data/&#34;&gt;Core Data&lt;/a&gt; and &lt;a href=&#34;http://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;, we are using the same technique, except with a newer version of the tool. Literate Swift is a library (and comes with a GUI or command-line tool) that takes a Markdown file, extracts all the code blocks marked with &lt;code&gt;swift&lt;/code&gt;, and compiles those. The awesome thing about it is that you can compile your Markdown: you can statically check that the code in your blog posts (or in our case, our books) is correct.&lt;/p&gt;

&lt;p&gt;Not only does it compile the code blocks marked as Swift, it also takes code blocks marked as &lt;code&gt;print-swift&lt;/code&gt;, and replaces them by the code &lt;em&gt;and&lt;/em&gt; the result of executing that code. For example, the following block after running it through Literate Swift:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```print-swift
(1..&amp;lt;10).reduce(0, combine: +)
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will get replaced by the following block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```swift
(1..&amp;lt;10).reduce(0, combine: +)
&amp;gt; 45
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We support just highlighting code by marking a block as &lt;code&gt;highlight-swift&lt;/code&gt;. This way, it gets highlighted, but not compiled (which is also a danger, because that code might easily get outdated).&lt;/p&gt;

&lt;p&gt;Finally, sometimes you just want to work in a Swift file. For this, we support embeds. If you have the following block, Literate Swift will look at all Swift files in that directory (and all its subdirectories, recursively), and see if there are lines that are surrounded by &lt;code&gt;// &amp;lt;&amp;lt;MySnippet&amp;gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;// &amp;lt;&amp;lt;/MySnippet&amp;gt;&amp;gt;&lt;/code&gt;, and embed the contents of that into the output (without executing it). This way, you can write separate Swift files that are easy to edit using Xcode and still make sure it gets embedded into the output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;```highlight-swift
&amp;lt;&amp;lt;MySnippet&amp;gt;&amp;gt;
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Literate Swift tool can currently generate a number of outputs: HTML, Markdown and LaTeX. The &lt;a href=&#34;https://github.com/chriseidhof/LiterateSwiftGUI&#34;&gt;GUI tool&lt;/a&gt; renders the HTML directly into a web view, which is great for previewing while writing. It also has tabs for Markdown, Playground syntax and just the Swift code (for easy copy-pasting). The entire tool chain is still very immature (and a bit hacky at some points), but it has proven to be a great help during writing already. It should also be very simple to integrate this into blogging workflows, and other publishing formats.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Swift and C functions</title>
          <link>http://chris.eidhof.nl/post/swift-c-interop/</link>
          <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/swift-c-interop/</guid>
          <description>

&lt;p&gt;One of Swift&amp;rsquo;s greatest strengths is the low friction when interoperating with C and Objective-C. Swift can automatically bridge Objective-C types, and can even bridge with many C types. This allows us to use existing libraries, and provide a nice interface on top. In our book &lt;a href=&#34;http://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;, we will write a wrapper around &lt;a href=&#34;https://github.com/jgm/cmark&#34;&gt;cmark&lt;/a&gt;, and a wrapper around &lt;a href=&#34;http://libuv.org&#34;&gt;libuv&lt;/a&gt;. This post is an excerpt from a first draft of one of the C interop chapters.&lt;/p&gt;

&lt;h2 id=&#34;function-pointers&#34;&gt;Function Pointers&lt;/h2&gt;

&lt;p&gt;Rather than wrapping a larger library, let&amp;rsquo;s have a look at wrapping the standard C &lt;code&gt;qsort&lt;/code&gt; function. The type as it imported in Darwin is given below (we&amp;rsquo;ve added the argument names back in, unfortunately they get lost during the import process):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; func qsort(base:   UnsafeMutablePointer&amp;lt;Void&amp;gt;,
            nel:    Int,
            width:  Int,
            compar: ((UnsafePointer&amp;lt;Void&amp;gt;, UnsafePointer&amp;lt;Void&amp;gt;) -&amp;gt; Int32)!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The manual (&lt;code&gt;man qsort&lt;/code&gt;) describes how to use it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;qsort()&lt;/code&gt; and &lt;code&gt;heapsort()&lt;/code&gt; functions sort an array of &lt;code&gt;nel&lt;/code&gt; objects, the initial member of which is pointed to by &lt;code&gt;base&lt;/code&gt;.  The size of each object is specified by &lt;code&gt;width&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The contents of the array base are sorted in ascending order according to a comparison function pointed to by &lt;code&gt;compar&lt;/code&gt;, which requires two arguments pointing to the objects being compared.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And here is a wrapper function that uses &lt;code&gt;qsort&lt;/code&gt; to sort an array of Swift strings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func qsortWrapper(inout array: [String]) {
    qsort(&amp;amp;array, array.count, strideof(String)) { a, b in
        let l: String = UnsafePointer(a).memory
        let r: String = UnsafePointer(b).memory
        return r &amp;gt; l ? -1 : (r == l ? 0 : 1)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s look at each of the arguments being passed to &lt;code&gt;qsort&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A pointer to the base of the array. Swift arrays automatically convert to C-style base pointers when you pass them into a function that takes an &lt;code&gt;UnsafePointer&lt;/code&gt;. We use the &lt;code&gt;&amp;amp;&lt;/code&gt; prefix because it is an &lt;code&gt;UnsafeMutablePointer&lt;/code&gt; (in the C declaration, a &lt;code&gt;void *base&lt;/code&gt;). If the function didn&amp;rsquo;t need to mutate its input so declared in C as &lt;code&gt;const void *base&lt;/code&gt;, the &lt;code&gt;&amp;amp;&lt;/code&gt; wouldn&amp;rsquo;t be needed. This matches the difference with &lt;code&gt;inout&lt;/code&gt; arguments in Swift functions.&lt;/li&gt;
&lt;li&gt;The number of elements. This one is easy, just the count property of the array.&lt;/li&gt;
&lt;li&gt;To get the width of each element, we use &lt;code&gt;strideof&lt;/code&gt; ? &lt;em&gt;not&lt;/em&gt; &lt;code&gt;sizeof&lt;/code&gt;.  In Swift, &lt;code&gt;sizeof&lt;/code&gt; returns the true size of a type, but when locating elements in memory, platform alignment needs might mean the gap between each element (the &amp;ldquo;stride&amp;rdquo;) could be the size &lt;em&gt;plus&lt;/em&gt; some padding.  In case of strings they will be the same, but when dealing with some types (specific structs and enums), &lt;code&gt;sizeof&lt;/code&gt; doesn&amp;rsquo;t include the memory padding, and &lt;code&gt;strideof&lt;/code&gt; does.

&lt;ul&gt;
&lt;li&gt;For the &lt;code&gt;compar&lt;/code&gt;, we can just pass in a trailing closure expression (as long as it doesn&amp;rsquo;t capture any variables).  The &lt;code&gt;compar&lt;/code&gt; function accepts two void pointers. A C void pointer can be a pointer to anything: the first thing to do is cast it to a pointer to the actual type you (hope) it is. In the case of &lt;code&gt;qsort&lt;/code&gt;, the they will be to elements in the array, pointers to two Swift strings. Finally, the function needs to return an &lt;code&gt;Int32&lt;/code&gt;: if the first element is greater than the second, it should be larger than 0, if they&amp;rsquo;re equal, 0, and if it&amp;rsquo;s small a number, less than zero.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s easy enough to create another wrapper that works for a different type; we can copy-paste the code, change &lt;code&gt;String&lt;/code&gt; to a different type, and then we&amp;rsquo;re done. However, when we try to make the code generic, we hit the limit of C function pointers. When writing the function below, the Swift compiler segfaulted on the code below. Even if it wouldn&amp;rsquo;t segfault, the code is still impossible: it captures a variable from outside the closure. Specifically, it captures the comparison and equality operators: they are different for each A. There is nothing we can do about this: we just hit a hard limitation of the way C works.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func qsortWrapper&amp;lt;A: Comparable&amp;gt;(inout array: [A]) {
    qsort(&amp;amp;array, array.count, strideof(A)) { a, b in
        let l: A = UnsafePointer(a).memory
        let r: A = UnsafePointer(b).memory
        return r &amp;gt; l ? -1 : (r == l ? 0 : 1)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, in practice this is a problem for many C programmers as well. On OS X, there is a variant of &lt;code&gt;qsort&lt;/code&gt; called &lt;code&gt;qsort_b&lt;/code&gt;, which takes a block as the last parameter, instead of a function pointer. If we replace the &lt;code&gt;qsort&lt;/code&gt; by &lt;code&gt;qsort_b&lt;/code&gt; in the code above, our code will compile and run fine.&lt;/p&gt;

&lt;p&gt;However, on many platforms &lt;code&gt;qsort_b&lt;/code&gt; might not be available. Specifically, in other APIs, there might not be a block-based alternative. Oftentimes, there is a different solution. Many C functions and datatypes take an extra unsafe void pointer as a parameter, which is user-defined context that can be used. In C, you can store the address of any type of variable in that context (it is untyped). In the case of &lt;code&gt;qsort&lt;/code&gt;, there is a variant called &lt;code&gt;qsort_r&lt;/code&gt; which does exactly this. Comparing the type with &lt;code&gt;qsort&lt;/code&gt;, we can see that just before the block, it takes an extra parameter &lt;code&gt;thunk&lt;/code&gt;, an unsafe mutable void pointer. This parameter also gets passed in to the comparison function pointer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func qsort_r(base:   UnsafeMutablePointer&amp;lt;Void&amp;gt;,
             nel:    Int, 
             width:  Int, 
             thunk:  UnsafeMutablePointer&amp;lt;Void&amp;gt;,
             compar: ((UnsafeMutablePointer&amp;lt;Void&amp;gt;, UnsafePointer&amp;lt;Void&amp;gt;, UnsafePointer&amp;lt;Void&amp;gt;) -&amp;gt; Int32)!)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use this mutable void pointer to pass arbitrary context to &lt;code&gt;qsort&lt;/code&gt;, and use it inside the block. In order to do that, we first need to be able to convert any data into an unsafe mutable pointer. First, when we pass data to C, we want to make sure the data is retained (if it is a reference type). To do that, we can create an unmanaged reference:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let unmanaged = Unmanaged.passRetained(Box(data))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we want to create an unsafe mutable void pointer out of this. We can take the unmanaged value, make it an opaque value and initialize an unsafe mutable pointer with it. This is a couple of steps, and hopefully in the future, the Swift Standard Library will provide a shorter way to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let pointer: UnsafeMutablePointer&amp;lt;Void&amp;gt; = UnsafeMutablePointer(unmanaged.toOpaque())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can pass that pointer around. Finally, once we are done, we want to make sure to release the reference again:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unmanaged.release()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To make sure we don&amp;rsquo;t make any mistakes with retains and releases, we can wrap this up in a function. This function takes a value of any type, and a callback function which performs a computation with the void pointer. By using a callback function, we can make sure to release our object after we are done. The moment the callback returns, the value is released. Therefore, this is only safe to use when the void pointer is not stored somewhere, or used asynchronously.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func withVoidPointer&amp;lt;A&amp;gt;(x: A, @noescape f: UnsafeMutablePointer&amp;lt;Void&amp;gt; -&amp;gt; ()) {
    let unmanaged = Unmanaged.passRetained(Box(x))
    f(UnsafeMutablePointer(unmanaged.toOpaque()))
    unmanaged.release()
```
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a companion function, we can also write an &lt;code&gt;unsafeFromVoidPointer&lt;/code&gt;, which removes all the wrapping we added in the previous function. It uses &lt;code&gt;takeUnretainedValue&lt;/code&gt; to make sure to not change the retain count when using the value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func unsafeFromVoidPointer&amp;lt;A&amp;gt;(thunk: UnsafeMutablePointer&amp;lt;Void&amp;gt;) -&amp;gt; A {
    return Unmanaged&amp;lt;Box&amp;lt;A&amp;gt;&amp;gt;.fromOpaque(COpaquePointer(thunk)).takeUnretainedValue().unbox
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before we use the two functions, we will introduce a new function on &lt;code&gt;Comparable&lt;/code&gt;, which will have the form of a C comparison callback function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Comparable {
    static func compare(a: UnsafePointer&amp;lt;Void&amp;gt;, _ b: UnsafePointer&amp;lt;Void&amp;gt;) -&amp;gt; Int32 {
        let l: Self = UnsafePointer(a).memory
        let r: Self = UnsafePointer(b).memory
        return r &amp;gt; l ? -1 : (r == l ? 0 : 1)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have all the pieces together to finally wrap &lt;code&gt;qsort_r&lt;/code&gt;. Instead of a block, we will use a separate function &lt;code&gt;cmp&lt;/code&gt; which we define below. By using &lt;code&gt;withVoidPointer&lt;/code&gt;, we can convert the &lt;code&gt;A.compare&lt;/code&gt; function into a void pointer, which we pass as the fourth argument to qsort_r. The rest of the code remains unchanged.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func qsortRWrapper&amp;lt;A: Comparable&amp;gt;(inout array: [A]) {
    withVoidPointer(A.compare) { p in
        qsort_r(&amp;amp;array, array.count, strideof(A), p, cmp)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, our &lt;code&gt;cmp&lt;/code&gt; function needs to take the first void pointer, convert it back into a comparison function, and call it with the two other arguments.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;typealias Compare = (UnsafePointer&amp;lt;Void&amp;gt;, 
                     UnsafePointer&amp;lt;Void&amp;gt;) -&amp;gt; Int32

private func cmp(thunk: UnsafeMutablePointer&amp;lt;Void&amp;gt;,
                 a: UnsafePointer&amp;lt;Void&amp;gt;,
                 b: UnsafePointer&amp;lt;Void&amp;gt;) -&amp;gt; Int32 {
    let f: Compare = unsafeFromVoidPointer(thunk)
    return f(a, b)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It might seem like this is a lot of work to use a sorting algorithm from the C Standard Library, after all, the default Swift sorting algorithm is much more optimized in many cases. However, what we have done is reusable in many cases. Not only are we now able to succesfully use C&amp;rsquo;s builtin functions in Swift, we can now also use them in a type-safe and generic way. There are many other interesting libraries and functions out there, written in C, which we can wrap using the same technique.&lt;/p&gt;

&lt;p&gt;If you liked this, consider buying our book &lt;a href=&#34;http://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;, where we&amp;rsquo;ll go into much more detail on how to work with C libraries (among many other things). Thanks to my co-author &lt;a href=&#34;http://airspeedvelocity.net&#34;&gt;Airspeed Velocity&lt;/a&gt; for reading through and making edits to this text.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Advanced Swift</title>
          <link>http://chris.eidhof.nl/post/advanced-swift/</link>
          <pubDate>Tue, 21 Jul 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/advanced-swift/</guid>
          <description>&lt;p&gt;Over the last months, &lt;a href=&#34;http://airspeedvelocity.net&#34;&gt;Airspeed Velocity&lt;/a&gt; and me have been very busy writing a new book: &lt;a href=&#34;http://www.objc.io/books/advanced-swift/&#34;&gt;Advanced Swift&lt;/a&gt;. We are quite far along, most of the book has been written already. During the next months, we will polish the chapters and release them one by one. We aim to have the book done by this fall (hopefully so we can coincide with the official Swift release).&lt;/p&gt;

&lt;p&gt;Writing this book has been a lot of fun, and a huge learning experience. After finishing &lt;a href=&#34;http://www.objc.io/books/fpinswift/&#34;&gt;my first book&lt;/a&gt; last summer, I immediately started thinking about other possible books to write. When meeting Airspeed in London, we started talking about a possible collaboration, came up with a list of subjects and started writing. For this book, we also did something different: we asked &lt;a href=&#34;http://oleb.net&#34;&gt;Ole Begemann&lt;/a&gt; as our technical reviewer. He is very thorough and has already helped shaped the book in some crucial parts.&lt;/p&gt;

&lt;p&gt;I personally had a lot of fun figuring out the C interoperability. I believe this will be a huge topic in the community, especially once Swift is open source. Many of the Cocoa libraries will not be available under Linux, and rather than writing every possible library from scratch, it will be much easier to write a Swift layer on top of them. Therefore, after the announcement that Swift will be open source, we decided to focus more on interoperability in the book.&lt;/p&gt;

&lt;p&gt;In our book, we will wrap two libraries: &lt;a href=&#34;https://github.com/jgm/cmark&#34;&gt;cmark&lt;/a&gt;, a library for parsing CommonMark, and &lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;libuv&lt;/a&gt;, a library for doing asynchronous I/O. When wrapping a C library, the two most difficult things are conversions between types (for example, converting between a C data buffer and &lt;code&gt;NSData&lt;/code&gt;), and memory management (because every C library deals with memory in a different way).&lt;/p&gt;

&lt;p&gt;When wrapping a synchronous library (such as cmark), we can often make memory management really easy by wrapping pointers in classes, and then using the &lt;code&gt;deinit&lt;/code&gt; method to free up any memory. When wrapping asynchronous code, this becomes a bit harder, because classes might go out of scope (and thus are deallocated) before the memory needs to be freed.&lt;/p&gt;

&lt;p&gt;We will also discuss C function pointers, and how to work with them. Because C function pointers do not allow for capturing of any context (e.g. refer to variables outside of a function), we will need some special techniques to convert C pointer-based APIs into APIs that work with regular Swift closures.&lt;/p&gt;

&lt;p&gt;The interop chapters are only a small part of the book, we will cover a lot of topics in detail: collections, generics, structs and classes, strings, errors, protocols and much more. If you want to start reading already, and help shape the book, you should get into the &lt;a href=&#34;http://www.objc.io/books/advanced-swift/&#34;&gt;early access program&lt;/a&gt; today.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Via Alpina</title>
          <link>http://chris.eidhof.nl/post/via-alpina/</link>
          <pubDate>Tue, 23 Jun 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/via-alpina/</guid>
          <description>&lt;p&gt;In a few days, I&amp;rsquo;ll head over to Innsbruck to meet up with some friends for the weekend. After that, I&amp;rsquo;m going to start a big running adventure. My plan is to run solo across the Alps for a month, from mountain hut to mountain hut. I&amp;rsquo;ll be bringing a small backpack, filled mostly with warm layers and my laptop. In the mornings, I plan to run, and in the afternoons, I&amp;rsquo;ll &lt;a href=&#34;http://www.objc.io/books/&#34;&gt;write my new book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be honest, I have no idea what it&amp;rsquo;s going to be like. I&amp;rsquo;ve ran in mountains before, but never for such a long stretch. Being Dutch, I&amp;rsquo;m not used to mountains, so there&amp;rsquo;ll be lots to explore and learn. I&amp;rsquo;m going to be running a stretch of the &lt;a href=&#34;http://www.via-alpina.org&#34;&gt;Via Alpina&lt;/a&gt;, and will start somewhere close to Innsbruck and run towards the Mt. Blanc.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure how much I can cover in a day, and have no clue where I&amp;rsquo;ll end up after a month. Even though I&amp;rsquo;ve been training 4-5 times a week for the last years, I can imagine that running in this terrain and running so much can get me injured, in which case I&amp;rsquo;m totally prepared to stop (and come back another time).&lt;/p&gt;

&lt;p&gt;I hope there will be WiFi in at least some of the huts, and if so, I&amp;rsquo;ll be posting updates &lt;a href=&#34;http://vialpina.tumblr.com/&#34;&gt;on a new blog&lt;/a&gt;!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Swift Mirrors and JSON</title>
          <link>http://chris.eidhof.nl/post/swift-mirrors-and-json/</link>
          <pubDate>Mon, 15 Jun 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/swift-mirrors-and-json/</guid>
          <description>&lt;p&gt;Inspired by &lt;a href=&#34;https://twitter.com/mikeash/status/609575730024984576&#34;&gt;Mike Ash&amp;rsquo;s tweet&lt;/a&gt;, I tried generating JSON dictionaries in Swift by using the new reflection features. First of all, let&amp;rsquo;s create two structs for holding a person and an address:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Address {
    var street: String
}

struct Person {
    var name: String = &amp;quot;John&amp;quot;
    var age: Int = 42
    var dutch: Bool = false
    var address: Address? = Address(street: &amp;quot;Market St.&amp;quot;)
}

let john = Person()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can introspect values using the &lt;code&gt;reflect&lt;/code&gt; function. It returns a &lt;code&gt;MirrorType&lt;/code&gt;, which is a value we can use to inspect the type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reflect(john)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every &lt;code&gt;MirrorType&lt;/code&gt; value has a property &lt;code&gt;count&lt;/code&gt;, which counts the number of children (e.g. the address struct has a single child, &lt;code&gt;street&lt;/code&gt;, whereas the person struct has four children, one for every field). We can extend &lt;code&gt;MirrorType&lt;/code&gt; with a simple &lt;code&gt;children&lt;/code&gt; property that loops over the children and returns them in an array:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension MirrorType {
    var children: [(String,MirrorType)] {
        var result: [(String, MirrorType)] = []
        for i in 0..&amp;lt;self.count {
            result.append(self[i])
        }
        return result
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will implement our solution in two steps. First, we&amp;rsquo;ll create a protocol &lt;code&gt;JSON&lt;/code&gt; which converts any value into a JSON-serializable object. Because serialization might fail, we&amp;rsquo;ll mark it as &lt;code&gt;throws&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol JSON {
    func toJSON() throws -&amp;gt; AnyObject?
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now comes the big trick I copied from Mike. We can provide a default implementation by extending the protocol. This default implementation reflects a value, and loops over the children, recursively serializing them as well. If the type doesn&amp;rsquo;t have any children, we assume it&amp;rsquo;s a primitive (e.g. a String or an Int) and don&amp;rsquo;t serialize it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension JSON {
    func toJSON() throws -&amp;gt; AnyObject? {
        let mirror = reflect(self)
        if mirror.count &amp;gt; 0  {
            var result: [String:AnyObject] = [:]
            for (key, child) in mirror.children {
                if let value = child.value as? JSON {
                  result[key] = try value.toJSON()
                } else {
                    throw CouldNotSerializeError.NoImplementation(source: self, type: child)
                }
            }
            return result
        }
        return self as? AnyObject
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because of the implementation above, we can now easily derive JSON generation for structs and simple values, without having to implement it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Address: JSON { }
extension Person: JSON { }
extension String: JSON { }
extension Int: JSON { }
extension Bool: JSON { }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For optional values, we want to return nil in case the value isn&amp;rsquo;t there, and otherwise try to serialize it. This is how you can override the &lt;code&gt;toJSON&lt;/code&gt; function for a more specific type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Optional: JSON {
    func toJSON() throws -&amp;gt; AnyObject? {
        if let x = self {
            if let value = x as? JSON {
                return try value.toJSON()
            }
            throw CouldNotSerializeError.NoImplementation(source: x, type: reflect(x))
        }
        return nil
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, to test that it worked:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;do {
    try john.toJSON()
} catch {
    print(error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The full code is in a &lt;a href=&#34;https://gist.github.com/chriseidhof/48243eb549481bc38d58&#34;&gt;gist&lt;/a&gt;. It runs fine in a real app, but seems to not always work in a playground. After posting the gist on Twitter yesterday, Rich pointed out that I was late to the party: Matthew Cheok already implemented &lt;a href=&#34;https://github.com/matthewcheok/JSONCodable&#34;&gt;JSONCodable&lt;/a&gt;, which is a library that&amp;rsquo;s ready for use!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Monads in Swift</title>
          <link>http://chris.eidhof.nl/post/monads-in-swift/</link>
          <pubDate>Mon, 01 Jun 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/monads-in-swift/</guid>
          <description>&lt;p&gt;Last year, many people have dipped their toes into functional programming. Unfortunately, one of the side-effects of learning functional programming is a great amount of people trying to explain monads. Many explanations I&amp;rsquo;ve seen were bad and only add to the existing confusion. This makes me quite upset sometimes.&lt;/p&gt;

&lt;p&gt;So here&amp;rsquo;s my very short (and slightly simplified) explanation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can define &lt;a href=&#34;http://swiftdoc.org/func/flatMap/&#34;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; for a type, the type is often called a monad.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, you can define &lt;code&gt;flatMap&lt;/code&gt; for &lt;code&gt;Array&lt;/code&gt;. Array is a monad. You can define &lt;code&gt;flatMap&lt;/code&gt; for optionals. &lt;code&gt;Optional&lt;/code&gt; is a monad. You can also define &lt;code&gt;flatMap&lt;/code&gt; for other types, such as functions, tuples, reactive cocoa signals, the &lt;code&gt;Result&lt;/code&gt; type, and many more. Defining &lt;code&gt;flatMap&lt;/code&gt; for a type often is really useful, even if it&amp;rsquo;s not &amp;ldquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Monad_(functional_programming)#Formal_definition&#34;&gt;officially&lt;/a&gt;&amp;rdquo; a monad. That&amp;rsquo;s really all there&amp;rsquo;s to it.&lt;/p&gt;

&lt;p&gt;If you care for a longer explanation in Swift, then &lt;a href=&#34;http://nomothetis.svbtle.com/the-culmination-i&#34;&gt;Alexandros&amp;rsquo;s articles&lt;/a&gt; are pretty good. If you prefer video, have a look at &lt;a href=&#34;http://2014.funswiftconf.com/speakers/john.html&#34;&gt;John Gallagher&amp;rsquo;s talk&lt;/a&gt;. Finally, if you like reading books, you can read my book &lt;a href=&#34;http://www.objc.io/books/&#34;&gt;Functional Programming in Swift&lt;/a&gt; or &lt;a href=&#34;http://learnyouahaskell.com&#34;&gt;Learn You a Haskell&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Race Report: Rotterdam Marathon</title>
          <link>http://chris.eidhof.nl/post/race-report-rotterdam-harzquerung/</link>
          <pubDate>Wed, 29 Apr 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/race-report-rotterdam-harzquerung/</guid>
          <description>

&lt;p&gt;After &lt;a href=&#34;http://chris.eidhof.nl/posts/race-report-munich-marathon.html&#34;&gt;my first marathon&lt;/a&gt;, I wanted to do a better job at running my next marathon. Instead of training by myself, I decided to work with &lt;a href=&#34;https://twitter.com/markpersista&#34;&gt;Mark&lt;/a&gt;, who made a training plan for me leading up to the Rotterdam Marathon. I spent a few months in New York, a while in San Francisco, and generally traveled around while still putting in my training, this went surprisingly well. I even ran some races in the US (and won a 5K in Brooklyn).&lt;/p&gt;

&lt;p&gt;Because my training (and races) went really well, Mark proposed to try to run a 2:50 marathon (my PB is 3:28). At first, I felt very hesitant, because I spent half a year training really hard (about 5 days a week) to run this marathon. The week before the marathon, I ran a 10K at the proposed marathon pace (4:02/km), and it felt quite easy. So I decided to take the risk, willingly, with a good chance of blowing up somewhere down the road.&lt;/p&gt;

&lt;h3 id=&#34;rotterdam&#34;&gt;Rotterdam&lt;/h3&gt;

&lt;p&gt;On the 12th of April, I was feeling strong before the start. I had a relaxing week before, and felt completely prepared. We set off, and the first 10K felt really easy. However, I noticed that after that, it was just a little bit harder to keep up the pace (I was running alone on a windy part, and couldn&amp;rsquo;t hide behind a group). Yet, I managed to run the first half marathon in 1:25, exactly on pace. However, after that, my pace quickly dropped. I immediately set a new goal: just make sure to run the second half in 1:30. A bit later, I also noticed that this was too fast, and wanted to finish in under three hours. Then, during the last 10K, I only had one goal left: just keep running. Make it to the finish without walking. It was really tough, but I managed (and even was able to push out a sprint finish). The second half took me 1:40, and I ended up with &lt;a href=&#34;https://app.strava.com/activities/284274016&#34;&gt;3:05 as my final time&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Rather than a disappointment, I was really happy that I tried. I knew the risk going into this. If I would have started slightly slower, I&amp;rsquo;d probably have managed a time under 3 hours relatively easily.&lt;/p&gt;

&lt;h3 id=&#34;harzquerung&#34;&gt;Harzquerung&lt;/h3&gt;

&lt;p&gt;The recovery went well, and after about a week I was able to run again, albeit slowly. Before my marathon, I had already been looking at the &lt;a href=&#34;http://www.harzquerung.de&#34;&gt;Harzquerung&lt;/a&gt;, a 51K ultra trail through the mountains, and promised myself to run it if recovery went fast. Last week, I went for a few very short runs and felt strong, so I booked a hotel, registered for the race and got my train tickets. My first ultra-marathon!&lt;/p&gt;

&lt;p&gt;On Sunday, at the start, I was feeling even more relaxed. I knew that the course would be hard (quite some elevation compared to my usual runs), and that I could never run a fast time (whatever that means in a mountainy ultrarace). Also, it was only 2 weeks after Rotterdam, so my body wasn&amp;rsquo;t completely recovered. Therefore, I took it really easy and focused on enjoying the nature. It was the best. I chatted with some fellow runners, took it easy on the uphills and took it easy on the downhills. There were hardly any flat parts. The race itself was also very well organized, and the course well marked. After 7km my legs felt tired, but that feeling went away quite quickly.&lt;/p&gt;

&lt;p&gt;After 45km I was ready for the race to end, but still had quite a bit to go. But because I had not pushed myself at all, it was still really enjoyable. The recovery went really fast as well: it&amp;rsquo;s four days later and I was able to finish a normal training. This was my first ultra race, but definitely not my last, I thoroughly enjoyed it. Here&amp;rsquo;s my &lt;a href=&#34;https://app.strava.com/activities/292438296&#34;&gt;strava link&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;plan&#34;&gt;Plan&lt;/h3&gt;

&lt;p&gt;In July, I&amp;rsquo;m thinking of doing a long trip crossing the Alps, running for a few weeks. Then, I&amp;rsquo;ll prepare specifically for the Berlin marathon, and if I stay injury-free, I&amp;rsquo;ll try to give the 2:50 another go. After Berlin, I&amp;rsquo;ll probably look into more ultra trails.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Swift in Production: Scenery</title>
          <link>http://chris.eidhof.nl/post/scenery-launch/</link>
          <pubDate>Tue, 24 Mar 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/scenery-launch/</guid>
          <description>&lt;p&gt;Today, we shipped our first Swift app completely written in Swift: &lt;a href=&#34;https://www.getscenery.com&#34;&gt;Scenery&lt;/a&gt;. From our press release:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Scenery is the Mac app that makes your app or website designs look instantly beautiful and professional, by putting them in context ? placed into smartphones, tablets, laptops, and more ? in stunningly-photographed scenes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://www.getscenery.com/gallery/video.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s been a very interesting experience, because all iOS and Mac apps we&amp;rsquo;ve built before were done using Objective-C. In the beginning, we spent a lot of time waiting for the compiler, but the stability and speed of the tooling has improved a lot in recent releases, so we hardly ever have issues anymore. Even when you take the time spent waiting on the compiler into account, I think we were still writing better code at a higher speed than with Objective-C.&lt;/p&gt;

&lt;p&gt;The code base we ended up with makes me much happier than most Objective-C code bases I&amp;rsquo;ve seen. Having Swift&amp;rsquo;s type-safety greatly improves my trust in refactorings: I feel free to change a function&amp;rsquo;s type, add parameters or change parameter types. I know that the compiler will help me catch any type-related errors. We use a lot of functional patterns: &lt;a href=&#34;http://chris.eidhof.nl/posts/tiny-networking-in-swift.html&#34;&gt;tiny networking&lt;/a&gt;, &lt;a href=&#34;http://www.objc.io/snippets/16.html&#34;&gt;typed observers&lt;/a&gt;, &lt;a href=&#34;http://www.objc.io/snippets/20.html&#34;&gt;configuration values&lt;/a&gt;, &lt;a href=&#34;http://www.objc.io/snippets/8.html&#34;&gt;wrapper types&lt;/a&gt;, and the list goes on. Many of the snippets we published over at &lt;a href=&#34;http://www.objc.io&#34;&gt;objc.io&lt;/a&gt; come from our Scenery code base.
Another really big win was the ability to use enums. Creating a new enum is very simple, and comes at no runtime cost, yet gives us a lot better readability and maintainability.&lt;/p&gt;

&lt;p&gt;Finally, we use a lot of tiny functions that help us compose functionality out of short and understandable pieces.
Our app uses two frameworks: UIShared, which has reusable code that&amp;rsquo;s unrelated to Scenery, and SceneryShared, which has a lot of our domain logic. The app itself is very lean.  This means that the stateful parts of our app are quite contained (in the app itself), and that most of our code is stateless and thus easier to maintain and understand.&lt;/p&gt;

&lt;p&gt;So, when people ask me whether Swift is ready for production, for me the answer is a resounding yes. It&amp;rsquo;s served us very well, and it keeps getting better, faster and easier. And the best thing: this is only the beginning of the Swift journey, if the language keeps improving at this pace, the future will be very bright indeed.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>The Boring Choice</title>
          <link>http://chris.eidhof.nl/post/boring-choice/</link>
          <pubDate>Thu, 05 Mar 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/boring-choice/</guid>
          <description>&lt;p&gt;I love new and experimental technologies. These days, I like trying to push Swift to the limits. I once wrote a Haskell web backend for financial transactions that used lots of generic programming. When Rails was just out, I started playing around with it (back when hosting was really complicated, except if you wanted PHP3 and MySQL). I&amp;rsquo;ve used all these things in production code, mainly in very small teams.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&#34;https://www.getscenery.com&#34;&gt;Scenery&lt;/a&gt;, we also had to write a backend. I debated using Swift (but hosting would&amp;rsquo;ve been a pain), or maybe something like Haskell or Scala. The cool kids seem to be doing Go and Elixir these days. It&amp;rsquo;d have been lots of fun. However, I went for one of the most boring choices: Ruby on Rails. Rails is at version 4, and even though a lot has changed, it is also very mainstream these days. This means there&amp;rsquo;s a lot less exciting technology to play around with.&lt;/p&gt;

&lt;p&gt;There are a couple of reasons for choosing Rails:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s very widely used and tested. During this project, I haven&amp;rsquo;t come across any bugs in Rails.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s really easy to get help. Most of the times, I don&amp;rsquo;t even need to ask, but just google my problem and I&amp;rsquo;ll quickly find out what&amp;rsquo;s going wrong.&lt;/li&gt;
&lt;li&gt;There are &lt;em&gt;so many&lt;/em&gt; libraries available. This is a killer feature: I wanted to keep a history of some of my model objects, and found out about &lt;a href=&#34;https://github.com/airblade/paper_trail&#34;&gt;papertrail&lt;/a&gt;. For testing, I can use &lt;a href=&#34;https://github.com/thoughtbot/factory_girl&#34;&gt;FactoryGirl&lt;/a&gt;. For authentication, we use &lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;devise&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The eco-system is great, Heroku takes away a lot of deployment worries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, one of the most important things is that anybody on our team can contribute. With Haskell, there would have been a decent chance that I would be the only one even being able to build the project. With Rails, none of the people we work with had to learn anything new: they were productive immediately. I recently came across this African proverb, and thought it fitted well to our situation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you want to go fast, go alone. if you want to go far, go together.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(Via &lt;a href=&#34;https://twitter.com/ryangraves/status/562492587039150080&#34;&gt;ryangraves&lt;/a&gt;
)&lt;/p&gt;

&lt;p&gt;So far, I&amp;rsquo;m really happy with the boring choice. Being able to get many hands on deck quickly really made a big difference. Hardly having to worry about stability and deployment helps me sleep at night. And finally, knowing that whenever I have a problem, others will have had the same problem saves me heaps of time. Luckily, we&amp;rsquo;ve written the Mac app entirely in Swift, with lots of functional code, so there&amp;rsquo;s always a place left to play with new technology.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Functional View Controllers</title>
          <link>http://chris.eidhof.nl/post/functional-view-controllers/</link>
          <pubDate>Tue, 13 Jan 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/functional-view-controllers/</guid>
          <description>&lt;p&gt;I&amp;rsquo;m working on something new: a functional wrapper around view controllers. Making view controllers simpler has been a &lt;a href=&#34;http://www.objc.io/issue-1/&#34;&gt;long obsession&lt;/a&gt; for me. I think functional view controllers might make them even simpler. This is still very much work in progress, but I hope that over the next months I can flesh out something nice. For this article, we&amp;rsquo;ll work with artists and albums, and this is how they&amp;rsquo;re defined:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Album {
    let name: String
}

struct Artist {
    let name : String
    let albums: [Album]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&amp;rsquo;s some example data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let artists : [Artist] = [
    Artist(name: &amp;quot;JS Bach&amp;quot;, albums: [Album(name: &amp;quot;The Art of Fugue&amp;quot;)]),
    Artist(name: &amp;quot;Simeon Ten Holt&amp;quot;, albums: [])
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When working with UIKit, view controllers are the opposite of isolated: they are connected to everything. The view controller often pulls network or database data, populates and interacts with views, and finally, it pushes other view controllers onto the navigation stack (or presents them in a different way). In this article, we&amp;rsquo;ll look at view controllers that do only one thing: they populate the views and interact with them. They don&amp;rsquo;t load any data themselves, nor do they present other view controllers.&lt;/p&gt;

&lt;p&gt;In functional view controllers, every view controller takes some input, renders that, and has some output. For example, if we consider the stock Music app, there&amp;rsquo;s a simple table view controller. It displays a list of artists, and, when the user taps on an artist, it shows another view controller. We could model that as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let chooseArtist: ViewController&amp;lt;[Artist], Artist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For now, we can ignore how it is implemented. The only thing this view controller does is displaying the list of artists in a table, and calling a callback once an artist is selected. We can also make a &lt;code&gt;chooseAlbum&lt;/code&gt; view controller, which, given a list of albums, renders them and lets the user select an album:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let chooseAlbum: ViewController&amp;lt;[Album],Album&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we would like to present both in a navigation controller. To do that, there&amp;rsquo;s a function called &lt;code&gt;rootViewController&lt;/code&gt;, which lifts a view controller into a navigation controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func rootViewController&amp;lt;A,B&amp;gt;(vc: ViewController&amp;lt;A,B&amp;gt;) -&amp;gt; 
                           NavigationController&amp;lt;A,B&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let startPoint: NavigationController&amp;lt;[Artist], Artist&amp;gt; = 
    rootViewController(chooseArtist)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we would like to add some functionality to push another view controller. For example, when the user selects an artist, we would like to push the &lt;code&gt;chooseAlbum&lt;/code&gt; view controller onto the navigation stack. To do that, we can use the &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; operator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func &amp;gt;&amp;gt;&amp;gt;&amp;lt;A,B,C&amp;gt;(l: NavigationController&amp;lt;A,B&amp;gt;, 
                r: ViewController&amp;lt;B,C&amp;gt;) -&amp;gt; 
                   NavigationController&amp;lt;A,C&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The operator takes a left operand (a navigation controller from A to B) and a right operand (a view controller from B to C). When the left view controller is done (e.g. when an artist is selected) it pushes the right view controller.&lt;/p&gt;

&lt;p&gt;However, we can&amp;rsquo;t use this &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; operator yet. Our &lt;code&gt;chooseArtist&lt;/code&gt; returns an artist, but our &lt;code&gt;chooseAlbum&lt;/code&gt; expects a list of albums, not just a single artist. Luckily, the solution is very easy: we can use a &lt;code&gt;map&lt;/code&gt; function (which works similar to &lt;code&gt;map&lt;/code&gt; on optionals or dictionaries).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func map&amp;lt;A,B,C&amp;gt;(vc: NavigationController&amp;lt;A,B&amp;gt;, 
                f: B -&amp;gt; C) -&amp;gt; 
                NavigationController&amp;lt;A,C&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, the map function takes a navigation controller that maps from A to B. Once that navigation controller is done, it applies a function &lt;code&gt;f&lt;/code&gt; to convert that B into a C, and we end up with a navigation controller that maps from A to C. Now, we have all the ingredients to write down our entire hierarchy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let artists = rootViewController(chooseArtist)
let navigation = map(artists, { $0.albums }) &amp;gt;&amp;gt;&amp;gt; chooseAlbum
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re almost done. We haven&amp;rsquo;t looked at how &lt;code&gt;chooseArtist&lt;/code&gt; and &lt;code&gt;chooseAlbum&lt;/code&gt; are defined. They&amp;rsquo;re both table view controllers. There&amp;rsquo;s a simple function &lt;code&gt;tableViewController&lt;/code&gt; in the library which will render an array of things into a table, and performs an action when a cell is selected. Because all of this can be made to work independent of the datatype, the only thing we need to specify is how to configure the cell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func tableViewController&amp;lt;A&amp;gt;(render: (UITableViewCell, A) -&amp;gt; ()) -&amp;gt; ViewController&amp;lt;[A],A&amp;gt;

let chooseArtist: ViewController&amp;lt;[Artist], Artist&amp;gt; = tableViewController { cell, artist in
    cell.textLabel?.text = artist.name
}

let chooseAlbum: ViewController&amp;lt;[Album],Album&amp;gt; = tableViewController { cell, album in
    cell.textLabel?.text = album.name
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have our individual view controllers defined, and our navigation stack, it&amp;rsquo;s time to setup the window&amp;rsquo;s root view controller in the app delegate. We run the navigation stack we created with the list of artists defined above:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;window?.rootViewController = run(navigation, artists) { album in
    println(&amp;quot;Selected \(album.name)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s all there is to it. With just a few simple lines, we have created a working app with two table views, with the only &amp;ldquo;real&amp;rdquo; programming that we&amp;rsquo;ve done is configuring the cell. Based off of that, we created two table view controllers, and hooked them up together. The table view controllers know absolutely nothing about each other, and are not contaminated with any navigation controller logic. They don&amp;rsquo;t even know how to load the data. Having to do this outside of the view controller really forces you to separate concerns.&lt;/p&gt;

&lt;p&gt;The current implementation is a proof of concept. We&amp;rsquo;ll have to see how this can extend. For example, how does this work with custom transitions? Adding modal transitions is easy, but I&amp;rsquo;m not entirely sure what would be the best way to have completely custom transitions outside of a navigation controller. It&amp;rsquo;s very easy to use this technique with existing view controllers, you can easily wrap them. I&amp;rsquo;d love to experiment more with this. But as I&amp;rsquo;m mostly doing Mac development these days, I can&amp;rsquo;t promise the development will go very fast.&lt;/p&gt;

&lt;p&gt;A full example is on &lt;a href=&#34;https://github.com/chriseidhof/functional-view-controllers/&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Repmin in Swift</title>
          <link>http://chris.eidhof.nl/post/repmin-in-swift/</link>
          <pubDate>Sat, 10 Jan 2015 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/repmin-in-swift/</guid>
          <description>&lt;p&gt;This might be my most obscure functional programming post yet.&lt;/p&gt;

&lt;p&gt;Yesterday, I attended the Dutch Functional Programming Day, and it was very nice to see many old friends. &lt;a href=&#34;http://foswiki.cs.uu.nl/foswiki/Swierstra/WebHome&#34;&gt;Doaitse&lt;/a&gt;&amp;rsquo;s talk was about different solutions to the repmin problem (and related problems). Repmin is a slightly obscure problem (but famous amoung a small group of functional programmers):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Given a binary tree with integers at the leaves, replace each leave&amp;rsquo;s value by the minimum value in the tree.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example, given the following tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1 2) (3 (4 5))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result would be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(1 1) (1 (1 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The simplest solution would take two steps: in step 1, we iterate over the tree, finding the minimum value. In step 2, we iterate over the tree again, replacing every leaf with the minimum value. Let&amp;rsquo;s build that. In Swift, we can define a tree like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Tree {
    case Node(Tree, Tree)
    case Leaf(Int)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finding the minimum is simple, in case of a leaf we return the leaf&amp;rsquo;s value, in case of a node we return the minimum of both branches:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func minimum(t: Tree) -&amp;gt; Int {
    switch t {
    case let .Node(l, r):
        return min(minimum(l), minimum(r))
    case .Leaf(let x):
        return x
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For replacing, we can write another function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func replaceAllLeaves(t: Tree, newValue: Int) -&amp;gt; Tree {
    switch t {
    case .Node(let l, let r):
        return .Node(replaceAllLeaves(l, newValue), replaceAllLeaves(r, newValue))
    case .Leaf(_):
        return .Leaf(newValue)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can write our solution like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repmin = { tree in replaceAllLeaves(tree, minimum(tree)) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We compute the minimum of &lt;code&gt;tree&lt;/code&gt; and then replace all values in the leaves with that result, and everything is fine. However, in 1984, Richard Bird came up with &lt;a href=&#34;http://link.springer.com/article/10.1007/BF00264249#page-1&#34;&gt;a solution&lt;/a&gt; that uses a single inspection. In a single pass, we compute both the minimum of a tree, and a function that, given the minimum, returns the new tree. That function looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func repMinHelper(t: Tree) -&amp;gt; (Int, Int -&amp;gt; Tree) {
    switch t {
    case .Node(let l, let r):
        let (lMin, lBuild) = repMinHelper(l)
        let (rMin, rBuild) = repMinHelper(r)
        return (min(lMin,rMin), 
                { x in .Node(lBuild(x), rBuild(x)) })
    case .Leaf(let value):
        return (value, { x in .Leaf(x) })
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we can solve the repmin problem by creating a new function &lt;code&gt;repMin&lt;/code&gt; that wraps the helper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func repMin(t: Tree) -&amp;gt; Tree {
    let (min, builder) = repMinHelper(t)
    return builder(min)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty cool: in a single inspection, we compute both the minimum value and a function to build the new tree. This relates strongly to &lt;a href=&#34;http://en.wikipedia.org/wiki/Attribute_grammar&#34;&gt;attribute grammars&lt;/a&gt;: we can think of the minimum as a synthesized attribute, and the new tree uses that synthesized attributed as an inherited attribute.&lt;/p&gt;

&lt;p&gt;In a way, it also reminds me of &lt;a href=&#34;https://github.com/mbrandonw/learn-transducers-playground&#34;&gt;transducers&lt;/a&gt;: transducers combine multiple functions that operate on lists, but compute everything using a single pass. The technique above is a little bit similar, but for tree-structures. I can&amp;rsquo;t really see a useful way to apply this in my production code, but it&amp;rsquo;s an interesting exercise nonetheless.&lt;/p&gt;

&lt;p&gt;The full code is &lt;a href=&#34;https://gist.github.com/chriseidhof/6b4d1c8a542003d60cb9&#34;&gt;available as a gist&lt;/a&gt;, and uses &lt;code&gt;Box&lt;/code&gt; to work around Swift&amp;rsquo;s limitations with recursive enums.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2014</title>
          <link>http://chris.eidhof.nl/post/2014/</link>
          <pubDate>Wed, 17 Dec 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/2014/</guid>
          <description>&lt;p&gt;Continuing from my &lt;a href=&#34;http://chris.eidhof.nl/posts/2013.html&#34;&gt;2013 retrospective&lt;/a&gt;, here&amp;rsquo;s one for 2014.&lt;/p&gt;

&lt;p&gt;In the beginning of the year, Florian and me moved into the A Color Bright office (which has been awesome). We continued working on Deckset, and &lt;a href=&#34;http://chris.eidhof.nl/posts/we-launched-deckset.html&#34;&gt;launched Deckset&lt;/a&gt; in April. It&amp;rsquo;s been a really rewarding experience to have a product out, maintain it and have lots of happy users. We have some great plans for next year.&lt;/p&gt;

&lt;p&gt;In May, we organized the second edition of &lt;a href=&#34;http://2014.uikonf.com&#34;&gt;UIKonf&lt;/a&gt;. It has been a blast, and except for one person, we only heard really nice feedback. I&amp;rsquo;m super happy that later in the year we decided to hand over UIKonf to a new team, and even more excited to be attending next year&amp;rsquo;s UIKonf without being an organizer.&lt;/p&gt;

&lt;p&gt;In June, I went hiking with Pim in the Polish mountains. This was during WWDC, and there we heard about Swift. After coming home from my trip, it was very clear to me that we had to write a book on &lt;a href=&#34;http://chris.eidhof.nl/posts/functional-programming-in-swift.html&#34;&gt;Functional Programming in Swift&lt;/a&gt;. We put up a website, started writing, planning and selling pre-access. We&amp;rsquo;re very happy with how the book turned out, and this is reflected by both the sales and feedback from our readers.&lt;/p&gt;

&lt;p&gt;We kept on putting out monthly issues of &lt;a href=&#34;http://www.objc.io&#34;&gt;objc.io&lt;/a&gt;, and starting creating weekly &lt;a href=&#34;http://www.objc.io/snippets/&#34;&gt;functional snippets&lt;/a&gt;. This still takes quite a bit of effort, but we have smoothened the process. There has been another big batch of awesome authors who wrote some great stuff. It&amp;rsquo;s a really rewarding project. Because of objc.io and the book, I&amp;rsquo;ve been &lt;a href=&#34;http://github.com/chriseidhof/speaking/&#34;&gt;speaking&lt;/a&gt; a lot last year. It&amp;rsquo;s been awesome to travel so much and meet so many nice people all over the world. Some of my favorite places from last year were Istanbul, Poland and Minsk. I&amp;rsquo;ve been to only one conference where I wasn&amp;rsquo;t involved as an organizer or speaker, and that was &lt;a href=&#34;http://makerland.com&#34;&gt;Makerland&lt;/a&gt;, which was really, really awesome.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been to the USA twice this year. In fact, I&amp;rsquo;m writing this from New York, where I&amp;rsquo;m staying for 6 weeks this winter. I really like the city, although I do miss Berlin quite a bit! In the summer I spent another 4 weeks all over the country, in New York, Boulder, Denver, San Francisco and more New York. I fell in love with Boulder and its mountains. In NY, I met many great new people. Two weeks ago, together with &lt;a href=&#34;https://twitter.com/mbrandonw&#34;&gt;Brandon&lt;/a&gt; I organized the &lt;a href=&#34;http://2014.funswiftconf.com&#34;&gt;Functional Swift Conference&lt;/a&gt;, which was a great success.&lt;/p&gt;

&lt;p&gt;There has been some solid running in 2014: I&amp;rsquo;ve hit the 2000km mark early December. My favorite running spots were the Alps and the Rockies, where I would wake up, run up a mountain, eat lunch, run back down and then write. I also ran &lt;a href=&#34;http://chris.eidhof.nl/posts/race-report-munich-marathon.html&#34;&gt;my first real marathon&lt;/a&gt;, which didn&amp;rsquo;t really go as well as I wanted. Directly after that, I started training with &lt;a href=&#34;https://twitter.com/markpersista&#34;&gt;Mark&lt;/a&gt; as my coach, and he made an awesome schedule on the way to the Rotterdam Marathon in April 2015.&lt;/p&gt;

&lt;p&gt;Work-wise, we spent the last months finishing details on the print version of our book, maintaining Deckset and objc.io, but also have put in a lot of work &lt;a href=&#34;https://twitter.com/getscenery&#34;&gt;creating our new app&lt;/a&gt;. It&amp;rsquo;s going to be another Mac app, and we hope to be ready in early 2015. I expect this to save people a lot of time, maybe even more so than Deckset. Once we ship it, I&amp;rsquo;ve achieved one of my goals originally set for 2012: have three products out there. Only late by a few years.&lt;/p&gt;

&lt;p&gt;Thanks to all the awesome people who made this year so great. ?&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Burnout: five years later</title>
          <link>http://chris.eidhof.nl/post/burnout-five-years-later/</link>
          <pubDate>Sun, 30 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/burnout-five-years-later/</guid>
          <description>&lt;p&gt;About five years ago, I had a burnout. Or at least, something very similar to it. I had no joy programming anymore, &lt;em&gt;especially&lt;/em&gt; programming for iOS. I wrote some stream-of-consciousness &lt;a href=&#34;http://chris.eidhof.nl/posts/how-i-got-a-burnout.html&#34;&gt;posts&lt;/a&gt; about it. Now, five years later, I&amp;rsquo;m a very happy programmer again. I&amp;rsquo;m writing this to figure out what happened in between.&lt;/p&gt;

&lt;p&gt;When I realized things weren&amp;rsquo;t going to well with me, the first thing that I did is taking a few months off. I hardly did any programming. In fact, I hardly did anything at all. I did start taking running a bit more serious, and really tried to put some effort into that. I believe the running was a big factor in helping me through the burnout, both because it helps against depression and it made me feel good about myself. Even at the moment I&amp;rsquo;m writing this, I have just put in a hard run and am still high on the endorphins.&lt;/p&gt;

&lt;p&gt;I started thinking really hard about other ways to make a living, but couldn&amp;rsquo;t really figure out what I wanted. I did not get excited at all about any technology-related stuff. The &amp;ldquo;best&amp;rdquo; idea was to start a trail running company that organizes trips to mountainous areas for people who live in flat places. I moved to Berlin. I had some small iOS gigs going on to pay the bills, but I wasn&amp;rsquo;t too happy (although I was happier than in the beginning). Then, at some point, I decided I needed to take on some bigger gigs to make sure I could keep paying the bills, and started doing lots of things. I got busy, and at some point started working with &lt;a href=&#34;https://twitter.com/floriankugler&#34;&gt;Florian&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Working with him made things really fun again, for many different reasons. We had a challenging project and took the time to do things right. He was inexperienced on the iOS platform, but really challenged lots of my habits, and I learned a lot. At the same time, I started organizing the first edition of &lt;a href=&#34;http://www.uikonf.com&#34;&gt;UIKonf&lt;/a&gt;. Doing all these things was just so much fun. It did &amp;ldquo;feel like work&amp;rdquo; sometimes, but because of the results we were getting, it was awesome.&lt;/p&gt;

&lt;p&gt;Around the same time, I started objc.io, together with Florian and &lt;a href=&#34;https://twitter.com/danielboedewadt&#34;&gt;Daniel&lt;/a&gt;. I already knew working with Florian was awesome. Working with Daniel was just as awesome, but for different reasons. He is both really smart and has &lt;em&gt;a lot&lt;/em&gt; of experience. It is so nice writing things and having Daniel say: &amp;ldquo;well, actually&amp;hellip;&amp;rdquo; and learning so much from his explanations. He often solves problems in a very elegant way that is obvious to understand, but not so easy to come up with. Learning all this stuff made programming a lot of fun again.&lt;/p&gt;

&lt;p&gt;Looking back, I think I might have &lt;a href=&#34;http://chris.eidhof.nl/posts/reaching-a-plateau.html&#34;&gt;reached a plateau&lt;/a&gt; when I got the burnout. Taking a long break and having a new hobby was really good. After that, learning lots of new things and accepting that I hardly knew anything really made me excited about programming again. Finally, a major part is other people: working together with people who challenge you is really great. If you&amp;rsquo;re struggling with similar problems: it took me a few years, but this is what worked for me.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>CocoaConf</title>
          <link>http://chris.eidhof.nl/post/cocoaconf/</link>
          <pubDate>Sat, 22 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/cocoaconf/</guid>
          <description>

&lt;p&gt;This summer, I was in touch with CocoaConf about speaking at their Boston edition. After they checked their schedules, they confirmed me as a speaker, and asked me if I could swing a second talk so that they could cover my flight from NY and my hotel. I&amp;rsquo;ve never given two talks at a single conference, but I was happy to do it: challenge accepted.  I started organizing my flight to the US around this, I had started planning my two talks, and got super excited about meeting all these awesome people.&lt;/p&gt;

&lt;p&gt;Just three weeks before the conference, I got an email that both of my talks were cancelled, because they had overbooked on speakers. I felt like it could have been an honest mistake, but it did make me feel sad, because I was really looking forward to this. However, these things can happen.&lt;/p&gt;

&lt;p&gt;At the same time, I saw that another speaker (who works for one of the sponsors) had just been announced. It turns out that he works for one of the sponsors (he&amp;rsquo;s a great guy, and deserves no blame in this story).
It wasn&amp;rsquo;t clear at the time, but after asking about it specifically, I found out I got bumped because of a sponsored talk.
CocoaConf offered me a free ticket to make up for it, but I gave it away.&lt;/p&gt;

&lt;p&gt;Bumping speakers is not so cool, but I imagine it can happen sometimes. Bumping me without telling me upfront that they were doing it to make room for a sponsored speaker made me feel really shitty. About a week ago they asked my if I wanted to speak in Atlanta, and I told them in clear words that this experience made me never want to speak at CocoaConf again. A similar thing happened with the GOTO conference once, but at least they told me directly that I was being bumped because of a sponsored talk.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t mind if conference organizers make an honest mistake. I&amp;rsquo;ve slept in really bad hotels, had to wait at airports for a really long time, have experienced bad tech setups and it&amp;rsquo;s all fine. I know how tough it is to be a conference organizer. Mistakes happen. If this had happened at a small indie conference, I would&amp;rsquo;ve been less upset (but probably still not come back). However, because this came from a professional organization who have been doing this for years, just the bumping made me feel really sad. The fact that they did not tell me up front that it was because of a sponsored talk and that I had to figure it out myself made me feel very disrespected.&lt;/p&gt;

&lt;h3 id=&#34;update-https-github-com-chriseidhof-chris-eidhof-nl-commit-87a4feff9a30c510b7e5714f60a8d78504b0b9f8&#34;&gt;&lt;a href=&#34;https://github.com/chriseidhof/chris.eidhof.nl/commit/87a4feff9a30c510b7e5714f60a8d78504b0b9f8&#34;&gt;Update&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Dave from CocoaConf send me an email asking to clarify some misinformation:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As I told you when you asked, we had promised [him] spots in Boston and Atlanta long before you contacted us, but we had forgotten to add him to the site.  The same thing happened with another speaker.  Also, [his company] was not even signed up as a sponsor at the time that we agreed to have him speak.  His speaking slots are not tied, in any way, to [their] sponsorship and never have been.  In fact, we do not have any sponsored speakers, other than lunch time, optional demos.  You can see our sponsorship prospectus online.  There are no speaking slots included with any sponsorship level.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I edited it to remove the name of the sponsor because it doesn&amp;rsquo;t matter.  Also, Dave mentions that they are part-time family business, and barely covering costs.  It could very well be that my interpretation of the events was wrong.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lenses in Swift</title>
          <link>http://chris.eidhof.nl/post/lenses-in-swift/</link>
          <pubDate>Tue, 11 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/lenses-in-swift/</guid>
          <description>&lt;p&gt;This is another FP-inspired blogpost, this time about lenses. There&amp;rsquo;s &lt;a href=&#34;http://www.cis.upenn.edu/~bcpierce/papers/index.shtml#Lenses&#34;&gt;a lot of
literature&lt;/a&gt;
around lenses, but I wanted to show some simple examples.&lt;/p&gt;

&lt;p&gt;Sometimes, you have a set of data (this could be anything, from a struct to a Core Data database, or a webservice), and you want to create a view on that data. For example, suppose you have a value of type &lt;code&gt;Person&lt;/code&gt;, you might want to create a view that only has a specific person&amp;rsquo;s address. And from that address, you want to take the street name. Then, somewhere else in the code, you might want to update this street name, and finally, update the original &lt;code&gt;Person&lt;/code&gt;. To make it concrete, let&amp;rsquo;s define two datatypes &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Address&lt;/code&gt; (sorry about the trailing underscores):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Person {
    let name_ : String
    let address_ : Address
}

struct Address {
    let street_ : String
    let city_ : String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Getting a person&amp;rsquo;s street name is simple: given a &lt;code&gt;person&lt;/code&gt;, you can just write &lt;code&gt;person.address_.street_&lt;/code&gt;. However, updating a person with a new street name is a bit more complicated. Because we defined our &lt;code&gt;Person&lt;/code&gt; and &lt;code&gt;Address&lt;/code&gt; as immutable structs, there&amp;rsquo;s no simple way. With mutable code, we could have just changed the values.&lt;/p&gt;

&lt;p&gt;In Objective-C, we could have used key-value coding, and the keypath &lt;code&gt;&amp;quot;address_.street_&amp;quot;&lt;/code&gt; can be used both for getting the street out (using &lt;code&gt;valueForKey:&lt;/code&gt;), and for updating the street (using &lt;code&gt;setValue:forKey:&lt;/code&gt;). In Swift, this is generally not possible.&lt;/p&gt;

&lt;p&gt;This is where lenses come in. A lens is simply the combination of a getter (e.g. getting the address out of a person) and a setter (a function that, given a person and a changed address, creates a new person value with the updated address). In code, it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Lens&amp;lt;A,B&amp;gt; {
    let from : A -&amp;gt; B
    let to : (B, A) -&amp;gt; A
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, the lens for &lt;code&gt;address_&lt;/code&gt; consists of a function that takes the &lt;code&gt;address_&lt;/code&gt; out, and a function creating a new person with the original name (&lt;code&gt;$1&lt;/code&gt; is the original value), but the updated address:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let address : Lens&amp;lt;Person,Address&amp;gt; = Lens(from: { $0.address_ }, to: {
    Person(name_: $1.name_, address_: $0)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Likewise, we can write a lens for the address&amp;rsquo;s &lt;code&gt;street_&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let street : Lens&amp;lt;Address,String&amp;gt; = Lens(from: { $0.street_ }, to: {
    Address(street_: $0, city_: $1.city_)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we want to change an address&amp;rsquo;s street, we can use the following syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let newAddress = street.to(&amp;quot;My new street name&amp;quot;, existingAddress)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without lenses, the code would have looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let newAddress = Address(street_: &amp;quot;My new street name&amp;quot;, city_: existingAddress.city)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a way, it looks like we might not have gained much. But there is something really cool we can do: composing lenses! If you&amp;rsquo;ve been following our &lt;a href=&#34;http://www.objc.io/snippets/2.html&#34;&gt;functional snippets&lt;/a&gt;, you&amp;rsquo;ve already seen function composition. We can write a similar composition operator for lenses. When reading this, don&amp;rsquo;t focus on the implementation, but just look at the type: it takes a lens from A to B, and a lens from B to C, and composes them into a new lens from A to C.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func &amp;gt;&amp;gt;&amp;gt;&amp;lt;A,B,C&amp;gt;(l: Lens&amp;lt;A,B&amp;gt;, r: Lens&amp;lt;B,C&amp;gt;) -&amp;gt; Lens&amp;lt;A,C&amp;gt; {
    return Lens(from: { r.from(l.from($0)) }, to: { (c, a) in
        l.to(r.to(c,l.from(a)), a)
    })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can use this to compose the &lt;code&gt;address&lt;/code&gt; and &lt;code&gt;street&lt;/code&gt; lenses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let personStreet = address &amp;gt;&amp;gt;&amp;gt; street
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the getter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let robb = Person(name_: &amp;quot;Robb&amp;quot;, address_: Address(street_: &amp;quot;Alexanderplatz&amp;quot;, city_: &amp;quot;Berlin&amp;quot;))
let robbsStreet = personStreet.from(robb)
// Evaluates to &amp;quot;Alexanderplatz&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or the setter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let robb2 = personStreet.to(&amp;quot;Kottbusser Damm&amp;quot;, robb)
// Creates a new `Person` with an updated street
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in a way, this &lt;code&gt;address &amp;gt;&amp;gt;&amp;gt; street&lt;/code&gt; is similar to the keypath &lt;code&gt;&amp;quot;address_.street_&amp;quot;&lt;/code&gt;, except that it&amp;rsquo;s fully typed.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a lot more cool stuff that you can do with lenses, but that&amp;rsquo;s for a later post. One idea: this could be very useful when applied to the &lt;a href=&#34;http://www.objc.io/issue-13/mvvm.html&#34;&gt;ViewModel&lt;/a&gt; pattern. You could have an immutable model X, create a lens to a mutable ViewModel Y that you pass around, and then once you&amp;rsquo;re done, you can update the original model X with the new value in Y. In order to build that, you would need a bit more infrastructure around lenses (just function composition won&amp;rsquo;t be enough), but we can just look at &lt;a href=&#34;http://hackage.haskell.org/package/fclabels&#34;&gt;existing implementations&lt;/a&gt; and port that to Swift.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>A tiny networking library</title>
          <link>http://chris.eidhof.nl/post/tiny-networking-in-swift/</link>
          <pubDate>Fri, 07 Nov 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/tiny-networking-in-swift/</guid>
          <description>&lt;p&gt;For a new project we&amp;rsquo;ve been working on at Unsigned Integer, the company behind &lt;a href=&#34;http://www.decksetapp.com&#34;&gt;Deckset&lt;/a&gt;, we needed to wrap a webservice API. I had a look at both &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;Alamofire&lt;/a&gt; and &lt;a href=&#34;https://github.com/AshFurrow/Moya&#34;&gt;Moya&lt;/a&gt;. Alamofire is a full-featured networking library, and if I would need something with more features, I would almost certainly use it. Moya is also very nice, and is built on top of Alomofire, and provides some extra safety. However, neither of them provide a simple way to parse results, so I started to experiment a bit. The library&amp;rsquo;s source is &lt;a href=&#34;https://gist.github.com/chriseidhof/26bda788f13b3e8a279c&#34;&gt;available as a gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My design goal was to have a way of describing API endpoints in such a way that I don&amp;rsquo;t have to use any strings when calling them, and I wanted both the input data and output data converted automatically. After a couple of iterations, I ended up with a simple struct to describe a resource that returns a value of type &lt;code&gt;A&lt;/code&gt;. It contains an endpoint&amp;rsquo;s path, the HTTP method, an optional request body, and some headers specific to the request. The last parameter is the most interesting: it&amp;rsquo;s a way to parse the response: a function that produces an &lt;code&gt;A&lt;/code&gt; from the response data. Because this parsing might fail, the result is an optional.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Resource&amp;lt;A&amp;gt; {
    let path: String
    let method : Method
    let requestBody: NSData?
    let headers : [String:String]
    let parse: NSData -&amp;gt; A?
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As an example, we can construct a resource for the Github &lt;a href=&#34;https://developer.github.com/guides/getting-started/&#34;&gt;zen endpoint&lt;/a&gt;. It says the path is &amp;ldquo;zen&amp;rdquo;, it uses the &lt;code&gt;GET&lt;/code&gt; method, has no request body or headers, and simply parses the data as an UTF-8 encoded string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func parseString(data: NSData) -&amp;gt; String? {
    return NSString(data: data, encoding: NSUTF8StringEncoding)
}

func zen() -&amp;gt; Resource&amp;lt;String&amp;gt; {
    return Resource(path: &amp;quot;zen&amp;quot;, method: Method.GET, 
                    requestBody: nil, headers: [:], parseString)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fetch this resource, there&amp;rsquo;s another function called &lt;code&gt;apiRequest&lt;/code&gt;. As we will see later on, we will wrap this function for our purposes, but for now, we&amp;rsquo;ll call it directly. The implementation is not too important, in order to understand it we only need to look at the type signature. It takes a &lt;code&gt;modifyRequest&lt;/code&gt; function, which we&amp;rsquo;ll ignore, a base URL (e.g. &lt;code&gt;https://api.github.com&lt;/code&gt;), a resource (e.g. &lt;code&gt;zen()&lt;/code&gt;), and then it takes two callback functions: one for the failure case, which provides a reason and an optional response body, and one for the success case. The completion handler is only called when the request returns a status code of 200, and when the parse function returns a non-nil result.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func apiRequest&amp;lt;A&amp;gt;(modifyRequest: NSMutableURLRequest -&amp;gt; (), 
                   baseURL: NSURL,
                   resource: Resource&amp;lt;A&amp;gt;,
                   failure: (Reason, NSData?) -&amp;gt; (),
                   completion: A -&amp;gt; ())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can construct a call. At first, we don&amp;rsquo;t need to modify the request, so we just pass in a function that does nothing. For the failure handler, we define a function that logs the failure to the console.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func defaultFailureHandler(failureReason: Reason, data: NSData?) {
    let string = NSString(data: data!, encoding: NSUTF8StringEncoding)
    println(&amp;quot;Failure: \(failureReason) \(string)&amp;quot;)
}

let baseURL = NSURL(string: &amp;quot;https://api.github.com&amp;quot;)!

apiRequest({ _ in }, baseURL, zen(), defaultFailureHandler) { message in
    println(&amp;quot;Got a message: \(message)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we run this code, we&amp;rsquo;ll get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Got a message: Encourage flow.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This works perfectly. Now, let&amp;rsquo;s try our hand at something a bit more difficult: getting and parsing a JSON result. In this case, we set some headers (the content-type, and the authorization token). Then instead of passing in the &lt;code&gt;parseString&lt;/code&gt; function that we used earlier, we pass in the &lt;code&gt;decodeJSON&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func decodeJSON(data: NSData) -&amp;gt; JSONDictionary? {
    return NSJSONSerialization.JSONObjectWithData(data, options: 
              NSJSONReadingOptions.allZeros, error: nil) 
      as? [String:AnyObject]
}

func authenticatedUser() -&amp;gt; Resource&amp;lt;JSONDictionary&amp;gt; {
    let headers = [&amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;]
    return Resource(path: &amp;quot;user&amp;quot;, method: Method.GET, requestBody: nil, 
                    headers: headers, decodeJSON)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because we expect to have lots of times where we would like to encode and decode JSON for an API call, we can make a &lt;em&gt;smart constructor&lt;/em&gt;. This is a wrapper around the &lt;code&gt;Resource&lt;/code&gt; init function which will do the extra work of encoding JSON, decoding JSON and setting the right headers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public func jsonResource&amp;lt;A&amp;gt;(path: String, method: Method, requestParameters: JSONDictionary, parse: JSONDictionary -&amp;gt; A?) -&amp;gt; Resource&amp;lt;A&amp;gt; {
    let f = { decodeJSON($0) &amp;gt;&amp;gt;= parse }
    let jsonBody = encodeJSON(requestParameters)
    let headers = [&amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;]
    return Resource(path: path, method: method, requestBody: jsonBody, headers: headers, parse: f)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can rewrite our &lt;code&gt;authenticatedUser&lt;/code&gt; as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func authenticatedUser() -&amp;gt; Resource&amp;lt;JSONDictionary&amp;gt; {
    return jsonResource(path: &amp;quot;user&amp;quot;, method: Method.GET, 
                        requestParameters: [:]) { $0 }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, instead of a dictionary, we would really like to parse this into a &lt;code&gt;GithubProfile&lt;/code&gt; value:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct GithubProfile {
    let login: String
    let id: Int
    let avatarURL: NSURL
}

let makeGithubProfile = { GithubProfile(login: $0, id: $1, avatarURL: $2) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use the &lt;a href=&#34;http://chris.eidhof.nl/posts/json-parsing-in-swift.html&#34;&gt;JSON parsing&lt;/a&gt; technique to write a small parsing function and rewrite our &lt;code&gt;authenticatedUser&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func parseGithubProfile(dict: JSONDictionary) -&amp;gt; GithubProfile? {
    return curry(makeGithubProfile) &amp;lt;*&amp;gt; string(dict, &amp;quot;login&amp;quot;)
                                    &amp;lt;*&amp;gt; int(dict, &amp;quot;id&amp;quot;)
                                    &amp;lt;*&amp;gt; url(dict, &amp;quot;avatar_url&amp;quot;)
}

func authenticatedUser() -&amp;gt; Resource&amp;lt;GithubProfile&amp;gt; {
    return jsonResource(&amp;quot;user&amp;quot;, .GET, [:], parseGithubProfile)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For me, this is the power of functional programming. We wrote one &lt;code&gt;apiRequest&lt;/code&gt; function and one &lt;code&gt;Resource&lt;/code&gt; datatype, and never changed it again. We can provide this in a library. We then created a couple of small functions for encoding and decoding JSON, and wrapped the existing functions to create our own convenience functions. The &lt;code&gt;authenticatedUser&lt;/code&gt; is now very tiny.&lt;/p&gt;

&lt;p&gt;As a final step, we&amp;rsquo;ll wrap the &lt;code&gt;apiRequest&lt;/code&gt; function in a new function that&amp;rsquo;s tied to the Github API. It sets the authorization token, and provides the base URL. The completion handler is called only in case of success:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func request&amp;lt;A&amp;gt;(resource: Resource&amp;lt;A&amp;gt;, completionHandler: A -&amp;gt; ()) {
    func setAuthToken(request: NSMutableURLRequest) {
        request.setValue(&amp;quot;token \(authorizationToken)&amp;quot;, forHTTPHeaderField: &amp;quot;Authorization&amp;quot;)
    }
    let baseURL = NSURL(string: &amp;quot;https://api.github.com&amp;quot;)!
    apiRequest(setAuthToken, baseURL, resource, defaultFailureHandler, completionHandler)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can test our API with the following simple statement:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;request(authenticatedUser()) { user in
    println(&amp;quot;User&#39;s avatar URL: \(user.avatarURL)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think designing a library like this has a lot of benefits. We provided some base functionality, and then by composing and wrapping functions into new functions we quickly made it very specific to our app without having to put in much effort. There are no complicated configuration steps, just simple function composition.&lt;/p&gt;

&lt;p&gt;If you want to learn more about how to design APIs in a functional way, do consider reading our book on &lt;a href=&#34;http://www.objc.io/books/&#34;&gt;Functional Programming in Swift&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Race Report: Munich Marathon</title>
          <link>http://chris.eidhof.nl/post/race-report-munich-marathon/</link>
          <pubDate>Mon, 13 Oct 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/race-report-munich-marathon/</guid>
          <description>&lt;p&gt;Today, I want to write about non-code: yesterday I ran my first real marathon. Although I did run the distance before, never in a road race. Another runner I met once said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the best things you can do for your body, is train for a marathon. One of the worst things you can do is to actually run it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I couldn&amp;rsquo;t agree more. I&amp;rsquo;ve been feeling really good after all the training, however, today, the day after the marathon, my body is not so happy.&lt;/p&gt;

&lt;p&gt;Even after running a lot over the last years, the sheer idea of running a marathon at full speed is bit daunting. Nevertheless, my friend and me decided to do it, and had about half a year to specifically prepare for this marathon. We did track work, lots of long runs in the cold and the heat, I spent a week running up mountains in Boulder, and finally prepared with some races (half-marathons and a 25K). The races went really well, I ran the half marathon in 1:26 the day after I got back from the States, and I was very confident that I could run the entire marathon in 3 hours.&lt;/p&gt;

&lt;p&gt;The first bit went good, we started too slow (it&amp;rsquo;s always very crowded at the beginning of the race). But we really nailed the pace, very steady and almost exactly as we planned (4:15/km). It didn&amp;rsquo;t feel as easy as expected, and at km 15 my friend said he either had to slow down or drop out in a bit. I was feeling exactly the same way, but we decided to keep on going until the half marathon point, arriving there at 1:30. A bit before that, I couldn&amp;rsquo;t push anymore and had to let him go ahead of me. Surprisingly, at km 23 he was standing at the side, and joined me, telling me he was about to drop out. I wanted to do the same thing, and said: let&amp;rsquo;s run to 25k, and stop there.&lt;/p&gt;

&lt;p&gt;At 25k, we started walking on the sidewalk, feeling horrible. My legs were hurting, and I was tired, but not exhausted. We were about to go look for a train stop, but I decided to give it one more try. I didn&amp;rsquo;t come all the way to Munich to quit at 25k. Even though there was no chance anymore of running a 3-hour marathon, at least I could run a bit more. Maybe until the 30k point. Because I had already given up and quit, anything that I&amp;rsquo;d do now would feel like winning. I managed to run to the 30k point, my pace dropping quite a bit. At every aid station I walked with my drink, instead of running, and at 35k I picked up another friend who was walking. If you want to know what dropping the pace looks like, check out &lt;a href=&#34;http://www.strava.com/activities/206659319&#34;&gt;strava&lt;/a&gt;. A fast race is very evenly paced: this wasn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;We managed to run 2k more, I had to walk, and that&amp;rsquo;s basically what happened for the final five kilometers: running, interspersed with bits of walking. The final 400m was a &amp;ldquo;victory lap&amp;rdquo; through the Olympic Stadium, which I couldn&amp;rsquo;t enjoy it at all because of pure exhaustion. I finished seconds under 3:28, got the medal, drank lots of alcohol-free beer and ate, and was actually quite happy. Even though I did not even come close to what I came here for, I did manage to come back from giving up, adjusted my goals, and really overcame myself by finishing the thing. I&amp;rsquo;m not sure what went wrong, but one day in the next 10 years, I&amp;rsquo;ll run it in under 3 hours. However, first it&amp;rsquo;s time for some new challenges.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Tuples, Structs and Enums</title>
          <link>http://chris.eidhof.nl/post/tuples-structs-enums/</link>
          <pubDate>Fri, 29 Aug 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/tuples-structs-enums/</guid>
          <description>

&lt;p&gt;Swift has lots of different ways of storing your data. You can use enums, tuples, structs, classes (or even just use malloc and manage it yourself)! In this article, we&amp;rsquo;ll compare enums, tuples and structs. Let&amp;rsquo;s start with the simplest: tuples.&lt;/p&gt;

&lt;p&gt;A tuple is a typed list of values. For example, you can define a tuple that holds an integer and a string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let amount = (100, &amp;quot;EUR&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very useful when you want to return multiple values from a function. To get the values out, you can use &lt;code&gt;.0&lt;/code&gt;, &lt;code&gt;.1&lt;/code&gt; (and so on), or pattern matching. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let currency = money.1 // &amp;quot;USD&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to, you can also name the individual elements, to have a bit more documentation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let money = (amount: 100, currency: &amp;quot;USD&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you can still use &lt;code&gt;.1&lt;/code&gt;, but alternatively, you can also use &lt;code&gt;.currency&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let currency = money.currency // &amp;quot;USD&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to write a formatter for currencies, we can now do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func format(input: (Int,String)) -&amp;gt; String {
    return &amp;quot;I have \(input.0) \(input.1) in my wallet&amp;quot;
}

println(format(money)) // This prints &amp;quot;I have 100 USD in my wallet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our format function works on any &lt;code&gt;(Int,String)&lt;/code&gt; tuple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let mass = (1, &amp;quot;kg&amp;quot;)

let formatted = format(mass) // &amp;quot;I have 1 kg in my wallet&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Clearly, having 1 kg in your wallet doesn&amp;rsquo;t make sense. Therefore, let&amp;rsquo;s introduce a struct. A struct can hold exactly the same kind of a data as a tuple. In addition, you can also define functions on the struct itself (whereas with tuples, you can only define top-level functions). Let&amp;rsquo;s consider the following struct:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Money {
    let amount: Int
    let currency: String
}

let wallet = Money(amount: 100, currency: &amp;quot;USD&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can hold exactly the same kind of data as a tuple, but now we can also define a function on it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Money {
  func format() -&amp;gt; String {
    return &amp;quot;I have \(self.amount) \(self.currency) in my wallet&amp;quot;
  }
}

println(wallet.format())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to make a distinctive type for mass, we can now do that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Mass {
    let quantity: Int
    let unit: String

    func format() -&amp;gt; String {
        return &amp;quot;I have \(self.quantity) \(self.unit) in my backpack.&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not only do we now have functions on our &lt;code&gt;Money&lt;/code&gt; type, we also have given it an explicit name. In other parts of our code, we can be certain that we don&amp;rsquo;t accidentally pass in a mass pair (like &lt;code&gt;(1, &amp;quot;kg&amp;quot;)&lt;/code&gt;). A struct is also called a &lt;a href=&#34;http://en.wikipedia.org/wiki/Nominal_type_system&#34;&gt;nominal type&lt;/a&gt;: it gives an explicit name to a type, and values only have the same type if they share that name. In the example above, &lt;code&gt;mass&lt;/code&gt; and the first definition of &lt;code&gt;wallet&lt;/code&gt; have the same type, but values of type &lt;code&gt;Money&lt;/code&gt; and &lt;code&gt;Mass&lt;/code&gt; have different types. If we call &lt;code&gt;format&lt;/code&gt; on them, we get different results.&lt;/p&gt;

&lt;h3 id=&#34;enums&#34;&gt;Enums&lt;/h3&gt;

&lt;p&gt;If we want to store some values together, we now know that we can use a tuple or a struct, depending on the use-case. We can also use classes, but that&amp;rsquo;s beyond the scope of this article. However, sometimes we want to represent a choice between some values. For example, let&amp;rsquo;s consider currencies. In the previous example, we&amp;rsquo;ve used &lt;code&gt;String&lt;/code&gt; to use the currency, but what if we want to restrict our program to only currencies we know about? This is where we can use an enum. For example, if we want to restrict our program to only euros, US dollars and yen, we can write the following enum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Currency {
   case EUR
   case USD
   case YEN
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we have a value of type &lt;code&gt;Currency&lt;/code&gt;, we know that it will be either &lt;code&gt;EUR&lt;/code&gt;, &lt;code&gt;USD&lt;/code&gt; or &lt;code&gt;YEN&lt;/code&gt;. There is no way it can be of any other value, or multiple of these values at the same time. Just like with structs, you can also define functions on enums:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Currency {
    func symbol() -&amp;gt; String {
        switch self {
            case .EUR: return &amp;quot;?&amp;quot;
            case .USD: return &amp;quot;$&amp;quot;
            case .YEN: return &amp;quot;?&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add as many cases as we want. However, we could also have an enum with a single case:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Angle {
   case Radian(radians: Double)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is equivalent to having a struct: we can add functions, and it is impossible to accidentally confuse &lt;code&gt;Angle&lt;/code&gt; values with other &lt;code&gt;Double&lt;/code&gt; values. However, if we decide that we want to add more cases in the future, we can do this.&lt;/p&gt;

&lt;h3 id=&#34;what-should-i-use&#34;&gt;What should I use?&lt;/h3&gt;

&lt;p&gt;Now we have a good overview of how to choose between tuples, structs and enums. Start with a tuple and see if it does the job. If two values with the same type structure are the same (e.g. String and Int pairs), excellent. If you want more type-safety and a nominal type, use structs. For example, if you want to disambiguate between currency and mass. Finally, if you need multiple mutually exclusive cases (for example, either EUR or USD or YEN), use enums.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Some ideas for projects in Swift</title>
          <link>http://chris.eidhof.nl/post/swift-ideas/</link>
          <pubDate>Wed, 27 Aug 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/swift-ideas/</guid>
          <description>&lt;p&gt;If you are looking for some programming projects to port to Swift, my list is way bigger than I can tackle. Most ideas here are ports of libraries from other languages, some are different. I would love to build all of these, but can&amp;rsquo;t possibly do even ten percent of this list. The list is in random order.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &lt;strong&gt;SVG Parser&lt;/strong&gt; that can parse SVG, turn it into an abstract syntax tree, and has support to render it.&lt;/li&gt;
&lt;li&gt;A full version of &lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck-2.4.2&#34;&gt;QuickCheck&lt;/a&gt;. I created a very rough &lt;a href=&#34;http://chris.eidhof.nl/posts/quickcheck-in-swift.html&#34;&gt;example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A full wrapper of Core Image, see &lt;a href=&#34;http://www.objc.io/books/&#34;&gt;our book&lt;/a&gt; or &lt;a href=&#34;https://speakerdeck.com/chriseidhof/functional-swift-1&#34;&gt;my presentation&lt;/a&gt; for the basic idea.&lt;/li&gt;
&lt;li&gt;A routing library that takes enums and builds URLs, like described &lt;a href=&#34;http://chris.eidhof.nl/posts/typesafe-url-routes-in-swift.html&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/AshFurrow/Moya&#34;&gt;here&lt;/a&gt;, but independent of any networking framework.&lt;/li&gt;
&lt;li&gt;Some functional wrappers around UIControls. Not sure how this would work, maybe something like &lt;a href=&#34;http://conal.net/papers/Eros/&#34;&gt;tangible values&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;A drawing library like &lt;a href=&#34;http://projects.haskell.org/diagrams/&#34;&gt;diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A variant of &lt;a href=&#34;http://www.haskell.org/hoogle/&#34;&gt;Hoogle&lt;/a&gt; for Swift. This would allow you to find Swift functions by their type, not by name. Should work together with the standard libraries, and eventually also with CocoaPods.&lt;/li&gt;
&lt;li&gt;A web framework (like Rails or like Sinatra). Some people have already been experimenting in this direction.&lt;/li&gt;
&lt;li&gt;A simple implementation of &lt;a href=&#34;http://mustache.github.io&#34;&gt;Mustache&lt;/a&gt;. The &lt;a href=&#34;https://github.com/janl/mustache.js/blob/master/mustache.js&#34;&gt;Javascript version&lt;/a&gt; is short (under 600 lines).&lt;/li&gt;
&lt;li&gt;A wrapper around GCD. For example, it&amp;rsquo;s possible to write a &lt;code&gt;parallel&lt;/code&gt; function that executes a bunch of functions in parallel: &lt;a href=&#34;https://gist.github.com/chriseidhof/c62e45554c2394bb6871&#34;&gt;gcd.swift&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A port of &lt;a href=&#34;http://www.haskell.org/haskellwiki/Software_transactional_memory&#34;&gt;Software Transactional Memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A parser/pretty-printer combinator library, maybe like &lt;a href=&#34;http://hackage.haskell.org/package/boomerang&#34;&gt;Boomerang&lt;/a&gt;. It would generate both a parser and a pretty-printer from a single grammar.&lt;/li&gt;
&lt;li&gt;A library for binary serialisation (like &lt;a href=&#34;http://hackage.haskell.org/package/cereal&#34;&gt;cereal&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A library for generating or processing XML (maybe built on top of NSXMLParser?)&lt;/li&gt;
&lt;li&gt;A library for dealing with HTML (like &lt;a href=&#34;http://hackage.haskell.org/package/tagsoup&#34;&gt;tagsoup&lt;/a&gt; or &lt;a href=&#34;http://nokogiri.org&#34;&gt;nokogiri&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;A library for generating PDFs in a combinatoric way (like &lt;a href=&#34;https://github.com/prawnpdf/prawn&#34;&gt;Prawn&lt;/a&gt;, but built on top of Cocoa goodness)&lt;/li&gt;
&lt;li&gt;A native Markdown parsing library (or really good wrapper around &lt;a href=&#34;https://github.com/vmg/sundown&#34;&gt;sundown&lt;/a&gt; or another C library)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br/&gt; If you are starting one of these and would like feedback, ping me!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Type-safe URL routes in Swift</title>
          <link>http://chris.eidhof.nl/post/typesafe-url-routes-in-swift/</link>
          <pubDate>Mon, 18 Aug 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/typesafe-url-routes-in-swift/</guid>
          <description>&lt;p&gt;While Ash Furrow is working on his &lt;a href=&#34;https://github.com/AshFurrow/Moya&#34;&gt;Moya&lt;/a&gt; project, I got inspired by his approach, and decided to write a little bit of code to demonstrate a technique I used in Haskell a few years ago.&lt;/p&gt;

&lt;p&gt;It uses Swift enums to describe API endpoints. Instead of describing endpoints this with strings, you can use Swift&amp;rsquo;s enums to make it type-safe and well-documented. Let&amp;rsquo;s build an example that wraps a very small part of the &lt;a href=&#34;https://developer.github.com/v3/&#34;&gt;GitHub API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s an API endpoint &amp;ldquo;zen&amp;rdquo;, which works like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl &#39;https://api.github.com/zen&#39;
Favor focus over features.~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a different API endpoint &amp;ldquo;/users/name&amp;rdquo;, which works like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl &#39;https://api.github.com/users/chriseidhof&#39;
{
  &amp;quot;login&amp;quot;: &amp;quot;chriseidhof&amp;quot;,
  &amp;quot;id&amp;quot;: 5382,
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, what we can do is define an enum with a case for all endpoints. Note that the &amp;ldquo;zen&amp;rdquo; endpoint doesn&amp;rsquo;t take any parameters, where as the &amp;ldquo;users&amp;rdquo; endpoint takes a string parameter (the user name):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enum Github {
    case Zen
    case UserProfile(String)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then define a protocol &lt;code&gt;Path&lt;/code&gt; that, for a given type, describes how to turn this into a &lt;code&gt;String&lt;/code&gt; value.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol Path {
    var path : String { get }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can make our Github enum conform to the Path protocol. Because this is just a proof of concept, we don&amp;rsquo;t escape the user&amp;rsquo;s name (which should definitely be done in production code).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Github : Path {
    var path: String {
        switch self {
        case .Zen: return &amp;quot;/zen&amp;quot;
        case .UserProfile(let name): return &amp;quot;/users/\(name)&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having done this work, we can create a route, and get the path out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let sample = Github.UserProfile(&amp;quot;ashfurrow&amp;quot;)
println(sample.path) 
// Prints &amp;quot;/users/ashfurrow&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Ash&amp;rsquo;s library, generates full URLs, and also has sample data included for each endpoint (which makes it really convenient when doing TDD). We can create a protocol that helps us with both:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol Moya : Path {
    var baseURL: NSURL { get }
    var sampleData: String { get } // Probably JSON would be better than String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above protocol says that there has to be a base URL of type NSURL, and that for each value of &lt;code&gt;Moya&lt;/code&gt; there should be sample data available in string form (this string would probably contain JSON data).&lt;/p&gt;

&lt;p&gt;Implementing this for the Github API is simple. For the sample data, we use a switch and depending on the case, we return different sample data. We can even use the user&amp;rsquo;s name in the sample data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Github : Moya {
    var baseURL: NSURL { return NSURL(string: &amp;quot;https://api.github.com&amp;quot;) }
    var sampleData: String {
        switch self {
        case .Zen: return &amp;quot;Half measures are as bad as nothing at all.&amp;quot;
        case .UserProfile(let name): return &amp;quot;{login: \&amp;quot;\(name)\&amp;quot;, id: 100}&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have all the pieces to write a function &lt;code&gt;url&lt;/code&gt; that, given an object conforming to the &lt;code&gt;Moya&lt;/code&gt; protocol, will return us a URL. Note that this doesn&amp;rsquo;t depend on the Github enum at all, it&amp;rsquo;ll work on any type that conforms to the &lt;code&gt;Moya&lt;/code&gt; protocol:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func url(route: Moya) -&amp;gt; NSURL {
    return route.baseURL.URLByAppendingPathComponent(route.path)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;println(url(sample)) 
// prints https://api.github.com/users/ashfurrow
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I think it&amp;rsquo;s a really nice way of building APIs. The Github enum makes it very clear which endpoints are available, and the form of their parameters. By defining these things once, we can make it much harder for users of this API to make mistakes. For example, it&amp;rsquo;s not possible to pass in a &lt;code&gt;nil&lt;/code&gt; username, because the &lt;code&gt;UserProfile&lt;/code&gt; takes a non-optional string. If we wanted to add optional parameters, we have to be explicit about that.&lt;/p&gt;

&lt;p&gt;The other nice thing is that all of the above code is independent of any networking library. It&amp;rsquo;s so simple that it could be used with any library, be it &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;AlamoFire&lt;/a&gt;, &lt;a href=&#34;http://allseeing-i.com/ASIHTTPRequest/&#34;&gt;ASIHTTPRequest&lt;/a&gt; (remember that?) or just plain &lt;code&gt;NSURLSession&lt;/code&gt;. Enjoy!&lt;/p&gt;

&lt;p&gt;The full code is available as a gist &lt;a href=&#34;https://gist.github.com/chriseidhof/1fc977ffb856dbcdc113&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>The Blub Paradox in Swift</title>
          <link>http://chris.eidhof.nl/post/blub-paradox-in-swift/</link>
          <pubDate>Sun, 17 Aug 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/blub-paradox-in-swift/</guid>
          <description>&lt;p&gt;In his article &lt;a href=&#34;http://www.paulgraham.com/avg.html&#34;&gt;Beating the Averages&lt;/a&gt;, Paul Graham writes about the Blub paradox. I think this is excellent reading for every programmer, the article is full of interesting advice.&lt;/p&gt;

&lt;p&gt;The Blub paradox is about a hypothetical language Blub, but in this article, we&amp;rsquo;ll talk about Objective-C. Objective-C is a major improvement over C in terms of productivity. I wouldn&amp;rsquo;t know how I would get anything done in C, coming from Objective-C. In C, there&amp;rsquo;s no ARC, no KVO and you have to write a lot of boilerplate. Knowing Objective-C, and looking at a language that is more low-level, it&amp;rsquo;s hard to see why you write anything except low-level code in it.&lt;/p&gt;

&lt;p&gt;However, if you are used to Objective-C, and have never programmed in a language that allows for functional programming (such as Lisp, Haskell or Swift), it&amp;rsquo;s hard to see why you would need that. Objective-C is a perfect language to express your thoughts, and most experienced iOS/Mac developers I know can translate their ideas straight into code.&lt;/p&gt;

&lt;p&gt;Before I started Objective-C, I was writing a lot of my code in Haskell. Haskell has features like generics, pattern matching, easy recursion and first-class functions. Moving to Objective-C was very painful for me: how did people get anything done? Back then, we had to write retain/release statements, modify code in three places to define a property, and there was no easy way to define closures. Another thing I was really missing is a powerful type system that helps you think about state, input and mutability.&lt;/p&gt;

&lt;p&gt;I started writing Objective-C full time, and after a while, I didn&amp;rsquo;t miss most of those features anymore. It&amp;rsquo;s perfectly possible to write beautiful code without it. I embraced the limitations and after about two years, I actually started liking Objective-C. Combined with the powerful frameworks, the iOS platform allowed me to create beautiful applications, and I focused more on the resulting product than on the programming language.&lt;/p&gt;

&lt;p&gt;Now, with the introduction of Swift, I see a lot of confusion: if you&amp;rsquo;ve never used it, a type system with generics might look like overkill. Custom operators are mostly really confusing when you&amp;rsquo;re not accustomed to working with them. Pattern matching looks unnecessary. Optionals are hard to wrap your head around. Functional code looks completely incomprehensible, it&amp;rsquo;s much easier to read and write Objective-C.&lt;/p&gt;

&lt;p&gt;All of these &amp;ldquo;confusing&amp;rdquo; features can help you write much more readable code. If you&amp;rsquo;re not used to them, you might not see that until you thoroughly understand them. If you think Objective-C is a readable language, I couldn&amp;rsquo;t agree more. However, show it to somebody who spent their entire career only writing Python, and they might be very confused by all the square brackets, retain cycles, or block syntax. The same holds for the new possibilities of Swift: if you are not used to them, it might look like nonsense. But the people who wrote Swift know what they are doing, and the new features aren&amp;rsquo;t there to show off how smart they are: it&amp;rsquo;s to help us write better, faster and safer code.&lt;/p&gt;

&lt;p&gt;If you are confused by Swift&amp;rsquo;s new features, it&amp;rsquo;s easy to turn that confusion into anger or frustration. I&amp;rsquo;ve seen this quite a bit, recently. However, instead, you could also try to turn it into curiosity. I think there&amp;rsquo;s a lot to like about Swift, and I&amp;rsquo;d encourage you to dive deeper into the language and new concepts, and maybe you will like it too.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Parsing JSON in Swift</title>
          <link>http://chris.eidhof.nl/post/json-parsing-in-swift/</link>
          <pubDate>Mon, 28 Jul 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/json-parsing-in-swift/</guid>
          <description>&lt;p&gt;headline: Safe and easy&lt;/p&gt;

&lt;p&gt;After reading &lt;a href=&#34;http://inessential.com/2014/06/17/c_in_sheeps_clothing&#34;&gt;Brent&lt;/a&gt;&amp;rsquo;s and &lt;a href=&#34;https://medium.com/swift-programming/b6f4f232e35e&#34;&gt;David&lt;/a&gt;&amp;rsquo;s posts on parsing JSON in Swift, I really wanted to write this post. However, we&amp;rsquo;ve been very busy with writing a book on &lt;a href=&#34;http://www.objc.io/books/&#34;&gt;Functional Programming in Swift&lt;/a&gt;, and I wanted to finish some other things first, so it took a while to come up with it. The full code accompanying this post is on &lt;a href=&#34;https://gist.github.com/chriseidhof/4c071de50461a802874e&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this posts I will give an outline of a parsing library for dealing with JSON in Swift in a type-safe way. I bluntly copied the example JSON from David, and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var json : [String: AnyObject] = [
  &amp;quot;stat&amp;quot;: &amp;quot;ok&amp;quot;,
  &amp;quot;blogs&amp;quot;: [
    &amp;quot;blog&amp;quot;: [
      [
        &amp;quot;id&amp;quot; : 73,
        &amp;quot;name&amp;quot; : &amp;quot;Bloxus test&amp;quot;,
        &amp;quot;needspassword&amp;quot; : true,
        &amp;quot;url&amp;quot; : &amp;quot;http://remote.bloxus.com/&amp;quot;
      ],
      [
        &amp;quot;id&amp;quot; : 74,
        &amp;quot;name&amp;quot; : &amp;quot;Manila Test&amp;quot;,
        &amp;quot;needspassword&amp;quot; : false,
        &amp;quot;url&amp;quot; : &amp;quot;http://flickrtest1.userland.com/&amp;quot;
      ]
    ]
  ]
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, the challenge is to convert this into an array of Swift structs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Blog {
    let id: Int
    let name: String
    let needsPassword : Bool
    let url: NSURL
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ll first show the finished parsing functions, which contains two operators: &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;. They might look very foreign, but parsing the entire JSON structure is as simple as this. The rest of the article only describes library code. The parsing below works in such a way, that if the JSON is invalid (e.g. the name is missing, or id is not an integer) the entire result will be nil. There&amp;rsquo;s no need for reflection or KVO, we just have a couple of simple functions and some smart ways to combine them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func parseBlog(blog: AnyObject) -&amp;gt; Blog? {
    return asDict(blog) &amp;gt;&amp;gt;= {
        mkBlog &amp;lt;*&amp;gt; int($0,&amp;quot;id&amp;quot;)
               &amp;lt;*&amp;gt; string($0,&amp;quot;name&amp;quot;)
               &amp;lt;*&amp;gt; bool($0,&amp;quot;needspassword&amp;quot;)
               &amp;lt;*&amp;gt; (string($0, &amp;quot;url&amp;quot;) &amp;gt;&amp;gt;= toURL)
    }
}

let parsed : [Blog]? = dictionary(json, &amp;quot;blogs&amp;quot;) &amp;gt;&amp;gt;= {
    array($0, &amp;quot;blog&amp;quot;) &amp;gt;&amp;gt;= {
        join($0.map(parseBlog))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, what does the above code do? Let&amp;rsquo;s go over the most important functions. First, let&amp;rsquo;s have a look at the &lt;code&gt;dictionary&lt;/code&gt; function. It&amp;rsquo;s a function that, given a dictionary from &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;AnyObject&lt;/code&gt;, tries to find a dictionary with the specified key:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func dictionary(input: [String: AnyObject], key: String) -&amp;gt;  [String: AnyObject]? {
    return input[key] &amp;gt;&amp;gt;= { $0 as? [String:AnyObject] }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, in the example JSON we expect the key &amp;ldquo;blogs&amp;rdquo; to contain a dictionary. If the dictionary exists, the above function returns it, otherwise it returns &lt;code&gt;nil&lt;/code&gt;. We can write similar functions for arrays, strings, and integers (here are just their signatures, the full code is on GitHub):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func array(input: [String:AnyObject], key: String) -&amp;gt;  [AnyObject]?
func string(input: [String:AnyObject], key: String) -&amp;gt; String?
func int(input: [NSObject:AnyObject], key: String) -&amp;gt; Int?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s have a look at the outermost structure of our JSON. It is a dictionary, with a key &amp;ldquo;blogs&amp;rdquo;, which contains an array, under the key &amp;ldquo;blog&amp;rdquo;. To parse that, we could have written the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if let blogsDict = dictionary(parsedJSON, &amp;quot;blogs&amp;quot;) {
    if let blogsArray = array(blogsDict, &amp;quot;blog&amp;quot;) {
         // Do something with the blogs array
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Instead, we can define the &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator, which takes an optional value, and applies a function only if the optional is not nil. It makes use of the &lt;code&gt;flatten&lt;/code&gt; function, which flattens a nested optional into a single one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;operator infix &amp;gt;&amp;gt;= {}
@infix func &amp;gt;&amp;gt;= &amp;lt;U,T&amp;gt;(optional : T?, f : T -&amp;gt; U?) -&amp;gt; U? {
    return flatten(optional.map(f))
}

func flatten&amp;lt;A&amp;gt;(x: A??) -&amp;gt; A? {
    if let y = x { return y }
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other operator that&amp;rsquo;s in heavy use is the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; operator. For the parsing of a single blog, we had the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkBlog &amp;lt;*&amp;gt; int(dict,&amp;quot;id&amp;quot;)
       &amp;lt;*&amp;gt; string(dict,&amp;quot;name&amp;quot;)
       &amp;lt;*&amp;gt; bool(dict,&amp;quot;needspassword&amp;quot;)
       &amp;lt;*&amp;gt; (string(dict, &amp;quot;url&amp;quot;) &amp;gt;&amp;gt;= toURL)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can read this as a functional call that only gets executed when all optional values are non-nil:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkBlog(int(dict,&amp;quot;id&amp;quot;), string(dict,&amp;quot;name&amp;quot;), bool(dict,&amp;quot;needspassword&amp;quot;), (string(dict, &amp;quot;url&amp;quot;) &amp;gt;&amp;gt;= toURL))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s look at the definition of the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; operator. It combines two optional values: as the left operand, it takes a function, and the right operand a parameter to that function. It checks if both operands are non-nil, and then just applies the function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;operator infix &amp;lt;*&amp;gt; { associativity left precedence 150 }
func &amp;lt;*&amp;gt;&amp;lt;A, B&amp;gt;(f: (A -&amp;gt; B)?, x: A?) -&amp;gt; B? {
    if let f1 = f {
        if let x1 = x {
            return f1(x1)
        }
    }
    return nil
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you might wonder what &lt;code&gt;mkBlog&lt;/code&gt; does. It is a &lt;a href=&#34;http://en.wikipedia.org/wiki/Currying&#34;&gt;curried&lt;/a&gt; function that wraps our initializer. First, we create a function with type &lt;code&gt;(Int,String,Bool,NSURL) -&amp;gt; Blog&lt;/code&gt;. Then, the &lt;code&gt;curry&lt;/code&gt; function turns that into &lt;code&gt;Int -&amp;gt; String -&amp;gt; Bool -&amp;gt; NSURL -&amp;gt; Blog&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let mkBlog = curry {id, name, needsPassword, url in 
   Blog(id: id, name: name, needsPassword: needsPassword, url: url) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is needed so that we can use &lt;code&gt;mkBlog&lt;/code&gt; together with the &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; operator. If we look at the first line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// mkBlog : Int -&amp;gt; String -&amp;gt; Bool -&amp;gt; NSURL -&amp;gt; Blog
// int(dict,&amp;quot;id&amp;quot;) : Int?
let step1 = mkBlog &amp;lt;*&amp;gt; int(dict,&amp;quot;id&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that combining them with &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; gives us a new function of type &lt;code&gt;(String -&amp;gt; Bool -&amp;gt; NSURL -&amp;gt; Blog)?&lt;/code&gt;. And if we combine that with a string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let step2 = step1 &amp;lt;*&amp;gt; string(dict,&amp;quot;name&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We get a function of type &lt;code&gt;(Bool -&amp;gt; NSURL -&amp;gt; Blog)?&lt;/code&gt;. And if we continue doing this, we end up with an optional &lt;code&gt;Blog?&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;I hope you can now understand how all the pieces fit together. By creating a few helper functions and operators, we can make strongly-typed JSON parsing really easy. Instead of optional, we could have also used a different type that would include errors, but that&amp;rsquo;s a topic for a different blog post.&lt;/p&gt;

&lt;p&gt;In our book, we&amp;rsquo;ll be writing in much more detail about these kinds of things (and other really cool stuff). If you&amp;rsquo;re interested, you can already get early access today: &lt;a href=&#34;http://www.objc.io/books/&#34;&gt;Functional Programming in Swift&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Functional Programming in Swift</title>
          <link>http://chris.eidhof.nl/post/functional-programming-in-swift/</link>
          <pubDate>Mon, 14 Jul 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/functional-programming-in-swift/</guid>
          <description>&lt;p&gt;A few weeks ago, after Apple announced their new programming language Swift, it
became very clear to me that we had to write a book on &lt;a href=&#34;http://www.objc.io/books/&#34;&gt;Functional Programming
in Swift&lt;/a&gt;. Once the idea was there, I just couldn&amp;rsquo;t stop
thinking about it anymore. After getting &lt;a href=&#34;http://www.staff.science.uu.nl/~swier004/&#34;&gt;Wouter&lt;/a&gt; and &lt;a href=&#34;http://floriankugler.com&#34;&gt;Florian&lt;/a&gt; on board, I knew we had a killer team for writing this book.&lt;/p&gt;

&lt;p&gt;We decided to do give people early access, so they can read along and comment
as we proceed with the writing. So far, the response has been really great, and I&amp;rsquo;m really happy that we chose to do this. It works like this: after people buy the early access version, we immediately grant them access to a GitHub repository where they can read and comment on the chapters we&amp;rsquo;ve written so far.&lt;/p&gt;

&lt;p&gt;One of the things I only realized after we started: if we do this right, we
might write a book that is still relevant in 5 or 10 years. The book is not
about any specific frameworks, it&amp;rsquo;s about doing functional programming.
Frameworks might change a lot, the principles of functional programming have been the same for a really long time.
Because we write our chapters using &lt;a href=&#34;https://github.com/chriseidhof/literate-swift&#34;&gt;literate
programming&lt;/a&gt; it&amp;rsquo;s very easy for
us to update them later on as the language evolves.&lt;/p&gt;

&lt;p&gt;After we brainstormed a lot of ideas (way more than we could possibly fit into
one book) we picked the best ones, and starting writing chapter outlines and example
code. I&amp;rsquo;m so excited about some of the examples we&amp;rsquo;ll show you: they make
things that were previously complex now very simple. Functional programming can
be like that: making certain programs smaller by a huge factor.&lt;/p&gt;

&lt;p&gt;What I love about Swift is that it allows us to mix functional and
object-oriented programming. We can keep doing all the great stuff that we
know, we can keep using all of Apple&amp;rsquo;s great APIs, but at the same time we can
write parts of our program in a functional style. This book will hopefully show
you examples where the functional style is way more powerful.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Swift Tricks</title>
          <link>http://chris.eidhof.nl/post/swift-tricks/</link>
          <pubDate>Mon, 14 Jul 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/swift-tricks/</guid>
          <description>&lt;p&gt;Here are some quick Swift functions that can make your life easier. First, a function that splits up an array into head and tail:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension Array {
    var match : (head: T, tail: [T])? {
      return (count &amp;gt; 0) ? (self[0],Array(self[1..&amp;lt;count])) : nil
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func map&amp;lt;A,B&amp;gt;(f: A -&amp;gt; B, arr: [A]) -&amp;gt; [B] {
    if let (head,tail) = arr.match {
        return [f(head)] + map(f, tail)
    } else {
        return []
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you lazily want to generate a list of things, but don&amp;rsquo;t really know how many will be needed, you can use a Generator. It turns out there&amp;rsquo;s a type &lt;code&gt;GeneratorOf&lt;/code&gt; that makes it really easy for us to define one. For example, this is how you can generate an infinite list of numbers:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func naturalNumbers() -&amp;gt; GeneratorOf&amp;lt;Int&amp;gt; {
    var i = 0
    return GeneratorOf { return i++ }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now just iterate over the generator it with &lt;code&gt;for..in&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for x in naturalNumbers() {
    println(&amp;quot;x: \(x)&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, a sketch of how you could wrap &lt;code&gt;NSScanner&lt;/code&gt; to have a more Swift-like API:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;struct Scanner {
    let scanner : NSScanner

    init(string: String) {
        scanner = NSScanner(string: string)
    }

    func scanInt() -&amp;gt; Int? {
        var int : CInt = 0
        let didScan = scanner.scanInt(&amp;amp;int)
        return didScan ? Int(int) : nil
    }

    func scan(token : String) -&amp;gt; Bool {
        return scanner.scanString(token, intoString: nil)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope that these snippets will help a bit in writing cleaner Swift code. Enjoy!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>QuickCheck in Swift</title>
          <link>http://chris.eidhof.nl/post/quickcheck-in-swift/</link>
          <pubDate>Wed, 11 Jun 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/quickcheck-in-swift/</guid>
          <description>&lt;p&gt;This afternoon, I&amp;rsquo;ve been making my first steps in Swift, trying to see how much of my Haskell knowledge I could port. It seems like a lot of cool stuff you can do with types is not yet possible, I already filed some radars.&lt;/p&gt;

&lt;p&gt;As an experiment, this article is also available as a &lt;a href=&#34;http://chris.eidhof.nl/static/quickcheck-in-swift.playground.zip&#34;&gt;playground&lt;/a&gt; and on &lt;a href=&#34;https://github.com/chriseidhof/quickcheck-in-swift-blogpost&#34;&gt;github&lt;/a&gt;. Because we&amp;rsquo;ll need the &lt;code&gt;arc4random&lt;/code&gt; function, we&amp;rsquo;ll start by importing &lt;code&gt;Foundation&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import Foundation
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I wanted to see if it&amp;rsquo;s possible to implement something like &lt;a href=&#34;http://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt; in Swift. QuickCheck is a really cool library, available in multiple languages, that allows you to quickly check if properties are false. The interface is simple: you give it a property and it tries to falsify that property. Properties are just simple functions that return &lt;code&gt;Bool&lt;/code&gt;s. For example, suppose we have a property that checks whether &lt;code&gt;+&lt;/code&gt; on &lt;code&gt;Int&lt;/code&gt;s is a commutative operation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func prop_plusCommutative(x : Int, y : Int) -&amp;gt; Bool {
    return x + y == y + x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we can do is just generate a lot of random numbers, and feed them into this property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let numberOfIterations = 100 

for _ in 0..numberOfIterations {
    let valX = Int(arc4random())
    let valY = Int(arc4random())
    assert(prop_plusCommutative(valX,valY))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if we run this, we&amp;rsquo;ll have this checked a hundred times, with different numbers. It&amp;rsquo;s not a guarantee that it&amp;rsquo;s correct, but it&amp;rsquo;s rather a quick way of checking whether there aren&amp;rsquo;t any obvious mistakes. Suppose we try to write a &lt;code&gt;reverse&lt;/code&gt; function for strings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension String {
    func reverse() -&amp;gt; String {
        var s = &amp;quot;&amp;quot;
        for char in self {
            s = char + s
        }
        return s
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want to check if this is not completely broken, we can take a similar approach:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func prop_doubleReverse(x : String) -&amp;gt; Bool {
    return x.reverse().reverse() == x
}

func random (#from: Int, #to: Int) -&amp;gt; Int {
    return from + (Int(arc4random()) % to)
}

func randomString() -&amp;gt; String {
  let randomLength = random(from: 0, to: numberOfIterations)
  var string = &amp;quot;&amp;quot;
  for i in 0..randomLength {
      let randomInt : Int = random(from: 13, to: 255)
      string += Character(UnicodeScalar(randomInt))
  }
  return string
}

for _ in 0..numberOfIterations {
    assert(prop_doubleReverse(randomString()))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, it&amp;rsquo;s not nice to have to rewrite this &lt;code&gt;0..numberOfIterations&lt;/code&gt; all the time. Instead, we would like to write it like this:&lt;/p&gt;

&lt;pre&gt;
check(prop_doubleReverse)
check(prop_plusCommutative)
&lt;/pre&gt;

&lt;p&gt;How do we get there? It&amp;rsquo;s actually relatively easy. First, we define the &lt;code&gt;Arbitrary&lt;/code&gt; protocol, which generates arbitrary values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protocol Arbitrary {
    class func arbitrary() -&amp;gt; Self
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, we can define an instance for &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt; (beware, these are just quick and dirty instances):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;extension String : Arbitrary {
    static func arbitrary() -&amp;gt; String {
      return randomString()
    }
}

extension Int : Arbitrary {
    static func arbitrary() -&amp;gt; Int {
        return random(from: 0, to: 10000)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing left is to define the &lt;code&gt;check&lt;/code&gt; function. First, we define it for a property that takes a single argument:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func check&amp;lt;X : Arbitrary&amp;gt;(prop : X -&amp;gt; Bool) -&amp;gt; () {
    for _ in 0..numberOfIterations {
        let val = X.arbitrary()
        assert(prop(val))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Thanks to overloading, we can also define it for functions that take two arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func check&amp;lt;X : Arbitrary, Y: Arbitrary&amp;gt;(prop: (X,Y) -&amp;gt; Bool) -&amp;gt; () {
    for _ in 0..numberOfIterations {
        let valX = X.arbitrary()
        let valY = Y.arbitrary()
        assert(prop(valX,valY))
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all there is to it. Now we can check our properties:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;check(prop_doubleReverse)
check(prop_plusCommutative)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can even check closures:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;check({(s : String) -&amp;gt; Bool in countElements(s.reverse()) == countElements(s)})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I am really looking forward to people taking this idea and implementing QuickCheck for real. I think it could be a very nice addition to the current way of testing.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Intentions</title>
          <link>http://chris.eidhof.nl/post/intentions/</link>
          <pubDate>Tue, 15 Apr 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/intentions/</guid>
          <description>

&lt;p&gt;I&amp;rsquo;m a big fan of lighter view controllers. In the &lt;a href=&#34;https://www.objc.io/issues/1-view-controllers/&#34;&gt;first issue&lt;/a&gt; of objc.io, I wrote an article about it. Since then, I&amp;rsquo;ve given a couple of talks about it. Most of the things you can do are very straightforward once you know them, and people seem to generally like it. However, a couple of months ago, I read a &lt;a href=&#34;http://bendyworks.com/single-responsibility-principle-ios/&#34;&gt;great blogpost&lt;/a&gt; explaining how to take the notion of &amp;lsquo;lighter view controllers&amp;rsquo; up a notch. I tried to take the idea, and apply it to a very simple example app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chris.eidhof.nl/static/images/person-app.png&#34; style=&#34;width:217px; float: right; overflow: clear;&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-application&#34;&gt;The Application&lt;/h2&gt;

&lt;p&gt;The app is simple: it&amp;rsquo;s an editor for a &lt;code&gt;Person&lt;/code&gt; object, and currently the only editable field is the person&amp;rsquo;s name. There are two buttons: &lt;em&gt;Reverse&lt;/em&gt; reverses the person&amp;rsquo;s name, and &lt;em&gt;Uppercase&lt;/em&gt; makes it all uppercase. If you edit the person&amp;rsquo;s name, and then press &lt;em&gt;Return&lt;/em&gt;, the keyboard should dismiss.&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;clear: both;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;a-regular-implementation-of-the-view-controller&#34;&gt;A regular implementation of the View Controller&lt;/h2&gt;

&lt;p&gt;I created the view controller&amp;rsquo;s view in Interface Builder. The text field is hooked up as an &lt;code&gt;IBOutlet&lt;/code&gt;, and the view controller is also the text field&amp;rsquo;s delegate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ViewController () &amp;lt;UITextFieldDelegate&amp;gt;
@property (nonatomic) IBOutlet UITextField *textField;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, in the implementation, we create a person and update the text field&amp;rsquo;s text to reflect the newly created person&amp;rsquo;s name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad
{
    [super viewDidLoad];
    self.person = [Person new];
    self.person.name = @&amp;quot;Chris&amp;quot;;
    [self updateTextField];
}

- (void)updateTextField
{
    self.textField.text = self.person.name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Each of the buttons is connected to an &lt;code&gt;IBAction&lt;/code&gt;. For example, the reverse button&amp;rsquo;s action takes the name, reverses it (using the category method &lt;code&gt;reversedString&lt;/code&gt;, and updates the person&amp;rsquo;s name. Then it updates the text field accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)reverse:(id)sender {
    self.person.name = 
       self.textField.text.reversedString;
    [self updateTextField];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Uppercase works in exactly the same way. Simple enough:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)uppercase:(id)sender {
    self.person.name = 
      self.textField.text.uppercaseString;
    [self updateTextField];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The text field&amp;rsquo;s delegate is implemented in a simple way: it checks if the replacement string is a newline (i.e. the return key was pressed) and if yes, it resigns first responder, which dismisses the keyboard.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (BOOL)textField:(UITextField*)textField 
   shouldChangeCharactersInRange:(NSRange)range
               replacementString:(NSString*)string
{
    if ([string isEqualToString:@&amp;quot;\n&amp;quot;]) {
        [textField resignFirstResponder];
        return NO;
    }
    return YES;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, all of this is very simple. The view controller is just under 50 lines. However, as you add more and more logic, the view controller obviously becomes larger.&lt;/p&gt;

&lt;h2 id=&#34;moving-to-intentions&#34;&gt;Moving to Intentions&lt;/h2&gt;

&lt;p&gt;The idea of the article mentioned in the introduction is to take lighter view controllers to a whole new level. A view controller should only do work in the &lt;code&gt;viewDid*&lt;/code&gt; methods, not implement any extra protocols, and not have any &lt;code&gt;IBActions&lt;/code&gt;. That sounded pretty extreme to me, but I wanted to give it a try and see what it feels like.&lt;/p&gt;

&lt;p&gt;I created a sample project of the things below, and put &lt;a href=&#34;https://github.com/chriseidhof/intentions&#34;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;dismiss-on-enter&#34;&gt;Dismiss on Enter&lt;/h3&gt;

&lt;p&gt;The first thing we can do is to take out the dismiss on enter logic. To do this, we create a new object, which does only this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation DismissOnEnterIntention

- (BOOL)textField:(UITextField *)textField
    shouldChangeCharactersInRange:(NSRange)range
                replacementString:(NSString *)string
{
    if ([string isEqualToString:@&amp;quot;\n&amp;quot;]) {
        [textField resignFirstResponder];
        return NO;
    }
    return YES;
}

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use this object, we can go to the Object library in Interface Builder, and add a new object to our scene.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chris.eidhof.nl/static/images/select-object.png&#34; style=&#34;width:237px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;We set its class to &lt;code&gt;DismissOnEnterIntention&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chris.eidhof.nl/static/images/dismiss-on-enter.png&#34; style=&#34;width:272px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;Now, we can go to the textfield, and change its delegate and drag it to our new class (we have to make sure that the class declares that it implements the &lt;code&gt;UITextFieldDelegate&lt;/code&gt; protocol, for example in the class extension).
And that&amp;rsquo;s all there is to it. When the view controller is loaded, the storyboard will create a &lt;code&gt;DismissOnEnterIntention&lt;/code&gt; object and hook it up. Of course, having an extra object just to dismiss on enter seems a bit tedious. But think about it: how often have you implemented this yourself in a view controller? If you put this object in your own standard library, you never have to implement it again, but can instead just reuse it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: &lt;a href=&#34;https://twitter.com/toco91/status/456102320649293824&#34;&gt;Several&lt;/a&gt; &lt;a href=&#34;https://twitter.com/christian_beer/status/456134551941566464&#34;&gt;people&lt;/a&gt; on Twitter point out you can use &lt;code&gt;textFieldShouldReturn:&lt;/code&gt; instead, which is of course a lot better.&lt;/p&gt;

&lt;h3 id=&#34;uppercase-a-name&#34;&gt;Uppercase a Name&lt;/h3&gt;

&lt;p&gt;Uppercasing a name is a bit more difficult. We can start by creating a new object, &lt;code&gt;UppercaseIntention&lt;/code&gt;. It will have an outlet called &lt;code&gt;textField&lt;/code&gt;, and an IBAction, &lt;code&gt;uppercase&lt;/code&gt;, which we just copy over from the view controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)uppercase:(id)sender {
  self.person.name = 
    self.textField.text.uppercaseString;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add a custom object to our view controller scene, hook up the text field and the action, but now we face a problem: how do we connect the &lt;code&gt;person&lt;/code&gt; object? It turns out we can&amp;rsquo;t: we don&amp;rsquo;t know yet which person to edit. Instead, we first have to take a small sidestep and introduce an indirection: we create a container class that contains the person object. At first sight, this might seem to only complicate matters, but bear with me.&lt;/p&gt;

&lt;h4 id=&#34;creating-a-person-container&#34;&gt;Creating a Person Container&lt;/h4&gt;

&lt;p&gt;We create a custom object called &lt;code&gt;PersonContainer&lt;/code&gt;, which doesn&amp;rsquo;t do anything, except for having a &lt;code&gt;Person&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;quot;Person.h&amp;quot;
@interface PersonContainer : NSObject
@property (nonatomic) Person *person;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can add a new custom object of this class to our Interface Builder scene, and when the view loads, we can use the view controller and set the container&amp;rsquo;s &lt;code&gt;person&lt;/code&gt; property to the person we are currently editing. Then our &lt;code&gt;UppercaseIntention&lt;/code&gt; can use that person container to access the person. In our view controller, we do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)viewDidLoad
{
    [super viewDidLoad];
    Person *person = [Person new];
    person.name = @&amp;quot;Chris&amp;quot;;
    self.personContainer.person = person;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;UppercaseIntention&lt;/code&gt; class, we can add an outlet for the person container, hook it up, and finally we can write our uppercase action:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)uppercase:(id)sender {
  self.personContainer.person.name =
    self.textField.text.uppercaseString;
  self.textField.text = 
    self.personContainer.person.name;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the reverse action, it&amp;rsquo;s almost exactly the same code.&lt;/p&gt;

&lt;p&gt;Our view controller is now lighter (it only has the &lt;code&gt;viewDidLoad&lt;/code&gt; method left), but the question is: what have we gained? Is this really simpler to read? At this point, I think we have only complicated matters. There is a more clear separation into classes, but it&amp;rsquo;s now harder to understand, and the new classes that we have made are very specific to our view controller. We can do better, and make our classes more reusable.&lt;/p&gt;

&lt;h3 id=&#34;moving-to-a-generic-text-field-uppercase-intention&#34;&gt;Moving to a Generic Text Field Uppercase Intention&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s say we want to reuse our uppercase intention in a different place, where we don&amp;rsquo;t have a &lt;code&gt;Person&lt;/code&gt; as the model, but a different class. First, we can change our &lt;code&gt;PersonContainer&lt;/code&gt; to hold any kind of model, and rename it to &lt;code&gt;ModelContainer&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ModelContainer : NSObject
@property (nonatomic) id model;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, in our uppercase intention, we can change the code like this. It still knows that we&amp;rsquo;re editing a person&amp;rsquo;s &lt;code&gt;name&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)capitalize:(id)sender {
    [self.modelContainer.model 
         setValue:self.textField.text.uppercaseString
       forKeyPath:@&amp;quot;name&amp;quot;];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, we can use a really cool feature of Interface Builder: User Defined Runtime Attributes. We can take the key path &lt;code&gt;@&amp;quot;name&amp;quot;&lt;/code&gt;, and make it a runtime attribute. First, we create an extra property in our &lt;code&gt;UppercaseIntention&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@property (copy, nonatomic) NSString* modelKeyPath;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, we change our code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[self.modelContainer.model 
     setValue:self.textField.text.uppercaseString
   forKeyPath:self.modelKeyPath];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, in Interface Builder, we select the Reverse Intention object, and add a runtime attribute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chris.eidhof.nl/static/images/runtime-attribute.png&#34; style=&#34;width:273px;&#34;&gt;&lt;/p&gt;

&lt;p&gt;This is quite cool: now, our uppercase intention doesn&amp;rsquo;t know anything about the &lt;code&gt;Person&lt;/code&gt; anymore. The only thing it does: it takes a model object and a text field, and whenever its action is fired, it updates the model with the uppercased string of the text field.&lt;/p&gt;

&lt;h3 id=&#34;observe-intention&#34;&gt;Observe intention&lt;/h3&gt;

&lt;p&gt;If you paid close attention, you noticed that we removed the following line in our uppercase intention:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  self.textField.text = 
    self.personContainer.person.name;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;How do we get that behavior back? Instead of updating the text field, let&amp;rsquo;s do it with KVO, and create an observer object. We will make it very generic: it is configured with an object to observe and a key path, and also with a target to update, and a key path. For example, the object to observe might be a &lt;code&gt;Person&lt;/code&gt; and the key path might be &lt;code&gt;name&lt;/code&gt;, and the target object might be a &lt;code&gt;UILabel&lt;/code&gt; and the key path might be &lt;code&gt;text&lt;/code&gt;, which will update the label&amp;rsquo;s text whenever the person&amp;rsquo;s name changes.&lt;/p&gt;

&lt;p&gt;First, we need to create properties for the source, target and the two key paths:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface ObserveIntention ()

@property (strong) IBOutlet id sourceObject;
@property (strong) IBOutlet id target;
@property (copy) IBOutlet NSString *sourceKeyPath;
@property (copy) IBOutlet NSString *targetKeyPath;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to register for KVO notifications. We do this in &lt;code&gt;awakeFromNib&lt;/code&gt;, which is called by the framework after the outlets and the runtime attributes are set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; - (void)awakeFromNib
 {
     [super awakeFromNib];
     [self.sourceObject addObserver:self 
                         forKeyPath:self.sourceKeyPath
                            options:0
                            context:nil];
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To handle the change notifications, we implement the standard KVO method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)observeValueForKeyPath:(NSString *)keyPath
                      ofObject:(id)object
                        change:(NSDictionary *)change
                       context:(void *)context
{
    if ([keyPath isEqualToString:self.sourceKeyPath]) {
        [self updateValue];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;updateValue&lt;/code&gt; method does the real work, and looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; - (void)updateValue
 {
     id value = [self.sourceObject 
                  valueForKeyPath:self.sourceKeyPath];
     [self.target setValue:value
                forKeyPath:self.targetKeyPath];
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s all there is to it. We can now create this object in Interface Builder, hook up the source to the model container, the target to the text field, set both key paths using runtime attributes, and the textfield automatically updates whenever the model changes.&lt;/p&gt;

&lt;h4 id=&#34;adding-an-extra-label&#34;&gt;Adding an extra label&lt;/h4&gt;

&lt;p&gt;It might still feel like we have done a lot of work for nothing. But to show how simple some things now get: we can add another label in our view controller&amp;rsquo;s scene, duplicate our observe intention, but change the target to be our label. Now our label also automatically updates its text whenever the Person changes.&lt;/p&gt;

&lt;p&gt;It is interesting to now have a look at our final view controller scene, it&amp;rsquo;s very different from most view controllers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chris.eidhof.nl/static/images/final-scene.png&#34; style=&#34;width:269px;&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I think this might become a very powerful technique. It comes at a cost: instead of having one complicated view controller, you will have a more complicated storyboard. For me, however, the main attraction is the reusability: I can reuse the observe intention in every project. The same holds for the dismiss on enter intention. I can imagine a whole library of these intentions slowly emerging.&lt;/p&gt;

&lt;p&gt;In my next project, I will probably start using intentions, maybe not for everything, but where I see them fit. Building an example project with them was a lot of fun and really opened my mind.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>We launched Deckset</title>
          <link>http://chris.eidhof.nl/post/we-launched-deckset/</link>
          <pubDate>Tue, 08 Apr 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/we-launched-deckset/</guid>
          <description>&lt;p&gt;I couldn&amp;rsquo;t be more proud to share with you that we launched Deckset yesterday. There are a lot of nice stories to tell about how we worked as a team, why it took us 5 times longer than expected to build this, and how we finally shipped. There are so many interesting technical details to share. However, today I won&amp;rsquo;t talk about the process, but why I am so proud of the result. Of course, this is very biased, so here are &lt;a href=&#34;http://www.macstories.net/reviews/deckset-empowers-you-to-create-great-presentations-from-your-text-editor-of-choice/&#34;&gt;some&lt;/a&gt;. &lt;a href=&#34;http://brettterpstra.com/2014/04/07/deckset-1-dot-0-released/&#34;&gt;things&lt;/a&gt;. &lt;a href=&#34;http://brooksreview.net/2014/04/deckset/&#34;&gt;others&lt;/a&gt;. &lt;a href=&#34;https://twitter.com/chockenberry/status/453246589172060160&#34;&gt;are&lt;/a&gt;. &lt;a href=&#34;http://www.heise.de/mac-and-i/meldung/Deckset-Von-Markdown-zur-Praesentation-2165030.html&#34;&gt;thinking&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chris.eidhof.nl/static/images/deckset-screenshot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I draft a talk, I always start with the outline and think about the story that I want to share. These outlines I write in Markdown using my favorite text editor (vim). Generally, I first collect all of the ideas, and then rewrite my outline over and over again until it&amp;rsquo;s perfect.&lt;/p&gt;

&lt;p&gt;Then, at some point, once the outline starts getting very detailed, I start creating slides. Before Deckset existed, I used to have my first big hurdle: I try to make every aspect of my presentation really good, and I also want the slides to reflect that. One of the aspects is having a beautiful theme. When creating a presentation using regular software (such as Keynote or Powerpoint), you have to choose this theme before you do anything else, because it&amp;rsquo;s really hard to change this after you made a few slides. In Deckset, I have the flexibility to change this at almost any time, and hardly have to worry about this upfront.&lt;/p&gt;

&lt;p&gt;Whenever I make slides, I want them to be beautiful and consistent. In Deckset, this is done by default. Because our input is Markdown, which is only structure, I can&amp;rsquo;t spend my time changing fonts, adjusting colors and moving images around. Each theme is very carefully designed, and we iterated many times to make sure they are all great for giving a presentation.&lt;/p&gt;

&lt;p&gt;I love also the speed of creating a presentation with Deckset. I am a fast typist, and once I know what I want to say, I just type it out and my slides are done. For example, I had to create a slide deck for the UIKonf Sponsors, with background info, sponsor offers, and quotes and pictures from last year&amp;rsquo;s edition. In 15 minutes, I had a really impressive looking deck with all the information. The sponsors loved this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://chris.eidhof.nl/static/images/deckset-screenshot2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The last year, in my own public speaking, I&amp;rsquo;ve given similar talks on the same topic at multiple places. Having my presentation in Markdown means that I can very quickly copy and paste specific slides, or code examples, whenever I create a new presentation. Because I only copy Markdown, I don&amp;rsquo;t have to worry about the design.&lt;/p&gt;

&lt;p&gt;Finally, making changes to a Deckset presentation is much easier than in Keynote. For example, we have an option to make the headings &lt;em&gt;fit&lt;/em&gt;: the font size is automatically adjusted so that the text fits perfectly on the slide. We do automatic syntax highlighting. Making these kinds of last-minute changes in a Keynote presentation takes a lot more effort: not only do you change the text, but you also have to re-layout your slides.&lt;/p&gt;

&lt;p&gt;There are so many more things to talk about. But today, we&amp;rsquo;ll celebrate our launch, and hope to ship many more versions. We have a lot of ideas of where we can take Deckset. It&amp;rsquo;s very opinionated software, and not for everybody. But if you love Markdown, check out our &lt;a href=&#34;http://www.decksetapp.com&#34;&gt;website&lt;/a&gt; or head over to the &lt;a href=&#34;http://bit.ly/getdeckset&#34;&gt;Mac App Store&lt;/a&gt; and buy it directly.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Fast Running</title>
          <link>http://chris.eidhof.nl/post/fast-running/</link>
          <pubDate>Wed, 12 Mar 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/fast-running/</guid>
          <description>&lt;p&gt;When I&amp;rsquo;m not working, a lot of my time and energy is spent running. Last year, in preparation for the Berlin Marathon, I was running 4-5 times a week, and also doing strength training 1-2 times a week. Last year, in April, I also ran a PB on the 10K: 37:03. Compared to average runners, this is quite fast (however, in almost every race there are people who are a lot faster).&lt;/p&gt;

&lt;p&gt;Sometimes when I tell people I run a lot, they ask me: how fast are you? And some of the beginning runners are amazed when I tell my numbers. A lot of people have a hard time running under 50 minutes, even when training twice a week.&lt;/p&gt;

&lt;p&gt;The way I did it is very simple, but not easy: I trained diligently for 3 or 4 years. There have been phases where I was injured, and I couldn&amp;rsquo;t train, but during any other time, I trained at least 3 times a week. Working towards my 10K PB, I almost never missed a training, unless I had a really good excuse. It&amp;rsquo;s as simple as that.&lt;/p&gt;

&lt;p&gt;There are a lot of good excuses not to run. However, for me, once I find a good excuse to skip one training, it&amp;rsquo;s going to be even easier to skip the next one. So I made a point of not skipping trainings in preparation for my 10K race. This really helped me. It&amp;rsquo;s not easy: sometimes, you&amp;rsquo;re tired, or you just don&amp;rsquo;t feel like running. You&amp;rsquo;ll have to toughen up and still do it. You&amp;rsquo;ll have to sometimes skip social stuff and go to bed at 10pm, instead of drinking beer until 1am.&lt;/p&gt;

&lt;p&gt;Of course, unless you&amp;rsquo;re a professional athlete, you can&amp;rsquo;t keep a regime like that all through the year. I decide on key races, and be very strict about trainings in the months leading up to it, and loosen up afterwards. And during those months, training is my main priority. Of course I will work and socialize during those months, but I try to organize everything around training. Currently, my focus is on work, and hence I take my training a lot more easy.&lt;/p&gt;

&lt;p&gt;So this is my secret: just put in the effort. If you want to become a fast runner, run a lot. If you want to become a great programmer, program a lot. Most of your motivation should come intrinsically, for the rest you need to set a schedule and stick to it.&lt;/p&gt;

&lt;p&gt;To finish the article, here&amp;rsquo;s a nice quote by Pirsig, which applies to running fast as well:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You?ve got to live right, too. It?s the way you live that predisposes you to avoid the traps and see the right facts. You want to know how to paint a perfect painting? It?s easy. Make yourself perfect and then just paint naturally.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Robert M. Pirsig&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Working for the man</title>
          <link>http://chris.eidhof.nl/post/working-for-the-man/</link>
          <pubDate>Wed, 05 Mar 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/working-for-the-man/</guid>
          <description>&lt;p&gt;I got my first programming job when I was 16. I had made a website for the local library, and one of the two computer companies in the village had gotten my contact details. I went there, and started building a CMS in PHP for him. I was 15 or 16 years old, and loved it. I built and designed a lot of websites for all the local companies (the plumber, the party-rental-service, the truck company, etc.).&lt;/p&gt;

&lt;p&gt;I then had a couple of jobs, always a little bit more serious, until I was 19, and they let me work at a really cool agency. After a while, we started working on a big project for a big client, and I knew my boss charged ?175 an hour. I got paid ?17. Even after deducting costs, he still made a really nice markup. So after some discussion, I got a project-based raise of ?10.&lt;/p&gt;

&lt;p&gt;I was doing a good job (the client we worked for, still asks me every once in a while if I would want to work for them). I also brought on multiple of my friends, some of which are still working at the company. My boss was quite happy. However, during a dinner, I told him that one day, after my studies, I wanted to start a company of my own. That changed things.&lt;/p&gt;

&lt;p&gt;When the project for the client ended, I had to go back to my old wage of ?17 an hour, without the bonus. For me, this meant a pay cut of 40%. Naturally, after having made my boss a lot of money, the client happy and bringing on a lot of friends, I thought I deserved a raise. First, it was hard to schedule a meeting, but after a while, we did talk about it, and my boss offered me a raise: I was going to make ?17.50 an hour. I was &lt;em&gt;so&lt;/em&gt; offended.&lt;/p&gt;

&lt;p&gt;As happened multiple times over the last 10 years, I managed to turn my frustration into something productive. I knew that time had come to start my own company. I was planning to do it a few years later, but I realized that I didn&amp;rsquo;t want to work for a boss anymore. So I called up my friend Eelco, who I&amp;rsquo;d been talking with about starting a company, and a few months later we were in business.&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t been an employee since, and can&amp;rsquo;t imagine being one. I expect that at some point during my career, I will work for a boss again, and have a ?regular? job. However, I&amp;rsquo;m quite afraid of giving up all this freedom: I now decide what to work on, who to work with, how much risk to take, when I want to work, and what I&amp;rsquo;ll be doing next. It&amp;rsquo;s going to be hard to have someone else decide all these things.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Finding designers</title>
          <link>http://chris.eidhof.nl/post/finding-designers/</link>
          <pubDate>Mon, 24 Feb 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/finding-designers/</guid>
          <description>&lt;p&gt;When Florian and me started working on Deckset, we realized we needed the best possible design. In every app, great design is important, but here, it&amp;rsquo;s even more important: we will provide users with themes that have to look really great by default.&lt;/p&gt;

&lt;p&gt;When we started looking for designers, there were a couple of people that came to mind, because we&amp;rsquo;ve worked with them before. However, with the two most serious candidates, we&amp;rsquo;ve had a couple of issues: even though we love what they made, the process of working with them before was not too nice. They kept on missing deadlines and not communicating that. Speaking from a client perspective, it&amp;rsquo;s almost never a problem if a deadline is missed. But not getting a heads up on that is a problem.&lt;/p&gt;

&lt;p&gt;We decided to not work with the people we knew, because we anticipated the same problems. Instead, we started browsing Dribbble, and found somebody who made some really beautiful mockups for Mac apps. We started talking with him, and asked him to make a plan.
The plan was: he had to spend a day or two making wireframes, and then he could make a better plan for the rest. Even though our phone call had been really nice, and we believed he could do it, something just didn&amp;rsquo;t feel right. We couldn&amp;rsquo;t really poinpoint it, but we decided not to work with him.&lt;/p&gt;

&lt;p&gt;We then realized: we wanted to work with the best designers possible. The guy we&amp;rsquo;ve been talking too was already expensive, but the outcome of hiring him felt very uncertain. We knew we had to find the very best that we can afford. We decided that, worst case, one of us would go freelancing to make as much money as possible, so we could afford the very best.&lt;/p&gt;

&lt;p&gt;We then had a talk with Sven from A Color Bright. He got very excited about the project, and offered to help us in many possible ways (not just with the visuals, but with everything involving design: the user experience, the website, the marketing, and so on). We could tell that they had a lot of experience in working with clients. It just felt good.&lt;/p&gt;

&lt;p&gt;A while back, I struggled to explain why it didn&amp;rsquo;t feel good with the first designer. Only later, I realized that the most important thing we were looking for, is not just great design. It&amp;rsquo;s also great communication. Communication is essential during a software project, especially when you don&amp;rsquo;t exactly know what you&amp;rsquo;re building (which, in my experience, is &lt;em&gt;always&lt;/em&gt; the case when building software). I&amp;rsquo;m sometimes freelancing myself, and will need to get better at it too. From now on, I&amp;rsquo;ll try to judge anybody I&amp;rsquo;ll hire on a project-basis on their communication skills.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Aside&lt;/em&gt;:
I noticed that in all projects I&amp;rsquo;ve done over the last years, I preferred to sit on-site with my client. This is probably because I then hardly need to put effort into communication: when somebody has a question, it&amp;rsquo;s as easy as walking over.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Behind the scenes</title>
          <link>http://chris.eidhof.nl/post/how-i-write-for-objcio/</link>
          <pubDate>Mon, 17 Feb 2014 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-i-write-for-objcio/</guid>
          <description>&lt;p&gt;headline: How I write my articles for objc.io&lt;/p&gt;

&lt;p&gt;My workflow for writing an &lt;a href=&#34;http://www.objc.io&#34;&gt;objc.io&lt;/a&gt; article is like this:&lt;/p&gt;

&lt;p&gt;Once we release an issue, we often have the topic for the next issue ready. Florian, Daniel and me get together and we discuss and try to distribute the relevant topics among the three of us (in addition to the guest articles that are already planned). For example, for the &lt;a href=&#34;http://www.objc.io/issue-9/&#34;&gt;strings issue&lt;/a&gt;, I knew my topic would be &lt;a href=&#34;http://www.objc.io/issue-9/string-parsing.html&#34;&gt;string parsing&lt;/a&gt;, and that I would talk about scanners, regular expressions and parsers.&lt;/p&gt;

&lt;p&gt;Then there are two possibilities: I know directly what I want to write, or I have no idea yet.&lt;/p&gt;

&lt;p&gt;When I know what to write, I immediately start thinking about an outline. This takes a few weeks, and I think on the train, bike and discuss bits and pieces with Daniel and Florian whenever the topic comes up. I collect notes and ideas in a file or in Evernote. If I decide that I want a sample project (which I really like having most of the time) then I will start with building that and finishing it. This usually takes a day or two.
Mostly, there is no writing during the building of the project (only note-taking).&lt;/p&gt;

&lt;p&gt;However, I do prepare an outline. We share the outlines with each other, also to distribute all the topics and decide who writes about what. And we add things to each other&amp;rsquo;s articles, to make sure we cover everything. Sometimes, we even write parts of each other&amp;rsquo;s article.  After this process, I&amp;rsquo;ll have a sample project and an outline. Once I&amp;rsquo;m happy with the sample project and the outline, I start writing. This also takes a day or two.&lt;/p&gt;

&lt;p&gt;When I don&amp;rsquo;t know what to write, I start with doing a lot of research. I read blogs, try to find the WWDC videos, read the programming guides and other documentation, and see what kinds of problems people have. I ask myself questions and try to answer them. Then I follow the process above.&lt;/p&gt;

&lt;p&gt;Finally, after the project and article are ready, the three of us read each other&amp;rsquo;s articles and try to improve it. We also do this with the guest posts. And once we&amp;rsquo;re all happy (or ran out of time) we send everything to Natalye, our copy-editor, who makes sure things are phrased clearly, that there are no language mistakes and that there&amp;rsquo;s a consistent style.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s amazing how much effort goes into this: at least a few days per article. However, even if nobody reads your article, it&amp;rsquo;s still worth the effort: doing the background research, getting your facts right and trying to put all this stuff into words really teaches me a lot. And the effort becomes even more worthwile when you see that your article is read by tens of thousands of people.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Deckset</title>
          <link>http://chris.eidhof.nl/post/deckset/</link>
          <pubDate>Fri, 27 Dec 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/deckset/</guid>
          <description>&lt;p&gt;One of the things I love is Markdown. Recently, I&amp;#8217;ve also been giving a lot more presentations. Working in Keynote can be really nice, and is very powerful. But most of the time, I don&amp;#8217;t need that power.&lt;/p&gt;

&lt;p&gt;Therefore, &lt;a href=&#34;http://floriankugler.com&#34;&gt;Florian&lt;/a&gt;, me and our awesome friends at &lt;a href=&#34;http://www.acolorbright.com&#34;&gt;A Color Bright&lt;/a&gt; have spent the last months building an app that changes the way you write your presentations. You write a markdown file, separate your slides with dashes, and you get a beautiful presentation out of it. Update your markdown file, and your presentation updates automatically.&lt;/p&gt;

&lt;p&gt;Over the last weeks, we&amp;#8217;ve given multiple presentations with the app, and it&amp;#8217;s awesome. For me, it&amp;#8217;s great that I can just write. Rearranging text is so much easier than rearranging slides. The default themes we have are beautiful by default, and it&amp;#8217;s really hard to mess it up. Changing to a different theme is immediate: you can do this minutes before the presentation, if you feel like it.&lt;/p&gt;

&lt;p&gt;We are not building a replacement for Keynote or Powerpoint, but a different way of creating presentations. In some use cases, traditional tools are the way to go. But for many of the presentations, we think Deckset is much easier.&lt;/p&gt;

&lt;p&gt;Currently, we&amp;#8217;re putting the finishing touches on our app, and are getting it ready for private beta. We are planning to launch early 2014. If this sounds interesting to you, go ahead and sign up for the mailing list at &lt;a href=&#34;http://www.decksetapp.com&#34;&gt;decksetapp.com&lt;/a&gt;, and we&amp;#8217;ll keep you posted.&lt;/p&gt;

&lt;p&gt;Have a great start of the year!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>2013</title>
          <link>http://chris.eidhof.nl/post/2013/</link>
          <pubDate>Sat, 07 Dec 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/2013/</guid>
          <description>&lt;p&gt;It&amp;#8217;s the time of the year to write a recap about the things I&amp;#8217;ve done this year. 2013 has been a really awesome year, maybe my best year so far. I learned tons, worked with really awesome people, made many new friends and travelled a lot.&lt;/p&gt;

&lt;h2&gt;Client work&lt;/h2&gt;

&lt;p&gt;This year, I worked for three big clients (and some smaller ones). The smallest of three was an old employer who wanted a prototype of a new idea (in Ruby on Rails). This prototype evolved into a bigger website, and things got a bit more serious. Because I am not a real Rails developer, and because there was a base level of trust missing, I decided to not continue working on this project. I had written behavior tests using &lt;a href=&#34;http://cukes.info&#34;&gt;Cucumber&lt;/a&gt; for the entire project: this was awesome once I decided to transfer it, because the other developer was able to quickly take it over.&lt;/p&gt;

&lt;p&gt;My other two big clients were &lt;a href=&#34;http://www.aprendo.nl&#34;&gt;Aprendo&lt;/a&gt; and &lt;a href=&#34;http://wearezeta.com&#34;&gt;Zeta&lt;/a&gt;. For Aprendo, we built an in-house app for development of elite athletes. I worked together with &lt;a href=&#34;http://floriankugler.com&#34;&gt;Florian&lt;/a&gt; on this, and our collaboration was so nice we decided to make more things together (more on that later). For Zeta, I can&amp;#8217;t yet tell what I built, but keep an eye on them. It&amp;#8217;ll be awesome.&lt;/p&gt;

&lt;p&gt;I really liked having few bigger clients (rather than a more smaller clients). I&amp;#8217;m currently still wide open in 2014 for client projects, if you have a bigger project that needs a serious developer (or a team): get in touch.&lt;/p&gt;

&lt;h2&gt;Conferences and Events&lt;/h2&gt;

&lt;p&gt;This year was the year of the conferences for me. Almost exactly one year ago, I realized that there&amp;#8217;s no English iOS conference in Berlin, and with all the awesome talent in the city we definitely needed one. So I teamed up with &lt;a href=&#34;http://www.thewavingcat.com&#34;&gt;Peter&lt;/a&gt;, &lt;a href=&#34;http://werkstatt.io&#34;&gt;Matt&lt;/a&gt; and &lt;a href=&#34;http://about.me/max.krueger&#34;&gt;Max&lt;/a&gt;, and we decided to organize &lt;a href=&#34;http://www.uikonf.com&#34;&gt;UIKonf&lt;/a&gt;. This was a lot of hard work, a lot of things learned, and went way better than expected. One of my first lessons in how working in a team can make you achieve that much more. In fact, it was so awesome we decided to do it again, tickets for 2014 are now &lt;a href=&#34;http://www.uikonf.com&#34;&gt;on sale&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because the awesome &lt;a href=&#34;http://nshipster.com&#34;&gt;NSHipster&lt;/a&gt; was in town, we decided to put on an event together with Mattt, and put on an &lt;a href=&#34;http://2013.uikonf.com/2013/03/25/nshipster-quiz-night.html&#34;&gt;NSHipster night&lt;/a&gt;, which turned out to be a great succes.&lt;/p&gt;

&lt;p&gt;Also, after UIKonf, &lt;a href=&#34;http://www.solid-perspective-vision.com&#34;&gt;Stijn Oomes&lt;/a&gt; approached me with the idea of doing a &lt;a href=&#34;http://2013.uikonf.com/2013/06/11/uikonf-training.html&#34;&gt;3D programming workshop&lt;/a&gt;. This went well, we even had two days of workshops. We went over the basics of 3D programming, and took different approaches in getting 3D scenes on the screen, from high-level with SceneKit to low-level-everything-in-OpenGL.&lt;/p&gt;

&lt;p&gt;Finally, a while ago Apple announced &lt;a href=&#34;https://developer.apple.com/tech-talks/&#34;&gt;Tech Talks&lt;/a&gt; in Berlin. After learning that I didn&amp;#8217;t get a ticket, I decided to put my frustration to good use and started organizing &lt;a href=&#34;http://www.alt-tech-talks.com&#34;&gt;Alt Tech Talks&lt;/a&gt;, a free event for everyone who did or did not get a ticket. On Wednesday night I asked on Twitter, on Thursday I had the first 4 speakers confirmed and on Friday I rented a movie theater. The rest isn&amp;#8217;t history yet, because they&amp;#8217;ll happen in a few days from now.&lt;/p&gt;

&lt;h3&gt;Talks&lt;/h3&gt;

&lt;p&gt;Because of starting &lt;a href=&#34;http://www.objc.io&#34;&gt;objc.io&lt;/a&gt; (more about this later), Florian, &lt;a href=&#34;https://twitter.com/danielboedewadt&#34;&gt;Daniel&lt;/a&gt; and me gained a bit of visibility in the iOS and Mac community. And that lead to conferences asking us if we&amp;#8217;d be interested in speaking. I like speaking, so off we went.&lt;/p&gt;

&lt;p&gt;First, there was &lt;a href=&#34;http://nsspain.com/2013&#34;&gt;NSSpain&lt;/a&gt;, which was an English-speaking conference in Logro?o. We were quite impressed: it was well organized, great weather, and lots of nice food and wine. I spoke about &lt;a href=&#34;https://speakerdeck.com/chriseidhof/lighter-view-controllers&#34;&gt;Lighter View Controllers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then, the talk I was most afraid of this year: an hour-long presentation in German (!) at &lt;a href=&#34;http://www.macoun.de&#34;&gt;Macoun&lt;/a&gt;. Fortunately, my German is finally at a level where people don&amp;#8217;t have problems understanding me, and with enough preparation, I think my talk came across well. The subject (&lt;a href=&#34;https://speakerdeck.com/chriseidhof/schlanke-view-controller&#34;&gt;Schlanke View Controller&lt;/a&gt;) was the the same as in Spain, and it seems to be very relevant for all iOS developers.&lt;/p&gt;

&lt;p&gt;About a month later, I spoke at &lt;a href=&#34;http://pragmamark.org&#34;&gt;pragma mark&lt;/a&gt;, an iOS/OS X conference in Milan, Italy. Here, I spoke about &lt;a href=&#34;https://speakerdeck.com/chriseidhof/pragma-mark-simple-concurrent-programming&#34;&gt;async programming&lt;/a&gt;, which went okay. It is quite a hard topic to talk about, but luckily, writing &lt;a href=&#34;http://www.objc.io/issue-2/common-background-practices.html&#34;&gt;the article for objc.io&lt;/a&gt; forced me to dive deep into the topic, and giving me plenty of raw material for the talk.&lt;/p&gt;

&lt;p&gt;The hardest talk format this year was at &lt;a href=&#34;http://igniteberlin.com/category/ignite04/&#34;&gt;Ignite Berlin&lt;/a&gt;; every presentation is 20 slides, and every slide auto-advances every 15 seconds. I prepared this the other way around: normally, I write an outline for a talk, expand that a couple of times and finally make slides. This time, however, I recorded myself telling the story I wanted to tell, and made some slides that loosely reinforced what I wanted to tell.&lt;/p&gt;

&lt;p&gt;I also talked at &lt;a href=&#34;https://speakerdeck.com/chriseidhof/parallele-programmierung-de&#34;&gt;CocoaHeads Dresden&lt;/a&gt; and twice at the &lt;a href=&#34;http://berlin.compilermeet.org&#34;&gt;Berlin Compiler Meetup&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Other&lt;/h2&gt;

&lt;p&gt;In the beginning of the year, I joined &lt;a href=&#34;http://kantberlin.com&#34;&gt;KANT&lt;/a&gt;, a studio full of great people. I spent a couple of months working there, but after being on-site with my client a lot, and having other commitments that didn&amp;#8217;t allow me to be there a lot, I decided to cancel my desk there. Being among them, I learned to appreciate coffee even more.&lt;/p&gt;

&lt;p&gt;I started lots of small new projects, some succesful, most failed. I often spend a day or two building something (sometimes more). It&amp;#8217;s a lot of fun, and in doing so I learned a lot. I hope that I can use some of those ideas in future projects.&lt;/p&gt;

&lt;p&gt;Continuing from last year, we try to meet regularly for our German course. With my fellow Dutchies &lt;a href=&#34;http://alper.nl/dingen/&#34;&gt;Alper&lt;/a&gt; and &lt;a href=&#34;http://iksi.cc&#34;&gt;IKSI&lt;/a&gt; we take lessons from &lt;a href=&#34;https://twitter.com/fraulea&#34;&gt;@fraulea&lt;/a&gt;. I will probably spend the next 10 years improving my German while never getting close to being near-native. But that&amp;#8217;s okay, it&amp;#8217;s a lot of fun and a beautiful language to discover. For the German speakers that read this: if you ever hear me make mistakes, please correct me.&lt;/p&gt;

&lt;p&gt;After having spent most of the year freelancing, I&amp;#8217;ve been working on a product together with Florian and &lt;a href=&#34;http://www.acolorbright.com&#34;&gt;A Color Bright&lt;/a&gt;. We&amp;#8217;re not quite ready to tell you what it is, but are getting close to release a private beta towards the end of this year. And hopefully can submit to the store early January. It&amp;#8217;s going to be a native Mac app (our first) and it&amp;#8217;s going to be very beautiful. Building your own products is lots of fun, I hope to do a lot more of that in 2014.&lt;/p&gt;

&lt;h2&gt;objc.io&lt;/h2&gt;

&lt;p&gt;The last work-related topic: &lt;a href=&#34;http://www.objc.io&#34;&gt;objc.io&lt;/a&gt;. On the morning after UIKonf, on the hackday, I sat outside in the sun, together with Florian, Daniel and &lt;a href=&#34;http://petersteinberger.com&#34;&gt;Peter&lt;/a&gt;. Instead of hacking, we were talking and drinking coffee, and I felt a bit guilty about that. Florian, Daniel and me decided that we should write a blog with the three of us. A few days later, I tried to convince them that we should instead make a magazine: one topic each month, and in-depth articles. We asked &lt;a href=&#34;http://iksi.cc&#34;&gt;IKSI&lt;/a&gt; to make a beautiful design, and asked &lt;a href=&#34;http://deutsch-bitte.net&#34;&gt;Natalye&lt;/a&gt; to do the copy-editing. We started writing and tried to put a lot of effort into the first issue. &lt;a href=&#34;http://www.rickigregersen.com&#34;&gt;Ricki&lt;/a&gt; wrote an article too, as our first guest-writer. After a few weeks, Florian and me sat outside on my balcony, and pressed publish. We posted the link on Twitter, waited a bit, and saw a huge stream of compliments coming in.&lt;/p&gt;

&lt;p&gt;Each month, each of us spends a few days researching and writing my article, as well as coordinating the other things. It&amp;#8217;s a lot of work, especially because we really have to investigate each topic very deeply, as we don&amp;#8217;t want to spread the wrong ideas. But it&amp;#8217;s oh so rewarding. The writing and researching in itself make me a lot more knowledgeable. Before writing, I sometimes don&amp;#8217;t know too much about a topic, and having the article and its deadline force me to learn. It&amp;#8217;s just great. And of course, getting all the positive reactions from our readers is very flattering.&lt;/p&gt;

&lt;h2&gt;Leisure&lt;/h2&gt;

&lt;p&gt;This year, I visited Spain three times: once for running, once for a conference and the third time to spend some time by myself (I&amp;#8217;m writing this article from Seville). I learned how to do exercises at the gym, which was so much fun: I never expected that lifting heavy stuff could be fun, but it&amp;#8217;s great. I ran a new PB on the 10K: 37:03. I ran my first marathon: the &lt;a href=&#34;http://www.skogsmaraton.no&#34;&gt;Oslo Forest Marathon&lt;/a&gt;. It was way too hilly for me to run fast, and while the first 27K went great, the last 15 were very hard. I visited friends and family in The Netherlands, but not as much as I wanted. I ran up the &lt;a href=&#34;http://en.wikipedia.org/wiki/Brocken&#34;&gt;Brocken&lt;/a&gt; a couple of times. Together with Frank, I walked &lt;a href=&#34;http://en.wikipedia.org/wiki/Hadrian&#39;s_Wall&#34;&gt;Hadrian&amp;#8217;s wall&lt;/a&gt;, and spend the week after that running up mountains in the Lake District. I went sailing and camping in Sweden.&lt;/p&gt;

&lt;p&gt;One of my disappointments was not being able to run the Berlin Marathon. I trained for months, aiming to run a fast first road-marathon. However, during the last week of tapering, I got quite sick, and had to stay in bed for a few days. I might have caught a bug, or maybe I trained too hard. It took me a while to recover, and I still haven&amp;#8217;t gotten back to running 5 times a week.&lt;/p&gt;

&lt;h2&gt;Recap&lt;/h2&gt;

&lt;p&gt;It was awesome. I had a blast. I did work too much, and want to change that next year.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lightweight Key-Value Observing</title>
          <link>http://chris.eidhof.nl/post/lightweight-key-value-observing/</link>
          <pubDate>Wed, 09 Oct 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/lightweight-key-value-observing/</guid>
          <description>&lt;p&gt;In this article, I&amp;#8217;d like to implement a simple class I use for
key-value observing. I think KVO is great, however, for most of what I
do, there are two problems:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;I don&amp;#8217;t like the dispatching in &lt;code&gt;observeValueForKeyPath:ofObject:change:context:&lt;/code&gt;. I think it gets messy and confusing if you observe more than one object.&lt;/li&gt;
&lt;li&gt;You have to balance each &lt;em&gt;add observer&lt;/em&gt; with a &lt;em&gt;remove observer&lt;/em&gt;,
it would be nice if this can be done automatically.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;So, off we go. The trick we will use is one I first saw in
&lt;a href=&#34;https://github.com/th-in-gs/THObserversAndBinders&#34;&gt;THObserversAndBinders&lt;/a&gt;,
and this post is basically a description of what they did, but in the
most minimalistic way.&lt;/p&gt;

&lt;p&gt;First, we&amp;#8217;ll define the interface for our object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Observer : NSObject
+ (instancetype)observerWithObject:(id)object
                           keyPath:(NSString*)keyPath
                            target:(id)target
                          selector:(SEL)selector;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The observer takes four parameters, which are hopefully self-explanatory. I chose
to use the target/action pattern: an alternative would have been blocks,
but then you would have to do the weakSelf/strongSelf dance, and it&amp;#8217;s
often nice to have a separate method anyway.&lt;/p&gt;

&lt;p&gt;What we will do is set up the KVO inside the initializer, and remove it
in the &lt;code&gt;dealloc&lt;/code&gt; method. What this means is that as long as the
&lt;code&gt;Observer&lt;/code&gt; object is retained, we will have an observer. The way I
typically use this, for example, in a view controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;self.usernameObserver = [Observer observerWithObject:self.user
                                             keyPath:@&#34;name&#34;
                                              target:self
                                            selector:@selector(usernameChanged)];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By putting it in a property, we are making sure it gets retained. As
soon as our view controller deallocates, it&amp;#8217;ll set the property to nil
and the observer will stop observing.&lt;/p&gt;

&lt;p&gt;In the implementation, it&amp;#8217;s important that we keep a weak reference to
both the observed object and the target. If one of the two gets nil, we
want to stop sending messages:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Observer ()
@property (nonatomic, weak) id target;
@property (nonatomic) SEL selector;
@property (nonatomic, weak) id observedObject;
@property (nonatomic, copy) NSString* keyPath;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The initializer sets up the KVO notifications. It uses &lt;code&gt;self&lt;/code&gt; as the
context. This is necessary if we would ever have a subclass that adds a
similar observer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (id)initWithObject:(id)object keyPath:(NSString*)keyPath target:(id)target selector:(SEL)selector
{
  if (self) {
    self.target = target;
    self.selector = selector;
    self.observedObject = object;
    self.keyPath = keyPath;
    [object addObserver:self forKeyPath:keyPath options:0 context:self];
  }
  return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When a change happens, we just notify our target, if it still exists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)observeValueForKeyPath:(NSString*)keyPath ofObject:(id)object change:(NSDictionary*)change context:(void*)context
{
  if (context == self) {
    id strongTarget = self.target;
    if ([strongTarget respondsToSelector:self.selector]) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored &#34;-Warc-performSelector-leaks&#34;
      [strongTarget performSelector:self.selector];
#pragma clang diagnostic pop
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, in the &lt;code&gt;dealloc&lt;/code&gt; we remove the observer:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)dealloc
{
    id strongObservedObject = self.observedObject;
    if (strongObservedObject) {
        [strongObservedObject removeObserver:self forKeyPath:self.keyPath];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s all there is to it. There are a lot of ways this could be
extended: add blocks support, or my favorite trick: another convenience
constructor that call the action directly the first time. However, I
wanted to show the core of the technique, adjust it to your needs.&lt;/p&gt;

&lt;p&gt;By using this technique you don&amp;#8217;t have to remember too much when doing KVO.
Just retain the observers, and set them to nil when you&amp;#8217;re done. The
rest will happen automatically.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Status Update</title>
          <link>http://chris.eidhof.nl/post/status-update/</link>
          <pubDate>Mon, 10 Jun 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/status-update/</guid>
          <description>&lt;p&gt;Lots of stuff happened over the last months, so here&amp;#8217;s a partial list:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;I finished my project with &lt;a href=&#34;http://www.aprendo.nl&#34;&gt;Aprendo&lt;/a&gt;. We&amp;#8217;ve
been working on an in-house iPad app for almost a year. At this point,
I can&amp;#8217;t demo anything publicly, but I&amp;#8217;d be happy to talk about it in
private.&lt;/li&gt;
&lt;li&gt;I organized &lt;a href=&#34;http://www.uikonf.com&#34;&gt;UIKonf&lt;/a&gt; together with
&lt;a href=&#34;http://twitter.com/peterbihr&#34;&gt;Peter&lt;/a&gt; and
&lt;a href=&#34;http://twitter.com/fidothe&#34;&gt;Matt&lt;/a&gt;. I think it&amp;#8217;s safe to say that
the conference was a resounding success. We learned a lot of things
that we can do better next year, but all in all, we&amp;#8217;re very happy.&lt;/li&gt;
&lt;li&gt;I started &lt;a href=&#34;http://objc.io&#34;&gt;objc.io&lt;/a&gt;, a new online periodical about
best practices and techniques in Objective-C. The response so far
has been very good, and matches the amount of work we&amp;#8217;ve put in.&lt;/li&gt;
&lt;li&gt;I started work on a small app to track your food intake, based on the
Diet Quality Score system.&lt;/li&gt;
&lt;li&gt;I started planning to build independent apps together with
&lt;a href=&#34;http://floriankugler.com&#34;&gt;Florian&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The running is going well, too, I improved my PB on the 10K in bad
circumstances to 37:03, and will run my &lt;a href=&#34;http://www.skogsmaraton.no&#34;&gt;first
marathon&lt;/a&gt; this weekend (although I have a
slight injury, so depending on how that feels I might pull out at the
last minute).&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Depending on the contracting work I might have more time to blog. I have
a lot of topics in my head, some might appear here and some on
&lt;a href=&#34;http://objc.io&#34;&gt;objc.io&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>DONE</title>
          <link>http://chris.eidhof.nl/post/done/</link>
          <pubDate>Mon, 25 Feb 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/done/</guid>
          <description>&lt;p&gt;In case you haven&amp;#8217;t noticed yet, I&amp;#8217;m organizing an English-speaking iOS
Conference in Berlin called &lt;a href=&#34;http://www.uikonf.com&#34;&gt;UIKonf&lt;/a&gt;, together with my
fellow organizers &lt;a href=&#34;http://twitter.com/fidothe&#34;&gt;Matt&lt;/a&gt; and
&lt;a href=&#34;http://twitter.com/peterbihr&#34;&gt;Peter&lt;/a&gt;. If you are in or around Berlin on May 2nd,
get on the &lt;a href=&#34;http://iosinberlin.launchrock.com&#34;&gt;mailing list&lt;/a&gt; and come join us!&lt;/p&gt;

&lt;p&gt;Organizing this conference is really awesome. It started with a question: why doesn&amp;#8217;t this
conference exist? Then I realized that the only way to make it happen is do it yourself.
Starting something like this feels really empowering: we can definitely have an impact
on our direct environment by just doing stuff. I asked some people that are
more awesome and experienced than myself, then we executed.&lt;/p&gt;

&lt;p&gt;While UIKonf is still a few months away, I am getting better at shipping, and I can
recommend you to do the same. Instead of reading this, write an article. Package
up some software or libraries you have lying around. Organize a meetup.
You&amp;#8217;ll see that it&amp;#8217;ll make you happy!&lt;/p&gt;

&lt;p&gt;A good recommendation from my friend &lt;a href=&#34;http://alper.nl/dingen/&#34;&gt;Alper&lt;/a&gt; is the &lt;a href=&#34;http://www.brepettis.com/blog/2009/3/3/the-cult-of-done-manifesto.html&#34;&gt;Cult
of
Done&lt;/a&gt;
manifesto. Take a minute or two to read it, and then get back at building stuff
and shipping things!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How to keep your classes small and clean</title>
          <link>http://chris.eidhof.nl/post/how-to-keep-your-classes-small-and-clean/</link>
          <pubDate>Sun, 24 Feb 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-to-keep-your-classes-small-and-clean/</guid>
          <description>&lt;p&gt;I&amp;#8217;m a little obsessed with trying to write maintainable, clean code. I&amp;#8217;m not
yet really good at it, but try to become better every day. It started to become
more of an obsession than usual when I realized that a lot of the projects I
work on will someday be taken over by other people, and I don&amp;#8217;t want to be embarassed.&lt;/p&gt;

&lt;p&gt;This explains my recent interest in testing (&lt;a href=&#34;http://iosunittesting.com/&#34;&gt;some&lt;/a&gt;
&lt;a href=&#34;http://blog.securemacprogramming.com/&#34;&gt;interesting&lt;/a&gt;
&lt;a href=&#34;http://qualitycoding.org/&#34;&gt;blogs&lt;/a&gt; on that).&lt;/p&gt;

&lt;p&gt;Although I&amp;#8217;m not yet very good at testing everything, I have two other heuristics
that I use to keep my code maintainable: I try to keep my &lt;code&gt;.m&lt;/code&gt; files under a hundred lines (this is hard), and 
try to keep the number of imports small.&lt;/p&gt;

&lt;p&gt;Here are two scripts that I use to achieve this. The first one shows the &lt;code&gt;.m&lt;/code&gt; files
in your project with their line counts, and sorts them by line count. The bottom of the list
(largest files) are top candidates for refactoring:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -path &#39;./Pods&#39; -prune -o -name &#34;*.m&#34; -exec wc -l &#34;{}&#34; \; | sort -n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other script I wrote generates a &lt;code&gt;.dot&lt;/code&gt; file from your imports, and you can
open it with an app like &lt;a href=&#34;http://www.graphviz.org&#34;&gt;GraphViz&lt;/a&gt; to get a quick overview of how your imports are.
(I tried to keep it under 140 characters so it&amp;#8217;s tweetable).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#34;digraph G {&#34;;grep &#34;import \&#34;&#34; **/*.m|sed &#34;s/.m:#import \&#34;/ /;s/.*\///;s/+/_/g;s/.h\&#34;//&#34;|awk &#34;{print \$2,\&#34;-&amp;gt; \&#34;\$1\&#34;;\&#34;}&#34;;echo &#34;}&#34;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put the above line in a file or in a shell alias, run it and pipe the output to
a file that you can open with GraphViz. I&amp;#8217;m pretty sure this can be done even more effectively using just &lt;code&gt;awk&lt;/code&gt;, but
I&amp;#8217;m not an expert yet. Bonus points for the shortest solution!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>New Things</title>
          <link>http://chris.eidhof.nl/post/new-things/</link>
          <pubDate>Thu, 31 Jan 2013 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/new-things/</guid>
          <description>&lt;p&gt;Over Christmas, I read &lt;a href=&#34;http://www.amazon.de/Antifragile-Things-That-Gain-Disorder/dp/1400067820&#34;&gt;Antifragile&lt;/a&gt; by Taleb. The book has had quite an impact on me, and I decided to change some things. Long story short: I want to be open to positive black swans. A positive black swan is an event that will happen with a low probability, but if it does happen, it has a big impact.&lt;/p&gt;

&lt;p&gt;Taleb&amp;#8217;s strategy for investing is to invest mostly in very safe things, and
make small bets with a limited downside, but an unlimited upside. He calls this
the dumbbell strategy.  Applied to my own business as a freelance software
developer, this means that I will be continuing and expanding my  freelancing
business for most of the time.  But I am also spending time on projects that
have a limited cost, but an unlimited upside. I&amp;#8217;m not expecting that most of
these projects will be a wild success, but you only have to win big once&amp;#8230;&lt;/p&gt;

&lt;p&gt;One of these projects is organizing a conference. This will definitely not have an unlimited financial upside (best case, we might make a little bit of money, but it would be way more effective to spend that time freelancing). However, I do think that very nice things will happen because of this: meet more people, get known a bit better in the tech scene, and work together with really interesting people.&lt;/p&gt;

&lt;p&gt;Also, I have a renewed focus on building and maintaining my own apps. I&amp;#8217;m working on an update for &lt;a href=&#34;http://eidhof.nl/trackme&#34;&gt;TrackMe&lt;/a&gt; (I know it needs a better website and UI). I have some other interesting ideas for new apps too, hopefully I can move some of these projects forward so they can be released publicly.&lt;/p&gt;

&lt;p&gt;On a personal level, I am planning to go to more parties. This is directly copied from Taleb. At parties, you have a chance of meeting very interesting people. Probably at most parties you&amp;#8217;ll have a good time, but won&amp;#8217;t meet anybody new who&amp;#8217;s interesting. However, when you do, all the other parties will have been worth it.&lt;/p&gt;

&lt;p&gt;Also, I want to work together with more people. One of the ways this will happen is having an office instead of working from home. Another way will be by hiring more people. If you&amp;#8217;re interested in learning iOS Development, or if you&amp;#8217;re a copywriter, get in touch.&lt;/p&gt;

&lt;p&gt;I wonder how this strategy will work. I see it as something long-term, the payoff might only come in a decade. Let&amp;#8217;s see.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lighter UIViewControllers</title>
          <link>http://chris.eidhof.nl/post/lighter-uiviewcontrollers/</link>
          <pubDate>Mon, 17 Dec 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/lighter-uiviewcontrollers/</guid>
          <description>&lt;p&gt;Recently, I&amp;#8217;ve been a bit obsessed with writing simpler code. It
happened because I passed on some projects to other programmers. I would
like to feel minimally embarrassed when doing so.&lt;/p&gt;

&lt;p&gt;In the projects I&amp;#8217;ve taken over from other people, one of the most
common problems is that view controller code is big and complicated.
In this article, we&amp;#8217;ll look at some ways to make the view controller
smaller and thus simpler. In a project I&amp;#8217;m working on currently, we have
about 150 classes, and almost none of them is larger than 100 lines. The
ones that are larger than that are on the top of my refactoring list.&lt;/p&gt;

&lt;h1&gt;Separate out UITableViewDataSource and UITableViewDelegate&lt;/h1&gt;

&lt;p&gt;One of the first things I often do is create a separate class for the
tableView&amp;#8217;s data source and delegate. Just create a new class, take all
the methods that start with &lt;code&gt;tableView:&lt;/code&gt; and put them in there. The
compiler will then show you which things are missing in that class (e.g.
instance variables), and you pass them on. Then you can remove them from
the view controller.&lt;/p&gt;

&lt;h1&gt;Don&amp;#8217;t do domain logic&lt;/h1&gt;

&lt;p&gt;Most of my apps are backed by a Core Data stack (but this is true for any
kind of data store). I Try to do as little domain logic as possible. For
Core Data, my favorite trick is to add a category to the generated
models where I put my logic. For example, instead of doing this in your
view controller:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (Department*)getRootDepartment:(Department*)department {
  if(department.parent == nil) return department;
  return [self getRootDepartment:department.parent];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do this in &lt;code&gt;Department+Extensions.m&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (Department*)rootDepartment {
  if(self.parent == nil) return self;
  return [self rootDepartment];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even for small methods like this, it helps a lot to keep your view
controllers small. You also have the added benefit that it&amp;#8217;s much easier
to reuse this code.&lt;/p&gt;

&lt;h1&gt;Don&amp;#8217;t do webservice logic&lt;/h1&gt;

&lt;p&gt;Don&amp;#8217;t call and parse a webservice request in your view controller.&lt;/p&gt;

&lt;p&gt;I always create a separate set of classes that do the dealing with
webservices. It depends how complicated your webservice / persistency
is, but I mostly have a class called &lt;code&gt;Webservice&lt;/code&gt; that gives you
high-level methods to call the webservice. Either the methods accept
callbacks or I use KVO (more about that later). It uses the &amp;#8220;fire and
forget&amp;#8221; approach: you tell the webservice that you want something and
then forget, assume it will get back to you at some point.&lt;/p&gt;

&lt;p&gt;The webservice class calls the API and turns the API results into domain
objects. This functionality is often achieved by multiple classes that
are used by the webservice, but that&amp;#8217;s a topic for a later post.&lt;/p&gt;

&lt;h1&gt;Don&amp;#8217;t create complicated view hierarchies&lt;/h1&gt;

&lt;p&gt;Don&amp;#8217;t set up complicated view hierarchies in your view controller.
Personally, I&amp;#8217;m a big fan of designing my views in a nib/xib/storyboard.
But even if you don&amp;#8217;t, I think it&amp;#8217;s better to compose several views into
a new view. For example, if you want a date slider, it&amp;#8217;s better to
create the view hierarchy for that (the labels at the axes, a label
representing the current date and the UISlider) in a separate class.&lt;/p&gt;

&lt;h1&gt;Create child view controllers&lt;/h1&gt;

&lt;p&gt;Since iOS 5, it&amp;#8217;s very easy to create child view controllers. Use this
functionality. It makes your life easier. This is mostly useful for iPad
apps, but might be useful for iPhone apps as well. A classical example
of this is the split view, but in any screen where you have components
that are almost independent it might be useful.&lt;/p&gt;

&lt;h1&gt;Use KVO&lt;/h1&gt;

&lt;p&gt;Key value observing can make your life a lot easier. It&amp;#8217;s also a bit
tricky sometimes, so you do need to spend some time to learn it, and you
will probably make some mistakes (I still get tripped up every now and then).&lt;/p&gt;

&lt;p&gt;One example
where KVO really shines is the &lt;code&gt;NSFetchedResultsController&lt;/code&gt;. It listens
to changes in core data objects and can be used to implement a
&lt;code&gt;UITableViewDataSource&lt;/code&gt; or &lt;code&gt;UICollectionViewDataSource&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, suppose you have a list of
&lt;code&gt;Departments&lt;/code&gt;. Then you want to refresh that list from the API. In your
view controller, you fire a off a request like &lt;code&gt;[webservice
reloadDepartments]&lt;/code&gt; and then forget. Once the webservice updates the
Core Data managed objects, magic happens: Because you implemented your
&lt;code&gt;UITableViewDataSource&lt;/code&gt; using an &lt;code&gt;NSFetchedResultsController&lt;/code&gt;, it gets
refreshed automatically.&lt;/p&gt;

&lt;p&gt;KVO by itself can be a bit hairy sometimes, and there are small
libraries like
&lt;a href=&#34;https://github.com/th-in-gs/THObserversAndBinders&#34;&gt;THObserversAndBinders&lt;/a&gt;
that make things easier.&lt;/p&gt;

&lt;h1&gt;Other ideas?&lt;/h1&gt;

&lt;p&gt;This is just a list of things that I could come up with and common
refactorings I use. I&amp;#8217;m sure there are a lot of things I forgot, let me
know your tips and I&amp;#8217;ll add them to the article.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Implementing Value Objects in Objective C</title>
          <link>http://chris.eidhof.nl/post/implementing-value-objects-in-objective-c/</link>
          <pubDate>Sun, 16 Dec 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/implementing-value-objects-in-objective-c/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Value_object&#34;&gt;Value Objects&lt;/a&gt; are objects that hold simple data. This article is about creating such value objects. I use them a lot in my code, because they are robust and keep the code simple. Note that it&amp;#8217;s not about &lt;code&gt;NSValue&lt;/code&gt;, but about simple objects with simple data.&lt;/p&gt;

&lt;p&gt;Implementing value objects should be easy, but there are some slightly
tricky bits. So let&amp;#8217;s look at the requirements:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;We want to create value objects quickly (i.e. an &lt;code&gt;initWith:&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;The created objects should be immutable&lt;/li&gt;
&lt;li&gt;The created objects should be equal when they have equal values&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Suppose we want to create &lt;code&gt;Person&lt;/code&gt; objects with properties &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;birthDate&lt;/code&gt;, then our interface looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Person : NSObject
- (id)initWithName:(NSString*)name birthDate:(NSDate*)birthDate;
@property (nonatomic, copy, readonly) NSString* name;
@property (nonatomic, strong, readonly) NSDate* birthDate;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important thing to notice here is that the properties are
&lt;code&gt;readonly&lt;/code&gt;. However, the modern runtime still generates instance
variables for us, that are prefixed by a &lt;code&gt;_&lt;/code&gt;. Our implementation looks
like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@implementation Person

- (id)initWithName:(NSString*)name birthDate:(NSDate*)birthDate {
  self = [super init];
  if(self) {
    _name = [name copy];
    _birthDate = birthDate;
  }
  return self;
}
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the modern runtime, you don&amp;#8217;t have to use &lt;code&gt;synthesize&lt;/code&gt;. If you do,
then your instance variables get different names (without the
underscore).&lt;/p&gt;

&lt;p&gt;Now for the equality, we implement the method &lt;code&gt;isEqual:&lt;/code&gt;. There is an
&lt;a href=&#34;http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html&#34;&gt;excellent article&lt;/a&gt; by Mike Ash, however, there is a mistake in there. Following his advice, our first (incorrect) implementation looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (BOOL)isEqual:(id)obj {
  if(![obj isKindOfClass:[Person class]]) return NO;

  Person* other = (Person*)obj;
  BOOL nameIsEqual = [_name isEqual:other-&amp;gt;_name];
  BOOL dateIsEqual = [_date isEqual:other-&amp;gt;_date];
  return nameIsEqual &amp;amp;&amp;amp; dateIsEqual;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is a problem here: if one of the two properties is &lt;code&gt;nil&lt;/code&gt;, then
&lt;code&gt;isEqual:&lt;/code&gt; will return &lt;code&gt;NO&lt;/code&gt;. This is because methods sent to &lt;code&gt;nil&lt;/code&gt;
always return &lt;code&gt;NO&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;. Even &lt;code&gt;[nil isEqual:nil]&lt;/code&gt; returns &lt;code&gt;NO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Therefore, our second, correct implementation looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (BOOL)isEqual:(id)obj {
  if(![obj isKindOfClass:[Person class]]) return NO;

  Person* other = (Person*)obj;
  BOOL nameIsEqual = _name == _other-&amp;gt;_name || [_name isEqual:other-&amp;gt;_name];
  BOOL dateIsEqual = _date == _other-&amp;gt;_date || [_date isEqual:other-&amp;gt;_date];
  return nameIsEqual &amp;amp;&amp;amp; dateIsEqual;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To implement the hashing function, I would like to recommend following Mike&amp;#8217;s advice.&lt;/p&gt;

&lt;h1&gt;Bonus&lt;/h1&gt;

&lt;p&gt;Finally, as a bonus, let&amp;#8217;s also implement &lt;code&gt;NSCoding&lt;/code&gt;, so we can
serialize our objects. First change the interface of &lt;code&gt;Person&lt;/code&gt; to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface Person : NSObject &amp;lt;NSCoding&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The implementation is now very simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (id)initWithCoder:(NSCoder*)aDecoder {
  self = [super init];
  if(self) {
    _name = [aDecoder decodeObjectForKey:kName]; 
    _date = [aDecoder decodeObjectForKey:kDate]; 
  }
  return self;
}

- (void)encodeWithCoder:(NSCoder*)aCoder {
  [aCoder encodeObject:_name forKey:kName];
  [aCoder encodeObject:_date forKey:kDate];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The two constants &lt;code&gt;kName&lt;/code&gt; and &lt;code&gt;kDate&lt;/code&gt; are declared in the implementation
file, above the &lt;code&gt;@implementation&lt;/code&gt; directive:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;static NSString* const kName = @&#34;name&#34;;
static NSString* const kDate = @&#34;date&#34;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voila, now we can create objects, read their properties, serialize them
to disk and read them back in. Some catches: when you add a new
property, you have to make sure to update the code in lots of places:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;Add the property to the interface file&lt;/li&gt;
&lt;li&gt;Add the parameter to &lt;code&gt;initWith:&lt;/code&gt;, and also update the callers of that
method&lt;/li&gt;
&lt;li&gt;Add a comparison to &lt;code&gt;isEqual:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Update the &lt;code&gt;hash&lt;/code&gt; function&lt;/li&gt;
&lt;li&gt;Add the method to both &lt;code&gt;initWithCoder:&lt;/code&gt; and &lt;code&gt;encodeWithCoder:&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;It helps to have some tests in place that check this for you.&lt;/p&gt;

&lt;p&gt;The full code of the examples (without the &lt;code&gt;hash&lt;/code&gt; function) is &lt;a href=&#34;https://gist.github.com/78b3ce0edbcdf0d202e2&#34;&gt;on github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: changed the &lt;code&gt;name&lt;/code&gt; attribute to be &lt;code&gt;copy&lt;/code&gt; instead of &lt;code&gt;strong&lt;/code&gt;, &lt;a href=&#34;https://twitter.com/CocoaPimper/status/280335607971074050&#34;&gt;thanks to Christian Kienle&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How to add a new Unit Test target and OCMock to an existing XCode project</title>
          <link>http://chris.eidhof.nl/post/how-to-add-a-new-unit-test-target-and-ocmock-to-an/</link>
          <pubDate>Mon, 03 Dec 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-to-add-a-new-unit-test-target-and-ocmock-to-an/</guid>
          <description>&lt;p&gt;I had some trouble today trying to add Unit Tests to an existing project that uses &lt;a href=&#34;http://cocoapods.org&#34;&gt;CocoaPods&lt;/a&gt;. So I decided to do a quick writeup of how I got it working:&lt;/p&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Create a new project called &amp;#8216;BetterTodoList&amp;#8217;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a new Podfile with the following contents&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;pre&gt;&lt;code&gt;platform :ios, 6.0
pod &#39;AFNetworking&#39;&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;&lt;li&gt;&lt;p&gt;Close BetterTodoList in XCode, and open the workspace (as instructed by CocoaPods)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run, and see that everything still works&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write some legacy code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Realize you need Unit Tests:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;File -&amp;gt; New -&amp;gt; Target&lt;/li&gt;
&lt;li&gt;Choose Other -&amp;gt; Cocoa Touch Unit Test Bundle&lt;/li&gt;
&lt;li&gt;Name it &amp;#8220;BetterTodoListTests&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Press Cmd+U. If nothing happens, check if Product &amp;gt; Test is grayed out in the menu. In that case, press Cmd+&amp;lt;, select Test and add the test using the + button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the following lines to your Podfile, and re-run &amp;#8220;pod install&amp;#8221;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;target &#39;BetterTodoListTests&#39;, :exclusive =&amp;gt; true do
pod &#39;OCMock&#39; 
end&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Import &lt;code&gt;OCMock.h&lt;/code&gt; in one of your files and see that it&amp;#8217;s working.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Profit&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Addendum: If you still have problems because the test target cannot access the compiled objects (e.g. &amp;#8220;Symbol Not Found&amp;#8221; errors), select the project in the organizer, then select the Test target, go to &amp;#8220;Bundle Loader&amp;#8221; and add the following values for both Debug and Release: &lt;code&gt;$(BUILT_PRODUCTS_DIR)/BetterTodoList.app/BetterTodoList&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>My presentation at the Berlin HUG</title>
          <link>http://chris.eidhof.nl/post/my-presentation-at-the-berlin-hug/</link>
          <pubDate>Fri, 02 Nov 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/my-presentation-at-the-berlin-hug/</guid>
          <description>&lt;p&gt;Last week I gave a short presentation about lenses and &lt;a href=&#34;http://hackage.haskell.org/package/fclabels&#34;&gt;fclabels&lt;/a&gt; at the Berlin Haskell Users Group. The source for the slides and some accompanying literate Haskell files are now in a &lt;a href=&#34;https://github.com/chriseidhof/presentation-lenses&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Adding push notifications to an app</title>
          <link>http://chris.eidhof.nl/post/adding-push-notifications-to-an-app/</link>
          <pubDate>Thu, 01 Nov 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/adding-push-notifications-to-an-app/</guid>
          <description>&lt;p&gt;Last week, I&amp;#8217;ve built an app that&amp;#8217;s quite simple: there are categories, and in the categories are messages. People can subscribe to a category and get a push notification when there&amp;#8217;s a new message in the category, or when a significant change was made to the message. The badge icon should update appropriately, showing the number of unread messages. There are lots of tricky things when implementing this, and the point of this article is to explore them.&lt;/p&gt;

&lt;p&gt;In a naive approach, you can start by implement the application delegate&amp;#8217;s &lt;code&gt;application:didReceiveRemoteNotification&lt;/code&gt;. This method is called when you receive a push notification. However, it is only called when your application is running. When your application is not running, this method doesn&amp;#8217;t get called. You also need to implement &lt;code&gt;application:didFinishLaunchingWithOptions:&lt;/code&gt;, and check if there is a push notification in the options (this dictionary gets set when you open the app by clicking on the notification).&lt;/p&gt;

&lt;p&gt;The problem, however, is that not all push notifications arrive. For example, if you get 5 push notifications, but open the app via the home screen, you will not get any notification in the options dictionary, and you won&amp;#8217;t get a &lt;code&gt;didReceiveRemoteNotification&lt;/code&gt; either.&lt;/p&gt;

&lt;p&gt;To do push notifications correctly, you will need to keep a list on the server, and on application startup your app needs to synchronise with the server. That way, you can mark the right and also tell the server that you have seen the push notification.&lt;/p&gt;

&lt;p&gt;Now, when you exit the app you can set the badge count based on the number of unread push notification. However, the server needs to know this number as well, so that it can correctly set the badge number in the next push notification that is sent. When you read a message that was marked by the push notification, you need to tell the server as well. (Edge-case: when you read the message in offline mode, you will need to tell the server once you&amp;#8217;re back online).&lt;/p&gt;

&lt;p&gt;In order to do push notifications right, the client and server need to communicate a lot. Hopefully, in your next project, you can read this article so you don&amp;#8217;t have to find these things out while you are programming.&lt;/p&gt;

&lt;p&gt;In a next article, I will sketch the application architecture I used for the app above.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>More Interface Builder</title>
          <link>http://chris.eidhof.nl/post/more-interface-builder/</link>
          <pubDate>Sun, 23 Sep 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/more-interface-builder/</guid>
          <description>&lt;p&gt;When I started iPhone programming, I built most of my interfaces in
code. It was much easier: full control over your interface. Sometimes I
would start in Interface Builder, but once I stumbled upon limitations I
would rewrite the whole thing in code.&lt;/p&gt;

&lt;p&gt;After learning some more things about Interface Builder, I started using
it more and more. These days, I try to do almost every UI in Interface
Builder. Apple has made it a lot easier for us, too: designing your
table view cells in Interface Builder was quite easy already, but is even
easier with Storyboards.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s one example where I used to revert to code, but now use nibs. One
of the projects I worked on required a horizontally paging scrollview.
Each page was for answering a question, and contained a description and
a slider. If you want to play with the example, please download &lt;a href=&#34;https://github.com/chriseidhof/interface-builder-test&#34;&gt;the
project&lt;/a&gt; from
github. Let&amp;#8217;s see how to do this using mostly IB:&lt;/p&gt;

&lt;p&gt;Start by creating a view controller and adding a scroll view to it.
Create an outlet scrollView on the view controller.
Then, create a new empty XIB. We add a single UIView to the XIB
with nested subviews (the text label and the slider). Then, in the view
controller, add a method to setup the pages and call it from
&lt;code&gt;viewDidLoad&lt;/code&gt;. Note that the method is a bit long, normally you would
probably factor it into components:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)setupPages {
    pages = [NSMutableArray arrayWithCapacity:NUM_PAGES];

    CGFloat pageWidth = self.scrollView.bounds.size.width;
    CGRect pageFrame = self.scrollView.bounds;

    self.scrollView.contentSize = CGSizeMake(pageWidth*NUM_PAGES, self.scrollView.bounds.size.height);

    for(int i = 0; i &amp;lt; NUM_PAGES; i++) {
        NSArray* topLevelObjects = [[NSBundle mainBundle] loadNibNamed:pageNibName owner:nil options:nil];
        UIView* pageView = [topLevelObjects lastObject];
        pageFrame.origin.x = pageWidth * i;
        pageView.frame = pageFrame;
        [self.scrollView addSubview:pageView];
        [pages addObject:pageView];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this code to work, it&amp;#8217;s important that there is only one view at the
top-level of the xib.  The above code creates the pages and adds them to
the subviews. However, the separate pages don&amp;#8217;t have a way to access the
label and slider. A crude way to do this is give both of them a tag, and
use something like &lt;code&gt;[pageView viewWithTag:LABEL_TAG]&lt;/code&gt;. Indeed, for small
views this can work, but it gets messy and hard to maintain quickly.&lt;/p&gt;

&lt;p&gt;A better way is to add a new subclass of UIView, named &lt;code&gt;CEPageView&lt;/code&gt; and
change the root-element of PageView.xib to that &lt;code&gt;UIView&lt;/code&gt; subclass in the
Identity Inspector. If you open the Assistant Editor, you can create
outlets on that newly created class and connect them to the XIB. Note
that normally, you would drag from a view to the File&amp;#8217;s Owner, now you
drag to the root element in the Top Level Objects. Change the body of
the for-loop to this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    NSArray* topLevelObjects = [[NSBundle mainBundle] loadNibNamed:pageNibName owner:nil options:nil];
    CEPageView* pageView = [topLevelObjects lastObject]; // change
    pageFrame.origin.x = pageWidth * i;
    pageView.frame = pageFrame;
    [self.scrollView addSubview:pageView];
    [pages addObject:pageView];
    // Add these lines:
    pageView.title.text = [NSString stringWithFormat:@&#34;Page %d&#34;, i+1];
    pageView.slider.value = i / 3.0;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also override the layoutSubviews of the UIView if you want some
programmatic control over the layout.&lt;/p&gt;

&lt;p&gt;I hope that this technique will make you more productive. I&amp;#8217;m no expert
on Interface Builder, so if you have any tips let me know!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: Ole Begemann recommends using UINib instead of &lt;code&gt;loadNibNamed:owner&lt;/code&gt;, it should be faster when loading a nib multiple times. I haven&amp;#8217;t tested it yet, but will check it out. See also: &lt;a href=&#34;http://oncocoa.blogspot.de/2011/02/nsbundle-vs-uinib-performance.html&#34;&gt;NSBundle vs. UINib performance
&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Traveling alone</title>
          <link>http://chris.eidhof.nl/post/traveling-alone/</link>
          <pubDate>Thu, 26 Jul 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/traveling-alone/</guid>
          <description>&lt;p&gt;I like traveling alone. Here are some things I found out when traveling alone:&lt;/p&gt;

&lt;p&gt;Eating alone in restaurants is fine. I used to really dislike it, because I felt stared at. It got on my nerves. Once I went for mexican food in a Denver restaurant on the tech campus, and on Saturday night the restaurant was filled with families. I was seated in the middle of the room, and had a really big table just for me. This was quite uncomfortable, but I&amp;#8217;ve gotten used to it now, and it&amp;#8217;s very refreshing. As a personal rule, I try not to use my phone when having dinner (either with friends or alone). If I do want to do something while waiting for my meal, I&amp;#8217;ll read a book or write in a notebook.&lt;/p&gt;

&lt;p&gt;The freedom of traveling alone is great. Especially when you&amp;#8217;re backpacking: once you hit the road you can go wherever you want to go. Many songs have been sung about this feeling, and many books have been written. If you&amp;#8217;ve never experienced it: do it!&lt;/p&gt;

&lt;p&gt;For some reason, I used to feel the pressure to socialize. However, it&amp;#8217;s fine not to do that. Most of the time, I like to meet people and talk to them. However, I also like spending a day sipping caf? con leche and eating tapas without really talking to somebody. It clears my mind.&lt;/p&gt;

&lt;p&gt;The way you travel and the places you stay can also have an important effect on socializing: I prefer to use public transport. In a rental car, you can be pretty sure to not meet anybody. Likewise, in a hostel it&amp;#8217;s much easier to meet new people than in a hotel. And joining organized activities is a sure way to meet new people: even if you&amp;#8217;re really picky, if you meet enough people you&amp;#8217;re bound to meet somebody you really like. I made some great friends over the years by joining walking tours or pub crawls.&lt;/p&gt;

&lt;p&gt;There is the obligatory quote: &amp;#8220;happiness is only real when shared&amp;#8221;, which is very true. Traveling with friends is just as awesome. However, you&amp;#8217;ll meet people along the way with who you will share the moments. For me, it&amp;#8217;s easier to meet people when I&amp;#8217;m traveling alone than when I&amp;#8217;m traveling with friends: with friends, I tend to isolate a bit more, and don&amp;#8217;t make many new friends.&lt;/p&gt;

&lt;p&gt;Safe travels!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Finding My Most Influential Twitter Followers</title>
          <link>http://chris.eidhof.nl/post/finding-my-most-influential-twitter-followers/</link>
          <pubDate>Tue, 29 May 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/finding-my-most-influential-twitter-followers/</guid>
          <description>&lt;p&gt;I spent an afternoon trying to find out who of my Twitter followers is the most influential. I wrote the script to fetch the data in Ruby, and stored the data in MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, we&amp;#8217;ll need to set up some things. Make sure you have a recent version of Ruby installed, and install the following gems:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install twitter mongo bson_ext
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although the &lt;code&gt;bson_ext&lt;/code&gt; isn&amp;#8217;t really necessary, it will make things a bit faster.&lt;/p&gt;

&lt;p&gt;Also install mongodb. One of the easier ways to do this is using &lt;a href=&#34;http://mxcl.github.com/homebrew/&#34;&gt;homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install mongodb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to fire up mongodb, and we&amp;#8217;re all set on the client.&lt;/p&gt;

&lt;p&gt;The last step is to get an API key at Twitter. Go to &lt;a href=&#34;https://dev.twitter.com/&#34;&gt;&lt;a href=&#34;https://dev.twitter.com/&#34;&gt;https://dev.twitter.com/&lt;/a&gt;&lt;/a&gt; and create a new application. Don&amp;#8217;t worry about the details too much.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fetching a list of Twitter follower IDs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, we will write a file called &lt;code&gt;twitter-config.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Twitter.configure do |config|
  config.consumer_key = &#39;CONSUMER_KEY&#39;
  config.consumer_secret = &#39;CONSUMER_SECRET&#39;
  config.oauth_token = &#39;OAUTH_TOKEN&#39;
  config.oauth_token_secret = &#39;O_AUTH_TOKEN_SECRET&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure to replace the right-hand sides by the appropriate values (they should match the twitter application you just created).&lt;/p&gt;

&lt;p&gt;The script for fetching your Twitter follower ids is now extremely simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;twitter&#39;
require &#39;twitter-config.rb&#39;

follower_ids = Twitter.follower_ids
File.open(&#34;followers&#34;, &#39;w&#39;) { |f| 
  f.write(follower_ids.collection.join(&#34;\n&#34;)) 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are just using the Twitter API to fetch the follower ids and store them in a file. The last part is essential when working with APIs and larger datasets: make sure you store intermediate results. Often, computations can take a long time, and by storing intermediate results you can resume where you&amp;#8217;ve left off.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write the script to fetch the data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Again, this script is very simple. We iterate over the list of followers, and make the corresponding Twitter API call. One thing to note here is that you will hit the rate limit if you have more than 350 followers. Therefore, the script checks if you already have fetched the data for a follower, and skips fetching the data. If you hit the rate limit, simply wait some minutes and run the script again. Eventually, it will finish.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;twitter&#39;
require &#39;database-config.rb&#39;
require &#39;twitter-config.rb&#39;

File.open(&#34;followers&#34;).each_line {|follower_id_s| 
  follower_id = follower_id_s.to_i

  if COLL.find(&#34;id&#34; =&amp;gt; follower_id).count &amp;gt; 0 then
    puts &#34;Already have data for #{follower_id}&#34;
  else
    puts &#34;Fetching data for #{follower_id}&#34;
    follower_hash = Twitter.user(follower_id).attrs
    COLL.insert follower_hash
  end
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;database-config.rb&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;mongo&#39;

connection = Mongo::Connection.new
db = Mongo::Connection.new.db(&#34;twitterinsight&#34;)
COLL = db.collection(&#34;followers&#34;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It sets up a global variable &lt;code&gt;COLL&lt;/code&gt; that you can use in the scripts for analyzing and populating the database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Analyze the data&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you have filled your database with data, you can analyze it by running queries on it. The reason I wrote this code is because I wanted to know who my most influential followers were:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;rubygems&#39;
require &#39;database-config.rb&#39;

COLL.find().
  sort([&#39;followers_count&#39;, :desc]).
  limit(50).
  to_a.map { |x| 
  ratio = (100 * (x[&#39;friends_count&#39;].to_f / 
                x[&#39;followers_count&#39;].to_f)).to_i
  statuses = x[&#39;statuses_count&#39;]
  puts &#34;#{x[&#39;screen_name&#39;]} - &#34; +
       &#34;#{x[&#39;followers_count&#39;]} / #{x[&#39;friends_count&#39;]}&#34; +
       &#34;, #{ratio} [#{statuses}] @ #{x[&#39;location&#39;]}&#34; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, this script prints the screen name, number of followers, number of friends, the
friends/followers ratio, the amount they tweet and the location. Here&amp;#8217;s some example output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;copumpkin - 22397 / 368, 1 [3597] @ Boston, MA
DotSauce - 15641 / 12400, 79 [7377] @ NC, USA
dominiek - 14487 / 1085, 7 [5342] @ AMS, SFO, TYO
TivoliUtrecht - 10935 / 442, 4 [3950] @ Utrecht, The Netherlands
theSeanCook - 10006 / 1137, 11 [2345] @ San Francisco
Duetschpire - 8194 / 584, 7 [2112] @ Australia
Polledemaagt - 7518 / 2563, 34 [37721] @ Gent, London, Amsterdam
NetBlueWeb - 6651 / 5520, 82 [9] @ British Columbia
andreisavu - 6648 / 6497, 97 [11496] @ Bucharest, Romania
StackMob - 5571 / 1835, 32 [1015] @ SF
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Changing Tech Education</title>
          <link>http://chris.eidhof.nl/post/changing-tech-education/</link>
          <pubDate>Wed, 16 May 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/changing-tech-education/</guid>
          <description>&lt;p&gt;Sometimes I talk to my friends about why I want to become rich. It&amp;#8217;s to solve the money problem, and once it&amp;#8217;s solved, I hope to have the time, connections  and status to work on bigger problems. I already know exactly what I want to try once I&amp;#8217;m there: change tech education.&lt;/p&gt;

&lt;p&gt;When I did my bachelor&amp;#8217;s degree in computer science, I was quite bored most of the time. Officially, you were supposed to work on it at least 40 hours per week, but for me and most of my friends it was closer to 10 hours. The other time we would spend working, or having a hangover.&lt;/p&gt;

&lt;p&gt;One of the causes why I didn&amp;#8217;t have to work so hard at university is the different levels of experience. When I started, I already had a few years of building websites under my belt. For example: I worked as the main developer at one of biggest soccer sites, and at the same time I had to take a course on the basics of HTML. Obviously, this disconnect was a problem for me, and for a lot of other motivated students around me. I want to solve this problem.&lt;/p&gt;

&lt;p&gt;My solution is a program similar to a bachelor&amp;#8217;s degree in length, but a lot more intense. In order to enter this program, you have to show your aptitude at programming. The program will have teachers from both academia and industry, because I think both theory and practice are very important. Only the best students and teachers can participate. Students have to study theory, but will also spent a lot of time doing internships and real projects. They will learn standard theory, but also topics such as node.js, statistics for big data analysis, native mobile programming, HTML5, git internals, et cetera. For each batch of students, I want to get financing from big companies who then get access to the talent.&lt;/p&gt;

&lt;p&gt;To pull this off will be a huge and hard job, but I look forward to it. I&amp;#8217;m still in the exploratory phase, and not sure whether I will actually do it, but at this moment in time I&amp;#8217;m talking with people in both industry and academia to see whether it&amp;#8217;s feasible. Instead of a bachelor&amp;#8217;s program, a very good first step might be to organize a Hacker&amp;#8217;s Summer School: 6 weeks of learning and hacking together with other talented hackers and awesome teachers.&lt;/p&gt;

&lt;p&gt;Part of me thinks I&amp;#8217;m too young, inexperienced and not connected enough to do this. But I still think I should at least explore whether it&amp;#8217;s possible and should try. I have no idea in which form exactly. I don&amp;#8217;t know what the topics are going to be, who the teachers are or even what the team should look like. I&amp;#8217;ll keep you posted!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Radical Friendship</title>
          <link>http://chris.eidhof.nl/post/radical-friendship/</link>
          <pubDate>Tue, 15 May 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/radical-friendship/</guid>
          <description>&lt;p&gt;A few months ago I wrote about &lt;a href=&#34;http://chris.eidhof.nl/post/14911964453/radical-honesty&#34;&gt;radical honesty&lt;/a&gt;. I tried being more honest, but in practice it&amp;#8217;s quite awkward. Our society isn&amp;#8217;t really used to being completely honest and open. For example, if a friend wears something I really dislike, I won&amp;#8217;t tell him. It&amp;#8217;s just my opinion, and by expressing it I don&amp;#8217;t think I&amp;#8217;ll help anybody.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://en.wikipedia.org/wiki/How_to_Win_Friends_and_Influence_People&#34;&gt;How To Win Friends and Influence People&lt;/a&gt;, Dale Carnegie says things like &amp;#8221;
&amp;#8220;Don&amp;#8217;t criticize, condemn or complain&amp;#8221;, &amp;#8220;The only way to get the best of an argument is to avoid it&amp;#8221; and &amp;#8220;Show respect for the other person&amp;#8217;s opinions. Never say, &amp;#8216;You&amp;#8217;re wrong.&amp;#8217;&amp;#8221;. In a way, you could interpret these statements as: don&amp;#8217;t be honest when you disagree with somebody.&lt;/p&gt;

&lt;p&gt;Recently, I was reading &lt;a href=&#34;http://www.amazon.com/How-Proust-Change-Your-Life/dp/0679779159&#34;&gt;How Proust Can Change Your Life&lt;/a&gt; by my favorite modern philosopher Alain de Botton. He writes that Proust deliberately tried to avoid truth in friendship, lavishing his friends with compliments, sincere or not. This is pretty much the exact opposite of radical honesty, and equally exciting for me. A very interesting approach, although I don&amp;#8217;t think I&amp;#8217;ll use it.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Starting new projects</title>
          <link>http://chris.eidhof.nl/post/starting-new-projects/</link>
          <pubDate>Fri, 27 Apr 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/starting-new-projects/</guid>
          <description>&lt;p&gt;One of the most exciting things for me is starting new projects. Each time I start to build a new app, I get way too excited and see rainbows and ponies everywhere. &amp;#8220;This time it&amp;#8217;s going to beautiful, easy, quick to finish and lots of fun&amp;#8221;. There is a blank slate and in my mind everything fits together perfectly.&lt;/p&gt;

&lt;p&gt;However, in reality, after I&amp;#8217;ve spent some time on a project, I start to see the design mistakes I made. Sometimes I even realize that the product/project itself isn&amp;#8217;t a good idea. The longer I work on something, the harder it is to finish it. It definitely helps to work with a team, as you can pull each other through the hard times. When working with clients, it&amp;#8217;s a lot easier to push yourself to finish something.&lt;/p&gt;

&lt;p&gt;I might have found a way to utilize the starting of new projects in order to be more productive. In an &lt;a href=&#34;http://chris.eidhof.nl/post/9624114465/lots-of-test-projects&#34;&gt;earlier post&lt;/a&gt;, I wrote about how I create lots of test projects. I still do this, and sometimes when I am not looking forward to implementing some new feature, I instead start implementing it in a blank slate test project. As an additional advantage, the new code will probably be nicely isolated and loosely coupled.&lt;/p&gt;

&lt;p&gt;Anyway, to get back to starting new projects: I think I will struggle with this throughout the rest of my life. It will always be more attractive to start something new than to finish something. However, realizing this problem is the first step in combatting it. And by using tricks like the one above I think it could even be bent to an advantage.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Berlin Tech Meetups</title>
          <link>http://chris.eidhof.nl/post/berlin-tech-meetups/</link>
          <pubDate>Mon, 26 Mar 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/berlin-tech-meetups/</guid>
          <description>&lt;p&gt;I&amp;#8217;m trying to come up with a list of tech-related meetups in Berlin. This list
is far from complete: please help me to add more meetups, and improve the
descriptions. Just &lt;a href=&#34;mailto:chris@eidhof.nl&#34;&gt;send me an email&lt;/a&gt; with corrections and/or suggestions.  A next step would be to create a Google Calendar just like Peter
Robinett did for &lt;a href=&#34;http://www.bubblefoundry.com/dutch-tech-meetups/&#34;&gt;Dutch Tech
Meetups&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For people who don&amp;#8217;t speak German: Germans are very friendly and speak
English, especially the techies. Sometimes the announcements, webpages or conversations are in German, but Germans are very polite and quickly switch to English when
necessary.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the preliminary list I&amp;#8217;ve come up with:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/berlin-gtug/&#34;&gt;Berlin Google Technology User Group&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We meet regularly every 6 -  8 weeks to talk about recent developments in Google
technologies or to spread practical knowledge through presentations. Next
meeting: March 26th.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Berlin-HTML5-User-Group/&#34;&gt;Berlin HTML5 User Group&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This group was created to gather the HTML5 community in Berlin. Meetups/Webinars will be organized every month once moment we will have a certain number of people. All HTML5, CSS or Javascript enthusiasts (Developers, designers, webmasters&amp;#8230;) are welcome to join.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/The-Berlin-Semantic-Web-Meetup-Group/events/56299712/&#34;&gt;The Berlin Semantic Web Meetup Group&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meet local people interested in standardized and future (Semantic Web) Internet technologies aimed at turning the Web into a huge repository of cross-referenced, machine-understandable data and executable artifacts, processes and services.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Berlin-CouchDB-Meetup/&#34;&gt;CouchDB User Group&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We talk about everything couchdb, its future, our future, related technology and (our) projects connected to it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://berlindevops.org/&#34;&gt;Berlin DevOps&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The group aims to bring Berlin?s system administrators, system engineers, system developers, web operators, software developers, test engineers, software architects and alike together and create a media for information and knowledge exchange.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.agile42.com/blog/categories/scrumtisch/&#34;&gt;Scrumtisch Berlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Talking about everything scrum and agile.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jug-bb.de/&#34;&gt;Java User Group Berlin Brandenburg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Talk about Java.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cocoaheads-berlin.github.com/&#34;&gt;CocoaHeads Berlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CocoaHeads is a group devoted to discussion of Apple Computer&amp;#8217;s Cocoa Framework for programming on MacOS X (including the iPhone).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://groups.google.com/group/erlang-berlin&#34;&gt;Erlang Berlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Talk about everything Erlang.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Clojure-Berlin/&#34;&gt;Clojure User Group Berlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Clojure User Group Berlin is a get together of people interested in Clojure&amp;#8212;a Lisp dialect for the JVM. Come and discuss what you&amp;#8217;re working on, have questions, and meet other like-minded people.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://djangode.pbworks.com/w/page/4861687/Django%20User%20Group%20Berlin&#34;&gt;Django User Group
Berlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wir sind eine Gruppe von 10 bis 20 Personen, die sich regelm??ig monatlich zusammenfinden, um ?ber Django und die Welt zu philosophieren. Wir freuen uns ?ber jeden, der Spa? an Django hat oder sich daf?r interessiert!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.fsfe.org/groups/Berlin&#34;&gt;FSFE Berlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wir sind eine aktive Gruppe von Fellows der Free Software Foundation Europe und Freie-Software-Interessierte. Wir machen auf die gesellschaftlichen Aspekte Freier Software aufmerksam.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://berlinjs.org/&#34;&gt;Berlin.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Berlin.JS is a usergroup focused on Javascript and related topics. We meet regularly on the 3rd Thursday each month at 7p.m. at co.up Offices, Adalbertstra?e 7-8 in Berlin-Kreuzberg.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/b-tech/&#34;&gt;Berlin Tech Meetup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every month we will have 4-10 companies do a short (3-5 min.) demo of something cool to Berlin&amp;#8217;s tech community (geeks, investors, entrepreneurs, hackers, etc). We&amp;#8217;ve seen it in New York and want to bring it to Berlin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.facebook.com/siliconallee?sk=events&#34;&gt;Silicon Allee Breakfast Meetup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;German tech news in English - Berlin-based Community of Entrepreneurs. Not just
tech, but all kinds of people involved in the startup scene.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.meetup.com/Scala-Berlin-Brandenburg/&#34;&gt;Scala Meetup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Talk, Demo, Hack, Breathe, and just about anything else - Scala. In and around Berlin.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credits&lt;/em&gt;: I&amp;#8217;ve added the meetups that Isabel wrote about a few months ago: &lt;a href=&#34;http://blog.isabel-drost.de/index.php/archives/344/berlin-tech-meetups&#34;&gt;Berlin Tech Meetups&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Entitled</title>
          <link>http://chris.eidhof.nl/post/entitled/</link>
          <pubDate>Mon, 27 Feb 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/entitled/</guid>
          <description>&lt;p&gt;This post is inspired by Marco&amp;#8217;s excellent piece: &lt;a href=&#34;http://www.marco.org/2012/02/25/right-vs-pragmatic&#34;&gt;Right versus pragmatic&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I grew up in a small village. When I was 13, I didn&amp;#8217;t really have money to buy
music, but I still saved up and went to the record store so I could buy
&lt;a href=&#34;http://en.wikipedia.org/wiki/Americana_(The_Offspring_album)&#34;&gt;Americana&lt;/a&gt;. When
I was 15, I got my first computer-job (as a php programmer). One month, I even made 1000
guilders (which was a lot for me). On Saturdays, I would cycle to Germany with
my brother to buy CD&amp;#8217;s at the big electronics store just across the border. For about two years, I bought a couple of CD&amp;#8217;s per week.&lt;/p&gt;

&lt;p&gt;However, around that time, my musical taste started developing to slightly more
unknown bands, and the easiest way for me to get the music was by downloading it
(I vividly remember using Kazaa and Napster, those were the days). The nearest
record store where they had a decent selection of music was a 2 hour bike ride,
which was not really an option.&lt;/p&gt;

&lt;p&gt;For movies, it was the same. Once bandwidth started increasing, it just became
easier to download movies. At the movie rental, they did not have the kind of
movies I wanted to watch. I would buy them sometimes, but more often than not I
decided that I wanted to see a movie after dinner, and downloading it enabled me to watch it
the same night, rather than the next day (or even a few days later, if I had to
order it online). TV shows generally lagged behind a whole season, if they would
even broadcast them at all.&lt;/p&gt;

&lt;p&gt;Pirating music, movies and also software became second nature. I didn&amp;#8217;t think
twice about it. Money was never the reason, it&amp;#8217;s just that it&amp;#8217;s so much easier
to download something off of the Pirate Bay than order it online. However, after
doing this throughout my student time, money did start to matter. Once you&amp;#8217;re
really accustomed to getting something for free, you start to feel entitled to
getting it for free. And of course, virtually all my peers did it.&lt;/p&gt;

&lt;p&gt;After graduating, I hardly ever used any pirated software, except for a
certain graphics editing application. I still pirated music and movies (by the
way, in The Netherlands you are allowed to download music and movies).&lt;/p&gt;

&lt;p&gt;Recently, I had some hardware problems with my hard drive. For the first time in
ever, I did a clean install. I copied back my old files, but not the pirated
music, movies or software. My laptop is 100% free of pirated content. It feels
good. My mindset has changed too: I realized I am not entitled to download it
for free.&lt;/p&gt;

&lt;p&gt;I think there are lots of opportunities for entrepreneurs because of this
problem, especially in Europe. Spotify is one example, but we Europeans want to
watch movies and the latest TV shows too. At this moment, I will refrain from watching movies that are not in the cinema or available in local stores.&lt;/p&gt;

&lt;p&gt;An affordable graphics editor is definitely an opportunity too.  Or maybe some
subscription-based business models: there are some expensive applications that I
would like to use for half an hour each month. For example, about once a year a
client&amp;#8217;s designer sends me a Fireworks file. The only thing I want to do with it
is slice it up and produce some png&amp;#8217;s.  Instead of asking the designer to do it
for me, I would rather rent an hour of Fireworks: it saves time and energy for
both me and the designer, and Adobe would make more money. Everybody would
win.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Accessing an API using CoreData&#39;s NSIncrementalStore</title>
          <link>http://chris.eidhof.nl/post/accessing-an-api-using-coredatas-nsincrementalstore/</link>
          <pubDate>Sat, 18 Feb 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/accessing-an-api-using-coredatas-nsincrementalstore/</guid>
          <description>{% extends &#34;post.html&#34; %}

&lt;p&gt;&lt;em&gt;Note: I&amp;#8217;ve also posted this article on github as gist, for better readability of the code: &lt;a href=&#34;https://gist.github.com/1860108&#34;&gt;nsincrementalstore.markdown&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, we will see how to use Core Data for accessing your API.
We will use the Bandcamp API as our running example. I&amp;#8217;ve only been
experimenting with this code for a few days, so there might be mistakes in
there.&lt;/p&gt;

&lt;p&gt;One of the problems with accessing an API is that you typically have API calls
everywhere in your code. If the API changes, there are probably multiple spots
in your code that you have to change too.
Your code knows about the structure of the API results in lots of places,
for example, in the &lt;a href=&#34;http://bandcamp.com/developer&#34;&gt;Bandcamp API&lt;/a&gt; there is a &lt;a href=&#34;http://bandcamp.com/developer#track&#34;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; entity which
has the property &lt;code&gt;title&lt;/code&gt;. It would be easy to pass the API results around as an
NSDictionary and lookup the title key in that dictionary. However, if they would
change it to &lt;code&gt;songtitle&lt;/code&gt;, you have to find this everywhere in your code.&lt;/p&gt;

&lt;p&gt;Another problem is that most APIs are not object oriented. Suppose you have an
&lt;code&gt;Album&lt;/code&gt; entity that has a to-many relationship with a &lt;code&gt;Track&lt;/code&gt; entity: each album can
have multiple tracks. In your controller, you will probably have multiple API
calls, one for getting the album and another for getting its tracks.&lt;/p&gt;

&lt;p&gt;By using a new feature in Core Data we can solve these problems by adding
another layer on top of the API which allows us to access the API as if it
were an object graph. Entities can be concrete subclasses of &lt;code&gt;NSManagedObject&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, we will build a regular class that accesses the API and parses the JSON.
Then, we will create a CoreData data model that represents the API in an
object-oriented way. Finally, we will create an &lt;code&gt;NSIncrementalStore&lt;/code&gt;
subclass and implement the necessary methods to fetch the entities and relationships.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Wrap the API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first step is to create a simple class that implements your API. Doing this
is straightforward, and I will not go into details here. This is the header file
for the Bandcamp API:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@interface BandCampAPI : NSObject
+ (NSArray*)apiRequestEntitiesWithName:(NSString*)name 
                             predicate:(NSPredicate*)predicate;
+ (NSArray*)apiDiscographyForBandWithId:(NSString*)bandId;
@end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In summary, you can search for bands, get a band by id, get an album by id, get
a track by id. If you request the info for an album, you also get a list of its
tracks included in the response. Finally, there is a method for getting the
discography of a band.&lt;/p&gt;

&lt;p&gt;To find all bands named &amp;#8220;Rue Royale&amp;#8221; we can do the following API call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSPredicate* predicate = [NSPredicate predicateWithFormat:@&#34;name == %@&#34;, @&#34;Rue Royale&#34;];
NSArray* bands = [BandCampAPI apiRequestEntitiesWithName:@&#34;Band&#34;
                                               predicate:predicate];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return an &lt;code&gt;NSArray&lt;/code&gt; with an &lt;code&gt;NSDictionary&lt;/code&gt; for each found band. Please
have a look at the &lt;a href=&#34;https://github.com/chriseidhof/NSIncrementalStore-Test-Project/blob/master/IncrementalStoreTest/BandCampAPI.m&#34;&gt;source&lt;/a&gt; to see how it is implemented. The result is as following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;({
    &#34;band_id&#34; = 4246760315;
    name = &#34;Rue Royale&#34;;
    &#34;offsite_url&#34; = &#34;http://rueroyalemusic.com&#34;;
    subdomain = rueroyale;
    url = &#34;http://rueroyale.bandcamp.com&#34;;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The discography call looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSString* sideditchId = [NSString stringWithFormat:@&#34;2721182224&#34;];
NSArray* albums = [BandCampAPI apiDiscographyForBandWithId:sideditchId];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;({
    &#34;album_id&#34; = 3366378415;
    artist = Sideditch;
    &#34;band_id&#34; = 2721182224;
    downloadable = 1;
    &#34;large_art_url&#34; = &#34;http://f0.bcbits.com/z/70/81/70810089-1.jpg&#34;;
    &#34;release_date&#34; = 1267401600;
    &#34;small_art_url&#34; = &#34;http://f0.bcbits.com/z/37/58/3758272301-1.jpg&#34;;
    title = &#34;Mary, Me Demo&#34;;
    url = &#34;http://sideditch.bandcamp.com/album/mary-me-demo?pk=191&#34;;
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that we have access to the raw API, we can continue by making an
object-oriented version of the API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Define the model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The next step is to create a new CoreData data model. For each API entity, we create a
corresponding CoreData entity (named &lt;code&gt;Band&lt;/code&gt;, &lt;code&gt;Album&lt;/code&gt; and &lt;code&gt;Track&lt;/code&gt;). There are properties for
all of the entities, and more importantly: relationships between the entities.
For example, the &lt;code&gt;Album&lt;/code&gt; entity has a relationship &lt;code&gt;tracks&lt;/code&gt; which is a to-many
relationship to the &lt;code&gt;Track&lt;/code&gt; entity. Creating this data model is exactly the same
as creating a normal CoreData data model.&lt;/p&gt;

&lt;p&gt;In this project, I&amp;#8217;ve reused all the keys that Bandcamp uses. For example, an
album has a key &lt;code&gt;large_art_url&lt;/code&gt;, so our entity has a key like that as well.
However, this is not necessary. We can name the keys anything we want, we just
have to make sure that we convert them in our &lt;code&gt;NSIncrementalStore&lt;/code&gt; subclass.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: implement the &lt;code&gt;NSIncrementalStore&lt;/code&gt; methods&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now the hard bit: creating a subclass of &lt;code&gt;NSIncrementalStore&lt;/code&gt;. There is a
really interesting article by &lt;a href=&#34;http://sealedabstract.com/code/nsincrementalstore-the-future-of-web-services-in-ios-mac-os-x/&#34;&gt;Drew Crawford&lt;/a&gt; about how to do this. However, it lacks a
concrete example. I created a subclass &lt;code&gt;BandCampIS&lt;/code&gt; of &lt;code&gt;NSIncrementalStore&lt;/code&gt;. In
the documentation, you can see which methods to implement. We will start with
&lt;code&gt;executeRequest:withContext:error:&lt;/code&gt;. This method is called for multiple
purposes, but we will now focus on only one case: when it&amp;#8217;s called with an
&lt;code&gt;NSFetchRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The first argument is of type &lt;code&gt;NSPersistentStoreRequest&lt;/code&gt; which is the request we have to act upon. 
By inspecting its &lt;code&gt;requestType&lt;/code&gt; we can turn it into a specific subclass, such as &lt;code&gt;NSFetchRequest&lt;/code&gt;. For clarity, the handling code is factored out into a method &lt;code&gt;fetchObjects:withContext&lt;/code&gt;, which we will define later.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (id)executeRequest:(NSPersistentStoreRequest*)request 
         withContext:(NSManagedObjectContext*)context 
               error:(NSError**)error {
    if(request.requestType == NSFetchRequestType)
    {
        NSFetchRequest *fetchRequest = (NSFetchRequest*) request;
        if (fetchRequest.resultType==NSManagedObjectResultType) {
            return [self fetchObjects:fetchRequest 
                          withContext:context];
        }
    }
    return nil;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;fetchObjects:withContext&lt;/code&gt; method should return an &lt;code&gt;NSArray&lt;/code&gt; containing &lt;code&gt;NSManagedObject&lt;/code&gt; items.
In the &lt;code&gt;fetchObjects:withContext&lt;/code&gt; method, we call the appropriate API method, and
get back an &lt;code&gt;NSArray&lt;/code&gt; with an &lt;code&gt;NSDictionary&lt;/code&gt; for each item. For each item, we
create a new &lt;code&gt;NSManagedObjectID&lt;/code&gt; and cache the values. Again, this is factored
out into a separate method. Then, we call the &lt;code&gt;objectWithID&lt;/code&gt; method of
&lt;code&gt;NSManagedObjectContext&lt;/code&gt; to create an empty &lt;code&gt;NSManagedObject&lt;/code&gt; for the item.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (id)fetchObjects:(NSFetchRequest*)request 
       withContext:(NSManagedObjectContext*)context {
    NSArray* items = [BandCampAPI apiRequestEntitiesWithName:request.entityName 
                                                   predicate:request.predicate];
    return [items map:^(id item) {
        NSManagedObjectID* oid = [self objectIdForNewObjectOfEntity:request.entity 
                                                        cacheValues:item];
        return [context objectWithID:oid];
    }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the Bandcamp API, each entity can uniquely be identified by its key. For
example, a &lt;code&gt;Band&lt;/code&gt; entity has the key &lt;code&gt;band_id&lt;/code&gt; that uniquely identifies a band.
Using the CoreData method &lt;code&gt;newObjectIDForEntity:referenceObject&lt;/code&gt; we can create
an &lt;code&gt;NSManagedObjectID&lt;/code&gt; based on this id. Finally, we cache the values for an
entity in the &lt;code&gt;cache&lt;/code&gt; instance variable (which is an &lt;code&gt;NSDictionary&lt;/code&gt; with
&lt;code&gt;NSManagedObjectID&lt;/code&gt; as keys and &lt;code&gt;NSDictionary&lt;/code&gt; objects as values).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (NSManagedObjectID*)objectIdForNewObjectOfEntity:(NSEntityDescription*)entityDescription
                                       cacheValues:(NSDictionary*)values {
    NSString* nativeKey = [self nativeKeyForEntityName:entityDescription.name];
    id referenceId = [values objectForKey:nativeKey];
    NSManagedObjectID *objectId = [self newObjectIDForEntity:entityDescription 
                                             referenceObject:referenceId];
    [cache setObject:values forKey:objectId];
    return objectId;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that when we created the &lt;code&gt;NSManagedObject&lt;/code&gt;, the properties were not set. The managed objects only
contain their unique ID.
Core Data uses &lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/CoreData/Articles/cdFaultingUniquing.html&#34;&gt;faulting&lt;/a&gt; when you access the properties, and we have to implement another
method to support it: &lt;code&gt;newValuesForObjectWithID:withContext:error:&lt;/code&gt;. This
method will get called when we access the property of a managed object. Each
&lt;code&gt;NSManagedObject&lt;/code&gt; is backed by an &lt;code&gt;NSIncrementalStoreNode&lt;/code&gt; that holds the
values. In a database backend, the &lt;code&gt;NSIncrementalStoreNode&lt;/code&gt; would correspond to
a database record. In our API, it will be filled with an &lt;code&gt;NSDictionary&lt;/code&gt; returned
from the API. Note that in the previous method, we already cached this
&lt;code&gt;NSDictionary&lt;/code&gt;, so we don&amp;#8217;t need to do an API request:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (NSIncrementalStoreNode*)newValuesForObjectWithID:(NSManagedObjectID*)objectID 
                                        withContext:(NSManagedObjectContext*)context
                                              error:(NSError**)error {
    NSDictionary* cachedValues = [cache objectForKey:objectID];
    NSIncrementalStoreNode* node = 
        [[NSIncrementalStoreNode alloc] initWithObjectID:objectID
                                              withValues:cachedValues 
                                                 version:1];
    return node;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is one more important method to implement:
&lt;code&gt;newValueForRelationship:forObjectWithID:withContext:error:&lt;/code&gt;. As you can guess
from its name, this is where we lookup the relationships. We look at the
relationship source and target entity and name, and call the appropriate API
methods to fetch the relationship objects. Again, we cache the API results and
return an &lt;code&gt;NSArray&lt;/code&gt; with &lt;code&gt;NSManagedObjectID&lt;/code&gt; for each result.&lt;/p&gt;

&lt;p&gt;We will implement two relationships in this method: &lt;code&gt;discography&lt;/code&gt;, which relates
a &lt;code&gt;Band&lt;/code&gt; to its &lt;code&gt;Album&lt;/code&gt;s, and &lt;code&gt;tracks&lt;/code&gt; which relates an &lt;code&gt;Album&lt;/code&gt; with its
&lt;code&gt;Track&lt;/code&gt;s. In this method, we dispatch on the relationship name. In a more
complicated situation where multiple relationships with the same name exist you
can also inspect the relationship&amp;#8217;s entities.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (id)newValueForRelationship:(NSRelationshipDescription*)relationship 
              forObjectWithID:(NSManagedObjectID*)objectID
                  withContext:(NSManagedObjectContext*)context
                        error:(NSError**)error {
    if([relationship.name isEqualToString:@&#34;discography&#34;]) {
        return [self fetchDiscographyForBandWithId:objectID 
                                       albumEntity:relationship.destinationEntity];
    } else if([relationship.name isEqualToString:@&#34;tracks&#34;]) {
        return [self fetchTracksForAlbumWithId:objectID 
                                   trackEntity:relationship.destinationEntity];
    }
    NSLog(@&#34;unknown relatioship: %@&#34;, relationship);
    return nil;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the return value of the method should be an &lt;code&gt;NSArray&lt;/code&gt; with
&lt;code&gt;NSManagedObjectID&lt;/code&gt;s, not &lt;code&gt;NSManagedObject&lt;/code&gt;s! To give an example, for the
discography we do an API call to fetch the raw data, and then create
&lt;code&gt;NSManagedObjectID&lt;/code&gt;s for each album returned by the API:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (NSArray*)fetchDiscographyForBandWithId:(NSManagedObjectID*)objectID
                              albumEntity:(NSEntityDescription*)entity {
    id bandId = [self referenceObjectForObjectID:objectID];            
    NSArray* discographyData = [BandCampAPI apiDiscographyForBandWithId:bandId];
    return [discographyData map:^(id album) {
        return [self objectIdForNewObjectOfEntity:entity cacheValues:album];

    }];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we can leverage the power of CoreData to access our API. Consumers of our
model don&amp;#8217;t know whether they are accessing an API, an SQLite database or an XML file.
It&amp;#8217;s all abstracted away into our &lt;code&gt;NSIncrementalStore&lt;/code&gt; subclass.&lt;/p&gt;

&lt;p&gt;To give an example, here&amp;#8217;s how you can find a band using Core Data:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;NSEntityDescription *entityDescription = [NSEntityDescription
                                          entityForName:@&#34;Band&#34; inManagedObjectContext:moc];

NSPredicate* predicate = [NSPredicate predicateWithFormat:@&#34;name == %@&#34;, @&#34;Rue Royale&#34;];
NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];
fetchRequest.entity = entityDescription;
fetchRequest.predicate = predicate;

NSArray *results = [moc executeFetchRequest:fetchRequest error:nil];
Band* band = [results lastObject];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code will make the appropriate API request and return an object of type
&lt;code&gt;Band&lt;/code&gt;. The &lt;code&gt;Band&lt;/code&gt; class is generated from our CoreData model, and all of the
properties are accessible as Objective-C properties.&lt;/p&gt;

&lt;p&gt;When you then want to find the bands albums, it&amp;#8217;s as simple as doing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for(Album* album in band.discography) {
  NSLog(@&#34;album title: %@&#34;, album.title);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The nice thing about this code that there are no implementation details which
bleed through. We could change the backend to an SQLite store and the code won&amp;#8217;t
break. Additionally, the code is more type-safe: if we mistype a property name
(for example, &lt;code&gt;discograhpy&lt;/code&gt; instead of &lt;code&gt;discography&lt;/code&gt;) we get a compiler error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next steps / Problems&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because this is all very new and not too well documented, I might have made a
couple of mistakes. I would be really interested in hearing about it if you do
spot something, and will update this post accordingly.&lt;/p&gt;

&lt;p&gt;All the API calls and Core Data calls are done in a synchronous way. This is not
a good idea in production code, as it will block the main thread. I&amp;#8217;m
experimenting myself with how to deal with that, and don&amp;#8217;t have a single answer
yet. The &lt;a href=&#34;http://sealedabstract.com/code/nsincrementalstore-the-future-of-web-services-in-ios-mac-os-x/#comments&#34;&gt;comments&lt;/a&gt; on Drew&amp;#8217;s article are really helpful.&lt;/p&gt;

&lt;p&gt;Finally, we implemented a readonly API. By implementing some more things in our
&lt;code&gt;NSIncrementalStore&lt;/code&gt; subclass we can add support for changing, saving, deleting
and creating objects.&lt;/p&gt;

&lt;p&gt;I can imagine it would be really interesting to write a subclass of
&lt;code&gt;NSIncrementalStore&lt;/code&gt; that can deal with &lt;a href=&#34;http://couchdb.apache.org/&#34;&gt;CouchDB&lt;/a&gt; or &lt;a href=&#34;https://parse.com/&#34;&gt;Parse&lt;/a&gt;. Implementing a
backend would then be as simple as defining your CoreData data model and initializing
the class and you&amp;#8217;re up and running.&lt;/p&gt;

&lt;p&gt;This is the first long technical blogpost I&amp;#8217;ve written, and I would love to hear
your thoughts on it. Especially parts that are not clear or written in a bad
way. Please &lt;a href=&#34;mailto:chris@eidhof.nl&#34;&gt;email me&lt;/a&gt; with your thoughts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running the example code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To run the example code, clone &lt;a href=&#34;https://github.com/chriseidhof/NSIncrementalStore-Test-Project/tree/blogpost&#34;&gt;the project&lt;/a&gt; from github and open it in XCode. I
just used a standard iOS template, and pressing &amp;#8216;Run&amp;#8217; will not do much. The
documentation is in the tests: open &lt;code&gt;IncrementalStoreTestTests.m&lt;/code&gt; to see how to
use the code. You can run the tests by pressing &lt;em&gt;Cmd+U&lt;/em&gt; or &lt;em&gt;Product &amp;gt; Test&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/chriseidhof/NSIncrementalStore-Test-Project/tree/blogpost&#34;&gt;Project on Github&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;http://sealedabstract.com/code/nsincrementalstore-the-future-of-web-services-in-ios-mac-os-x/&#34;&gt;SealedAbstract&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/DataManagement/Conceptual/IncrementalStorePG/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010706&#34;&gt;NSIncrementalStore Programming Guide&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/CoreData/Reference/NSIncrementalStore_Class/Reference/NSIncrementalStore.html#//apple_ref/occ/cl/NSIncrementalStore&#34;&gt;NSIncrementalStore Class Reference&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;http://developer.apple.com/videos/wwdc/2011/&#34;&gt;Core Data talks&lt;/a&gt;&lt;br/&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/cocoa/conceptual/coredata/cdprogrammingguide.html&#34;&gt;Core Data Programming Guide&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>I Use This</title>
          <link>http://chris.eidhof.nl/post/i-use-this/</link>
          <pubDate>Mon, 13 Feb 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/i-use-this/</guid>
          <description>&lt;p&gt;I was inspired by people writing about their setup on &lt;a href=&#34;http://usesthis.com/&#34;&gt;The
Setup&lt;/a&gt;, so I decided to write about my own setup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hardware&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I use a Mid 2010 Macbook Pro 15&amp;#8221; with an SSD. I only switched last week, when my
old hard drive was about to die. I don&amp;#8217;t use any external screen, keyboard or
mouse. Because I travel a lot and work from pretty much everywhere, the HD
display is really convenient. I would like a more lightweight laptop, but don&amp;#8217;t
feel like compromising on the screen size.&lt;/p&gt;

&lt;p&gt;I also carry around an iPhone, and a very basic A4 note taking pad. The
last one is essential, I like taking notes and doing sketching on real paper. I
own an iPad, but don&amp;#8217;t use it that much (mostly for development). For reading, I
have a Kindle (which is probably the device I treasure the most).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Development&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Being an iOS developer, I spend most of my working hours in XCode. It&amp;#8217;s not the most advanced IDE, but I think it&amp;#8217;s important to stay with the tools Apple
provides. To be fair, I don&amp;#8217;t hate it either. And it keeps getting better with
every release, although it lacks features that were in Eclipse many years ago.&lt;/p&gt;

&lt;p&gt;When I&amp;#8217;m not doing iOS development, I use
&lt;a href=&#34;http://code.google.com/p/macvim/&#34;&gt;MacVim&lt;/a&gt;. I write all my other code in
it, and do lots of text editing in it (this blog post is written in MacVim). I
started learning Emacs as well, but the many years of learning vim make me feel
slow in any other editor.&lt;/p&gt;

&lt;p&gt;For versioning, I only use Git. I do think it has a bad interface and often have
problems remembering the exact commands. One of the things that did help me
understand git a bit better was the chapter on &lt;a href=&#34;http://book.git-scm.com/1_the_git_object_model.html&#34;&gt;The Git Object Model&lt;/a&gt; in the git community book.&lt;/p&gt;

&lt;p&gt;I recently changed my default shell from bash to
zsh, and I really like it. I installed &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;Oh My
Zsh&lt;/a&gt; which provides you with awesome
defaults and plugins. (Thanks for pointing it out to me Maik).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For browsing, I use Chrome. I like the speed and minimalism of it.&lt;/p&gt;

&lt;p&gt;For note taking, I use Evernote. It works on my Mac, iPhone and iPad. And it&amp;#8217;s
really easy to have shared notebooks. Although I can definitely imagine a better
product, it does the job.&lt;/p&gt;

&lt;p&gt;Another important app for me is &lt;a href=&#34;http://www.omnigroup.com/products/omnifocus/&#34;&gt;OmniFocus&lt;/a&gt;. I practice &lt;a href=&#34;http://en.wikipedia.org/wiki/Getting_Things_Done&#34;&gt;GTD&lt;/a&gt; and OmniFocus helps me keep my current projects and next actions organized. Any other GTD stuff I have is in Evernote.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.acrylicapps.com/wallet/&#34;&gt;Wallet&lt;/a&gt; takes care of my passwords. It
integrates nicely with Chrome, so I never have to remember all my different
passwords.&lt;/p&gt;

&lt;p&gt;I used to run a mail server with my friends, but switched to GMail last year. I
think Google probably takes better care of my data than I could do myself. I
wouldn&amp;#8217;t mind switching to a better, paid service which gives me good guarantees
about my data.&lt;/p&gt;

&lt;p&gt;Most people don&amp;#8217;t talk about this, but for exploring darker corners of the
internet, I use the VPN service by IPredator. It gives me at least some sense of
security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For backups, I put a lot of stuff in my Dropbox folder. Also, I have
&lt;a href=&#34;http://www.backblaze.com/&#34;&gt;Backblaze&lt;/a&gt; installed which backs everything up
online. And finally, I have an external hard drive for Time Machine backups.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Becoming a better programmer: Test-Driven Development</title>
          <link>http://chris.eidhof.nl/post/becoming-a-better-programmer-test-driven-development/</link>
          <pubDate>Wed, 08 Feb 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/becoming-a-better-programmer-test-driven-development/</guid>
          <description>&lt;p&gt;As I&amp;#8217;m enjoying programming again (and more so every week), I started to think
consciously again about improving myself as a programmer. After a recommendation
of &lt;a href=&#34;http://twitter.com/breun&#34;&gt;breun&lt;/a&gt; I started reading &lt;a href=&#34;http://www.pearsonhighered.com/educator/academic/product/1,3110,0132350882,00.html&#34;&gt;Clean Code&lt;/a&gt;, which I can definitely recommend.&lt;/p&gt;

&lt;p&gt;One of the things I have always felt bad about professionally is not doing
Test-Driven Development. Back when I was programming Haskell a lot I did do a
lot of type-driven development, which overlaps a bit: you write down your types
and then try to implement it.  However, in Objective-C the type system isn&amp;#8217;t of
much use (compared to Haskell), so I really had to do it: write tests.&lt;/p&gt;

&lt;p&gt;Another really big motivation is that I took over a project from another
developer. The project was huge, and there were no tests at all. I ended up
breaking things multiple times without realizing it (and I only found out after
deploying it to the testers). I pledged to myself to do better than that.&lt;/p&gt;

&lt;p&gt;Before I set off to write some tests, I had to find a testing framework. There
is a great community wiki on StackOverflow called &lt;a href=&#34;http://stackoverflow.com/questions/4114083/ios-tests-specs-tdd-bdd-and-integration-acceptance-testing&#34;&gt;iOS Tests/Specs TDD/BDD and
Integration &amp;amp; Acceptance
Testing&lt;/a&gt;,
but it&amp;#8217;s also a bit overwhelming.&lt;/p&gt;

&lt;p&gt;I started out by using the built-in Unit
Testing framework that&amp;#8217;s provided by Apple (see: &lt;a href=&#34;https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/UnitTesting/&#34;&gt;XCode Unit Testing
Guide&lt;/a&gt;).
However, writing unit tests is quite hard for GUI code. As I wanted to test a
new UIView subclass that I was developing, I had to test things such as tapping
and inspecting other views.&lt;/p&gt;

&lt;p&gt;Then I stumbled upon &lt;a href=&#34;https://github.com/square/KIF&#34;&gt;KIF&lt;/a&gt; (again, after a recommendation from breun), an open source
integration testing framework by Square. As advertised, it was easy to configure
and set up, and I was writing tests very soon after that. For example, here&amp;#8217;s a
scenario that tests whether my view closes, and even when you haven&amp;#8217;t used KIF
before you can understand exactly what it does:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KIFTestScenario *scenario = [KIFTestScenario scenarioWithDescription:@&#34;Test that the picker closes when tapped outside&#34;];

[scenario addStep:[KIFTestStep stepToReset]];
[scenario addStep:[KIFTestStep stepToAppear]];
[scenario addStep:[KIFTestStep stepToWaitForViewWithAccessibilityLabel:pickerAccessibilityLabel]];
[scenario addStep:[KIFTestStep stepToTapViewWithAccessibilityLabel:@&#34;Tap to close&#34;]];
[scenario addStep:[KIFTestStep stepToWaitForAbsenceOfViewWithAccessibilityLabel:pickerAccessibilityLabel]];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, I&amp;#8217;m quite happy with the combination of KIF and the built-in unit
testing. I&amp;#8217;ll try to apply it to more of my projects, and probably be a better
programmer because of that. At least when other people will read my code they
can use the tests as documentation to see what the code should do.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How I write my code</title>
          <link>http://chris.eidhof.nl/post/how-i-write-my-code/</link>
          <pubDate>Thu, 19 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-i-write-my-code/</guid>
          <description>&lt;p&gt;Recently I saw a couple of posts on how people write their code. I found it inspiring, and part of the reason I&amp;#8217;m writing this article is that I don&amp;#8217;t
know how I write my code (not explicitly, at least).&lt;/p&gt;

&lt;p&gt;Most of the time, I know what I&amp;#8217;m going to build a few days, weeks or even
months beforehand. During the time between idea and building, I think about it.
I don&amp;#8217;t set apart time to do that, it just happens. If the problem is
interesting, I&amp;#8217;ll think more about it than a problem with a straightforward
solution.&lt;/p&gt;

&lt;p&gt;Once I start coding, most of the times I start with the hardest problem. For
example, if I would build a Google Maps like application I would start by
implementing the map view and the tiles. Later on, I will add the more &amp;#8220;boring&amp;#8221;
parts. The upside of this approach: you will discover the hard problems early on
in the process. The downside: you sometimes have to push yourself to finish all
the little details. Sometimes I lose interest in the last part of the process.&lt;/p&gt;

&lt;p&gt;During the coding, I&amp;#8217;m logging a lot. I&amp;#8217;m a big logger. I love NSLog,
console.log, println and their friends. I once heard that there are two cults of
programmers: those who log, and those who use breakpoints. I hardly ever use
breakpoints, although sometimes they can be handy.&lt;/p&gt;

&lt;p&gt;I always put my projects under version control, but in the beginning of the
project I don&amp;#8217;t write any useful commit messages. Lots of commits are named
&amp;#8220;checkpoint&amp;#8221;. When collaborating or working on a larger project I do make sure
my commits are logical and have a good commit message.&lt;/p&gt;

&lt;p&gt;I almost never write tests. I think this is one of my major professional
weaknesses. This also has to do with the fact that I&amp;#8217;ve programmed
Haskell a lot, where you don&amp;#8217;t need much testing, as you can use the type system
to do testing. Maybe it would be a good new year&amp;#8217;s resolution: write more tests.&lt;/p&gt;

&lt;p&gt;I sparsely document my code. I try make sure it is very readable. For example,
when writing a complex if condition, you can add some documentation to explain
what it does. Instead, I will pull it out into a variable and name it
appropriately. I also use method names that describe what they are doing.&lt;/p&gt;

&lt;p&gt;When I&amp;#8217;m quickly building something, I sometimes copy/paste code, but always put
a comment: &amp;#8220;copy pasted from [filename]&amp;#8221;. This way I can continue my train of
thought. However, it hurts me to see this, so when I&amp;#8217;m refactoring I try to
simplify it. I can&amp;#8217;t stand repetitive code, and will work hard to eliminate it
and solve things in a beautiful way.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Take the money</title>
          <link>http://chris.eidhof.nl/post/take-the-money/</link>
          <pubDate>Tue, 17 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/take-the-money/</guid>
          <description>&lt;p&gt;After yesterday&amp;#8217;s post about &lt;a href=&#34;http://chris.eidhof.nl/post/15942157709/speaking-up&#34;&gt;speaking
up&lt;/a&gt;, I got some questions
about what my responsibility is as a freelance programmer. Am I qualified to
judge other people&amp;#8217;s business ideas? And if so, should I tell them if it&amp;#8217;s a bad
idea? I&amp;#8217;m a computer programmer, maybe I should just stick to what I know.&lt;/p&gt;

&lt;p&gt;The question I&amp;#8217;m trying to answer is: &amp;#8220;Should I just take the money?&amp;#8221;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not sure if it is my responsibility to judge other people&amp;#8217;s business ideas.
It also really depends on who the other person is and what they want from me. If
people want me to build something in exchange for shares, then I obviously have
to judge their ideas. When it comes to paying clients, I could just take the
money and walk away.&lt;/p&gt;

&lt;p&gt;However, I have never been like that. Luckily, freelancers in my profession are
in very high demand and we can afford to say &amp;#8216;no&amp;#8217; to clients every now and then.
When I&amp;#8217;m taking on freelance projects, I try to avoid doing projects that aren&amp;#8217;t
good ideas. For example, I&amp;#8217;ve advised clients who came for an iPhone app
that they should just get a mobile website instead. Or more recently, for a lab
prototype, I advised to go for Android instead of iOS, because the necessary
technology wasn&amp;#8217;t freely available on iOS. In both projects, I could have chosen
for the money, but I think it&amp;#8217;s in everybody&amp;#8217;s best interest to do things the
right way.&lt;/p&gt;

&lt;p&gt;The client should of course get the best possible solution. But I believe it&amp;#8217;s
better for me, too. Hopefully, the client will remember that I took myself out
of the equation, and will get a good impression of me. They might hire me for
another project or recommend me to their friends.
This is why I think it&amp;#8217;s best for me to be as honest as possible about these
projects. It might not be fun in the short term, but I hope it will pay off in
the long time.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Speaking Up</title>
          <link>http://chris.eidhof.nl/post/speaking-up/</link>
          <pubDate>Mon, 16 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/speaking-up/</guid>
          <description>&lt;p&gt;Deciding when to speak up is one of the things where I feel I haven&amp;#8217;t yet figured it
out at all. I don&amp;#8217;t know when or how to do it.&lt;/p&gt;

&lt;p&gt;In high school, a friend of mine didn&amp;#8217;t like her boyfriend anymore. I told
her that if she really feels that way then she should break up with him. The
boyfriend (who was a good friend of me as well) was, understandably, quite angry
at me. From that moment, I decided it wasn&amp;#8217;t a good idea to speak up about other
people&amp;#8217;s relationships, even if I have strong opinions on it. However, recently,
a friend told me he wished people would have told their true opinions about his
ex-girlfriend. Mine was mildly negative, but I never said so to him. I don&amp;#8217;t
know if I should have done so.&lt;/p&gt;

&lt;p&gt;Being a programmer, I always get a lot of business-people looking for a
programmer. They tell me their idea, and in my opinion, most of the
ideas suck. Whenever I think this, I&amp;#8217;ll try to postpone judgement and get my
thoughts straight. I still feel it my professional responsibility to tell them
why it is a bad idea and do so eventually. But where to draw the line? Do you
tell thim &amp;#8220;your idea sucks and here&amp;#8217;s why&amp;#8221;? Or &amp;#8220;this is what I don&amp;#8217;t like about
your idea&amp;#8221;. Maybe even &amp;#8220;I don&amp;#8217;t think you should try to become an entrepreneur&amp;#8221;
(I&amp;#8217;ve never said that and not planning to do so either).&lt;/p&gt;

&lt;p&gt;One of the reasons why I find it hard to say what I&amp;#8217;m thinking is because I have
been wrong so many times. If Jack Dorsey would have pitched me Twitter, I
probably would have strongly advised him not to pursue it as a business, because
it doesn&amp;#8217;t really add anything (we already had blogs, social networks, text messaging and email). Also, you need a lot of people for it to be
interesting. I mean, seriously, a 140-character microblog is the best idea you
can come up with? What problem does it solve anyway?&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Focus</title>
          <link>http://chris.eidhof.nl/post/focus/</link>
          <pubDate>Wed, 11 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/focus/</guid>
          <description>&lt;p&gt;When people tell me their startup idea, it often happens that they are trying to
solve a huge amount of problems. This happens mostly with people who do not have
a lot of experience in startups. These people are often very ambitious but don&amp;#8217;t
have the skills to execute themselves.&lt;/p&gt;

&lt;p&gt;For me, focus has always worked in business. The first company I started, we
didn&amp;#8217;t really know what to do, so we told people we could program everything.
Web apps, desktop apps, highly secure apps, Haskell apps, Ruby apps, and so on.
Once we started iPhone programming and decided to only focus on that, things got
much easier.&lt;/p&gt;

&lt;p&gt;When you are brainstorming, it&amp;#8217;s good to be as broad as possible. Think about
all the problems you could solve. You will come up with many great solutions for
these problems, and it&amp;#8217;s very tempting to use all of them.&lt;/p&gt;

&lt;p&gt;I think you should pick out one problem and solve it really, really well. At least, that&amp;#8217;s what I&amp;#8217;m going to do in my next startup.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Willpower</title>
          <link>http://chris.eidhof.nl/post/willpower/</link>
          <pubDate>Fri, 06 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/willpower/</guid>
          <description>&lt;p&gt;I hate flossing. My dentist insists that I do it, and after each visit I promised to do
better next time, but never followed through. I wanted to, but I lacked the
discipline to do it.&lt;/p&gt;

&lt;p&gt;Some two months ago, I decided to do it differently. Instead of using my
willpower, I tricked myself into creating a habit. I grabbed a big piece of
paper, made rows and columns, creating about 60 large squares.&lt;/p&gt;

&lt;p&gt;Each day, after flossing, I would draw something in the square. At the
beginning, it was just a cross. But my drawings became much more advanced, and
something to look forward to. After 3 days, it was already hard to break the
pattern, even though I still hated flossing.&lt;/p&gt;

&lt;p&gt;This week I&amp;#8217;m traveling, and I didn&amp;#8217;t bring my piece of paper (which is completely filled,
anyway). However, I did bring my dental floss, and just yesterday I noticed it
has become a complete habit. I don&amp;#8217;t think about it anymore, except when I
forget it. Then I still do it.&lt;/p&gt;

&lt;p&gt;I didn&amp;#8217;t think of this trick myself, by the way. I once read about it on
Lifehacker, as it&amp;#8217;s also know as &lt;a href=&#34;http://lifehacker.com/281626/jerry-seinfelds-productivity-secret&#34;&gt;Seinfeld&amp;#8217;s Productivity
Secret&lt;/a&gt;. Over the next months, I&amp;#8217;ll probably reuse it for other habits I&amp;#8217;d like to instill.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Freeform blogging</title>
          <link>http://chris.eidhof.nl/post/freeform-blogging/</link>
          <pubDate>Thu, 05 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/freeform-blogging/</guid>
          <description>&lt;p&gt;In the last days, I tried to do more freeform blogging. I&amp;#8217;ll write about
whatever&amp;#8217;s on my mind. Some pieces might be about something I&amp;#8217;ve been thinking
about for months, others might be something I just thought of in the shower.&lt;/p&gt;

&lt;p&gt;I will try not to care too much about things like &amp;#8216;target audience&amp;#8217;. My goal is
to become better at writing and to help myself think. I&amp;#8217;ll try to write again
every day, and publish it regardless of whether it&amp;#8217;s good or bad.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m full of inspiration again, but the last few months I hardly wrote at all. I
was too busy being happy. I had some really interesting people to talk to, which
helped me think and clarify my mind. Now I&amp;#8217;m planning my move to Berlin, where I
don&amp;#8217;t know nearly as many people.&lt;/p&gt;

&lt;p&gt;Also, everything is a bit different here, which greatly inspires me. My
commandment of German is pretty good, but there are still a lot of basic things
where I have to think about how to say it. And all the other stuff too. For example, how cyclists participate in traffic
is very different from The Netherlands. Seeing the differences in these things that I normally
take for granted brings a lot of new thoughts.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>My perfect co-founder</title>
          <link>http://chris.eidhof.nl/post/my-perfect-co-founder/</link>
          <pubDate>Wed, 04 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/my-perfect-co-founder/</guid>
          <description>&lt;p&gt;Being a programmer, I have long thought about my ideal co-founder. I&amp;#8217;ve started
a company with somebody who&amp;#8217;s got almost the same skillset as I have (except
that he could do bookkeeping as well). This worked for two years, but I
didn&amp;#8217;t like the direction we were going in. After that, I started a startup with
a mathematician, analyzing big data. Here, we couldn&amp;#8217;t agree upon the product, and weren&amp;#8217;t to good at selling ourselves.&lt;/p&gt;

&lt;p&gt;After that, for a long time, I thought I needed a designer as my ideal
co-founder. All of the startups I look up to have great design. However, in
recent months, and especially after talking with friends, I realized I need
somebody else: a business guy. Somebody who likes talking to and finding
clients, knows all about startups, building products, has good tech experience,
can see the future of mobile and data, and so on. Somebody who can sell. Somebody who&amp;#8217;s not always nice, and who can negotiate and fire people if necessary.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s going to be hard to find this person. I&amp;#8217;m going to live in Berlin, where I don&amp;#8217;t know as many people as in The Netherlands. Still, I&amp;#8217;m sure he
or she exists, as I know a couple of these people already (who are busy doing
their own startups).&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>On Breakups</title>
          <link>http://chris.eidhof.nl/post/on-breakups/</link>
          <pubDate>Tue, 03 Jan 2012 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/on-breakups/</guid>
          <description>&lt;p&gt;Not too long ago, I went through a breakup, or to put it another way: I got dumped.
Fortunately, this wasn&amp;#8217;t the first time I went through a breakup. Everybody
handles it differently, but these are the sort of things that help me deal with
it:&lt;/p&gt;

&lt;p&gt;I meet a lot of friends and talk about it. I go out to bars where nice girls
hang out, just to reassure myself that there are more girls out there. I try to
sleep a lot, eat healthy, exercise: take good care of myself. I change something in my
life, sometimes radical, sometimes not so radical. Make some new friends.&lt;/p&gt;

&lt;p&gt;I never come back together, and don&amp;#8217;t even consider the possibility. This makes
letting go easier. Until I&amp;#8217;m completely over it, and longer, I try to minimize
the contact. I accept the situation, no matter what the reasons for the breakup
are. Even if I don&amp;#8217;t know the reasons.&lt;/p&gt;

&lt;p&gt;After living together, moving out of the place makes it easier. Otherwise
I&amp;#8217;ll keep hoping she might be there when I hear a noise or get home.&lt;/p&gt;

&lt;p&gt;Breakups suck for the most part, but there are upsides too: I have a lot
more free time. I can do whatever I want to, no concessions. I will fall in love again.
And perhaps the biggest, most immediate upside: I&amp;#8217;m reminded once again
that I&amp;#8217;ve got awesome friends and family (thanks guys!).&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Radical Honesty</title>
          <link>http://chris.eidhof.nl/post/radical-honesty/</link>
          <pubDate>Wed, 28 Dec 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/radical-honesty/</guid>
          <description>&lt;p&gt;On Hacker News, I read an article about Radical Honesty today: &lt;a href=&#34;http://www.esquire.com/features/honesty0707&#34;&gt;I Think You&amp;#8217;re
Fat&lt;/a&gt;. It really appealed to me.
Over the last year, I&amp;#8217;ve tried to be more open and honest myself. Not radically
honest, though. For me, it was important not to hurt other people&amp;#8217;s feelings.&lt;/p&gt;

&lt;p&gt;However, when you think of it, you can hurt people more by not being honest. 
Suppose a friend lets you wait for 45 minutes in a restaurant. I&amp;#8217;m naturally
conflict avoiding, so when they arrive I&amp;#8217;ll say: &amp;#8220;no problem&amp;#8221;. But this will
probably hurt our relationship on the long term, whereas talking it over
immediately probably takes away the problem.&lt;/p&gt;

&lt;p&gt;I also noticed that the deeper my relationship with somebody, the easier I find
it to be radically honest. Or maybe it is the other way around: the more honest
I am, the deeper the relationship feels? There certainly is something really
nice about being able to say everything to somebody, whether it&amp;#8217;s good or bad.
For me, it makes the relationship feel stronger.&lt;/p&gt;

&lt;p&gt;In my blog, I also try to be very honest about how I think about things. This is
definitely scary, especially if it&amp;#8217;s about my weak points, things that I&amp;#8217;m
uncertain about or my failures. But on the other hand, I think especially these
points might be the most interesting to read about.&lt;/p&gt;

&lt;p&gt;Starting now, I&amp;#8217;ll try to be more honest in all my personal relationships. I
am not going to be as radical as in the linked article, but we&amp;#8217;ll see how this
goes.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>CocoaPods</title>
          <link>http://chris.eidhof.nl/post/cocoapods/</link>
          <pubDate>Wed, 07 Dec 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/cocoapods/</guid>
          <description>&lt;p&gt;I just upgraded one of my projects to use
&lt;a href=&#34;https://github.com/CocoaPods/CocoaPods&#34;&gt;CocoaPods&lt;/a&gt;. CocoaPods is a library
dependency manager for XCode projects. You can use it in a way similar to Ruby&amp;#8217;s gems or Haskell&amp;#8217;s
cabal. The project is just starting, so it&amp;#8217;s a little rough, but it does the
job.&lt;/p&gt;

&lt;p&gt;I think this can make code sharing for iOS developers a lot easier. I&amp;#8217;m all for
reusing code, but it used to be quite a hassle to include a library, so a lot of
times I would try to avoid reusing other code. I&amp;#8217;m pretty sure I&amp;#8217;m not the only
developer who&amp;#8217;s like this. CocoaPods makes the barrier to reuse a lot lower.&lt;/p&gt;

&lt;p&gt;By making code sharing a lot easier and encouraging it, I hope that CocoaPods
can change the landscape on iOS. While there are already a lot of open source
components available (for example, on the excellent
&lt;a href=&#34;http://cocoacontrols.com/&#34;&gt;CocoaControls&lt;/a&gt;), this will hopefully spawn a new load of open source libraries.&lt;/p&gt;

&lt;p&gt;Cocoa developers, install CocoaPods and give it a try. And while you&amp;#8217;re at it,
try to put your favorite library in a Pod file. Together, we can improve the
ecosystem.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hard Decisions</title>
          <link>http://chris.eidhof.nl/post/hard-decisions/</link>
          <pubDate>Mon, 21 Nov 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/hard-decisions/</guid>
          <description>&lt;p&gt;Over the last few weeks, I was asked three times (by two different companies) to
become the development lead (i.e. CTO). Both of these companies are really quite
awesome, and I can see them become very succesful (actually, one already is
quite succesful). I strongly considerd saying yes to both positions, but ultimately decided not to
do it.&lt;/p&gt;

&lt;p&gt;One of the companies already makes good profits, the other one is just starting
but can become very profitable. Both of them are sort of world-changing, one
more than the other. Both companies have awesome teams.&lt;/p&gt;

&lt;p&gt;Saying no was very hard for me. There are two big reasons for me not to do it:&lt;/p&gt;

&lt;p&gt;One: I&amp;#8217;m planning to leave The Netherlands again, to live abroad for a few
years. This could happen quite soon or in about a year (which is also quite soon
when you&amp;#8217;re joining a company that&amp;#8217;s starting). I don&amp;#8217;t think it&amp;#8217;s a good idea
to start something like that when you know you&amp;#8217;re almost leaving.&lt;/p&gt;

&lt;p&gt;Two: I&amp;#8217;m really enjoying my lifestyle right now. I&amp;#8217;m working on new ideas for
apps, building prototypes and finishing some of them, getting products out of
the door and meeting interesting people. I also run a lot, almost every day, at
the middle of the day. I&amp;#8217;m not commuting to work, but instead working from home
or in coffee shops. If I would take a position at a startup or
regular company, it probably means commuting, and I have a lot less choice in
how I would like to spend my time.&lt;/p&gt;

&lt;p&gt;With both opportunities I felt it was a quite &amp;#8216;safe&amp;#8217; way for me to spend my
time. Doing everything on my own feels more risky, but more rewarding because of
that.  Also, I&amp;#8217;m becoming more and more attached to my freedom of time, and I
think that&amp;#8217;s a good thing.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Satisficers vs. Optimizers</title>
          <link>http://chris.eidhof.nl/post/satisficers-vs-optimizers/</link>
          <pubDate>Sat, 19 Nov 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/satisficers-vs-optimizers/</guid>
          <description>&lt;p&gt;I just finished Fooled by Randomness by Taleb, what a great book. In the last
chapter, he compares satisficers and optimizers: suppose you&amp;#8217;re having dinner
with a friend who knows exactly when his train leaves. He optimizes his dinner,
hurrying away from the table just before his train is about to depart. Your
friend is an optimizer.&lt;/p&gt;

&lt;p&gt;I am aspiring to be more of a satisficer: I don&amp;#8217;t know when my train will
leave. When I need to travel somewhere, I walk or cycle to the station and check
the tables to see when it leaves. This means I hardly ever miss a train: there&amp;#8217;s
nothing to miss!&lt;/p&gt;

&lt;p&gt;Instead of planning weeks ahead and optimize my time to see as many people as
possible, I&amp;#8217;ve now got a lazier approach: I&amp;#8217;ll just call people when I feel like meeting them.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m also not trying to optimize my working time: I either work or play, not both
at the same time. I&amp;#8217;m trying not
to confuse the two (which still happens often, watching YouTube videos or
reading Hacker News while compiling). However, I&amp;#8217;m not trying to work 8 hours a day. Some days I
work more, most days I work less, depending on what I feel like. Accepting that is still hard for me, I was
(unconsciously) drilled with the idea that you have to work 40+ hours a week to be a
worthy person.&lt;/p&gt;

&lt;p&gt;There are other aspects of life where I am still a bit of an optimizer, such as running
fast. However, the training is very satisfactory for me, and doesn&amp;#8217;t feel like
optimizing: it feels very playful and is a lot of fun.&lt;/p&gt;

&lt;p&gt;What about you? Are you a satisficer or an optimizer?&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Survivorship bias</title>
          <link>http://chris.eidhof.nl/post/survivorship-bias/</link>
          <pubDate>Tue, 15 Nov 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/survivorship-bias/</guid>
          <description>&lt;p&gt;Of all the jobs I&amp;#8217;ve had, being a solo entrepreneur is the fairest job. I am
directly responsible for my own income. I have nobody to blame if things go
wrong, technically, financially or otherwise. This makes me feel very
responsible for everything I do. Compared to working with more than one person
or (worse) working in a company, my work influences my results so much more.&lt;/p&gt;

&lt;p&gt;The danger is this: if I become very successful, I will probably attribute it to
my skill. However, there are a lot of other factors that influence my succes,
and I have the feeling that luck might be quite a big factor.&lt;/p&gt;

&lt;p&gt;This post is for future me: if you do succeed, don&amp;#8217;t think it&amp;#8217;s only
because you&amp;#8217;re so smart or skilled. Read again about
&lt;a href=&#34;http://en.wikipedia.org/wiki/Survivorship_bias&#34;&gt;surviorship bias&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>On Running</title>
          <link>http://chris.eidhof.nl/post/on-running/</link>
          <pubDate>Tue, 08 Nov 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/on-running/</guid>
          <description>&lt;p&gt;Running gives me a lot of energy. After a run, there is the runner&amp;#8217;s high: the
released endorphin in my brain makes me feel great.&lt;/p&gt;

&lt;p&gt;Training, races and continually wanting to get better makes me push myself. I&amp;#8217;m not pushing too much, for risk of over-training, but I am constantly overcoming barriers and
improving. After running my first half marathon a few years ago, I felt on top
of the world, and that feeling lasted an entire week. The achievement
made everything else in life seem so easy in comparison.&lt;/p&gt;

&lt;p&gt;Running keeps my body fit, which helps for my mind too. I feel happier and more
creative. Some therapists prescribe running to depressed people, as it can relieve
stress and anxiety.&lt;/p&gt;

&lt;p&gt;Being an avid runner, I also like to watch other runners. Seeing people break
world records or their own personal best is very inspiring. Watching a
73-year old man run 160 kilometers (100 miles) through the mountains is even better. Being a runner
myself makes me appreciate these things even more.&lt;/p&gt;

&lt;p&gt;Running also brings me discipline.  I have carried that discipline into other areas of my
life as well.  It takes a bit to get started with running,
but once you are going out on a regular schedule, you feel more disciplined and
better about yourself. Enjoy!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Met has launched</title>
          <link>http://chris.eidhof.nl/post/met-has-launched/</link>
          <pubDate>Mon, 07 Nov 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/met-has-launched/</guid>
          <description>&lt;p&gt;Today is the official release of &lt;a href=&#34;http://met.io/&#34;&gt;Met&lt;/a&gt;. I will send out a press release to all the
Dutch iOS websites, and will send out an press release in English tomorrow. The last
few weeks have been quite an adventure. I documented all the steps of building
Met on this weblog, starting with choosing an idea and ending with submitting it
to the App Store.&lt;/p&gt;

&lt;p&gt;For those that haven&amp;#8217;t read the story yet: Met is an application that allows you
to take notes on people. If you meet a lot of people, it can be easy to forget
important things about them. By writing done some quick notes after a meeting
you can remember those details.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a quick summary of the last few weeks:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I started with a blog post explain the &lt;a href=&#34;http://chris.eidhof.nl/post/10680838726/one-app-in-four-weeks-kickoff&#34;&gt;three different app
ideas&lt;/a&gt;
I considered for this project. I then &lt;a href=&#34;http://chris.eidhof.nl/post/10723613553/check-in-to-people&#34;&gt;chose the idea for
Met&lt;/a&gt;, and
designed a MVP, based on all the comments I got from people. 
The next day, I
&lt;a href=&#34;http://chris.eidhof.nl/post/10801169656/sketches-and-ideas&#34;&gt;sketched some
ideas&lt;/a&gt; and
wrote up my thoughts at the &lt;a href=&#34;http://chris.eidhof.nl/post/10842079067/one-app-in-four-weeks-week-1&#34;&gt;end of week
1&lt;/a&gt;,
and also included some first screenshots (man, that looks so different from the
current state Met is in).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the &lt;a href=&#34;http://chris.eidhof.nl/post/10976458593/start-of-week-2&#34;&gt;start of week
2&lt;/a&gt;, I did some
code cleanup, and tried to define the next steps: get the basic functionality
done and thought of &lt;a href=&#34;http://chris.eidhof.nl/post/11023935286/selecting-people-faster&#34;&gt;a better way to select people&lt;/a&gt; (which is an action you
perform a lot, so it has to be fast).&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://chris.eidhof.nl/post/10976458593/start-of-week-2&#34;&gt;end of week
2&lt;/a&gt; was strange:
working on other projects, not feeling productive, thinking and designing. After
a day of designing, I threw all the designs away and stayed with Apple&amp;#8217;s default design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Week 3 started with releasing a beta version and &lt;a href=&#34;http://chris.eidhof.nl/post/11269801237/beta-and-branding&#34;&gt;thinking about the
branding&lt;/a&gt;.
After reading that post, Jurriaan sent me &lt;a href=&#34;http://chris.eidhof.nl/post/11323208696/introducing-met&#34;&gt;an awesome name
suggestion&lt;/a&gt;. I
defined the next actions and set to work. I implement &lt;a href=&#34;http://chris.eidhof.nl/post/11362285888/rotation-fun&#34;&gt;support for device
rotations&lt;/a&gt;, which
is essential for fast typing (as the landscape layout gives you a bigger
keyboard). I posted &lt;a href=&#34;http://chris.eidhof.nl/post/11397933121/new-build-and-screenshots&#34;&gt;some
screenshots&lt;/a&gt;
and wrote about &lt;a href=&#34;http://chris.eidhof.nl/post/11443510002/week-3-an-app-in-four-weeks&#34;&gt;my experiences so
far&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Week 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The last week was a bit chaotic, as I was doing some personal projects. I
did &lt;a href=&#34;http://chris.eidhof.nl/post/11566614614/how-i-will-design-my-app-website&#34;&gt;research on app
websites&lt;/a&gt;,
and picked a few I really liked. I tried to identify the important things they
have in common. I wrote about my &lt;a href=&#34;http://chris.eidhof.nl/post/11615742534/new-build-first-website-press-plans&#34;&gt;press
plans&lt;/a&gt;
and finally
&lt;a href=&#34;http://chris.eidhof.nl/post/11986052385/met-in-the-app-store&#34;&gt;submitted&lt;/a&gt; Met to the App Store&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Closing thoughts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My goal was to help other people by documenting the process of building an app.
Additionally, I expected to get some attention by doing it, which would
hopefully increase sales a bit. However, I didn&amp;#8217;t expect that people would be so
helpful, giving me lots of suggestions, ideas and tips. Just awesome.&lt;/p&gt;

&lt;p&gt;Half of the beta testers gave me really useful comments. This helped improve the
app a lot. The other half said &amp;#8220;I guess it&amp;#8217;s not for me&amp;#8221;, which is only fair.&lt;/p&gt;

&lt;p&gt;I am really excited to see how the launch goes. I&amp;#8217;m a bit afraid that I might
have built something that nobody wants to use, but on the other hand: I use Met
myself, daily, and I really like it. It&amp;#8217;s already proven to be very useful!&lt;/p&gt;

&lt;p&gt;If you want to use Met yourself, please &lt;a href=&#34;http://itunes.apple.com/us/app/met-take-notes-about-the-people/id476264034?ls=1&amp;amp;mt=8&#34;&gt;buy it in the App Store&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>HTML5 is no silver bullet for apps</title>
          <link>http://chris.eidhof.nl/post/html5-is-no-silver-bullet-for-apps/</link>
          <pubDate>Mon, 31 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/html5-is-no-silver-bullet-for-apps/</guid>
          <description>&lt;p&gt;I sometimes hear people tell me that they are going to let their next app be
an HTML 5 app. This way, they can write for both iPhone and Android at the
same time. This seems like a big win.&lt;/p&gt;

&lt;p&gt;Although iOS and Android are very similar, both being touch-based and mobile,
they are also quite different. For example:&lt;/p&gt;

&lt;p&gt;On Android, if you want to go back to the screen you just came from, you press
the physical &amp;#8216;Back&amp;#8217; button on the device. On the iPhone, there is a standard pattern
with a navigation bar on the top of your screen, where the left button is shaped
like an arrow to the left, and takes you back.&lt;/p&gt;

&lt;p&gt;On the iPhone, a tab bar on the bottom of the screen shows you the different groups
of functionality in an app (e.g., in the Music app you can browse by Playlist,
Artists, Songs and more). On Android, the Menu button is often used, which pops
up a menu with the available options.&lt;/p&gt;

&lt;p&gt;If you are going to write an app that looks exactly the same on both platforms,
you&amp;#8217;ll have an app that does neither feel like an Android app nor like an iPhone
app. Users will have a hard time understanding it, as they have to learn how to
operate your design. Don&amp;#8217;t do it.
You can still use HTML5 for parts of your app, so you can share things between
iOS and Android, but especially for navigation, please use the native controls.&lt;/p&gt;

&lt;p&gt;Of course, there is one big exception: games. It makes total sense to do it in
HTML5 (if you don&amp;#8217;t require heavy performance), so you can be on as many
platforms as possible. Often games don&amp;#8217;t need or use any of the platform&amp;#8217;s standard controls.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Reaching a plateau</title>
          <link>http://chris.eidhof.nl/post/reaching-a-plateau/</link>
          <pubDate>Fri, 28 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/reaching-a-plateau/</guid>
          <description>&lt;p&gt;While I was traveling last month, I met a lot of great people. One of them was a
73-year old woman who had been very successful in her life. She was a professor
at a well-known university in the USA and has now retired to Spain. She is still doing
amazing things.&lt;/p&gt;

&lt;p&gt;I asked her: &amp;#8220;What&amp;#8217;s your secret to success, apart from working hard and being
intelligent?&amp;#8221;. She said: &amp;#8220;Nothing, just that&amp;#8221;.&lt;/p&gt;

&lt;p&gt;Then I wanted to know if she had ever felt burned out, or felt like quitting.
She answered: &amp;#8220;Yes.
The first time it&amp;#8217;s very scary. However, every time this happened I had reached some kind
of plateau, and it was time to take the next step. Each time, I
just waited it out and grew. The next times, I started to recognize it when it
happened and slowly advanced to the next level in my career.&amp;#8221;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Met In The App Store</title>
          <link>http://chris.eidhof.nl/post/met-in-the-app-store/</link>
          <pubDate>Thu, 27 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/met-in-the-app-store/</guid>
          <description>&lt;p&gt;This morning at 10:11 GMT+1, version 1.0 of Met was submitted to the App Store.
It&amp;#8217;s been quite an experience, blogging about everything, from before there was
an idea until the App Store submission. I will write a recap of everything next
week.&lt;/p&gt;

&lt;p&gt;In the last few days, I&amp;#8217;ve been helping out with an ultra marathon, and met a
lot of interesting and inspiring people. There was a 73-year old guy who
ran 160 kilometers (100 miles) who finished without any problems. Very
impressive. After the race, I travelled to M?laga and yesterday I got back to
The Netherlands. During this time, I felt bad for not writing about Met, as it
was almost ready. Yesterday, I fixed a last bug while I was waiting on the
airport.&lt;/p&gt;

&lt;p&gt;Travelling always makes me come up with new thoughts. The faster I travel, the
bigger the thoughts seem to be. As I was in an airplane yesterday, I had some
high-level ideas about what to do with my life.&lt;/p&gt;

&lt;p&gt;At this moment, I found out that making enough money from selling my own products is a little
harder than I thought. However, I really love what I&amp;#8217;m  doing, and I&amp;#8217;m having a
great time. It is probably going to take me longer than I expected to be able to
live off of the passive income made from my apps, but I&amp;#8217;m not worried about
that. In the meantime, I&amp;#8217;ll do some client projects (anybody looking for an iOS
developer?).&lt;/p&gt;

&lt;p&gt;Now that the first version of Met is submitted to the App Store, it&amp;#8217;s almost time for
some other projects. I still need to write a press release and send it out, but
after that is fully prepared I look forward to work on some other projects. One thing
I&amp;#8217;ll be working is the &lt;a href=&#34;http://chris.eidhof.nl/post/9873846899/ive-got-an-idea-for-an-app&#34;&gt;super-secret
project&lt;/a&gt;
I wrote about earlier. The physical prototypes are almost ready, and the first
version of the iPhone app too. Also, &lt;a href=&#34;http://ulischoeberl.com/&#34;&gt;Uli&lt;/a&gt; and I are
going to spend a week getting the app done that we&amp;#8217;ve worked on and talked about
for the last few months.&lt;/p&gt;

&lt;p&gt;I love running, and have been training quite heavily for the last 1.5 years. I
track all my running using my Garmin 405 watch, and all the activities are
uploaded to Garmin Connect, a webservice for analyzing everything about your
workout. However, they don&amp;#8217;t have an iPhone or iPad client, and I would love to
have a decent app for that. This is one of the ideas I&amp;#8217;m thinking about building next.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>New build, first website, press plans</title>
          <link>http://chris.eidhof.nl/post/new-build-first-website-press-plans/</link>
          <pubDate>Tue, 18 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/new-build-first-website-press-plans/</guid>
          <description>&lt;p&gt;Yesterday I released a new build. In this version, you can also change the date of
events (which means you can add past events) and add new contacts from within
the app.&lt;/p&gt;

&lt;p&gt;Today I set up a &lt;a href=&#34;http://eidhof.nl/met/&#34;&gt;first webpage&lt;/a&gt; for Met. I really like the design of With, and I let
myself be inspired. Admittedly, the website is quite
minimal, but I think it should be enough (for now). I also found a good domain
name, which I&amp;#8217;m in the process of registering now.&lt;/p&gt;

&lt;p&gt;I want to do multivariate testing on the website background, slogan and text,
but can of course only do this once I&amp;#8217;ve got some traffic going. Which raises
another question: how are people going to find me?&lt;/p&gt;

&lt;p&gt;In the past, I&amp;#8217;ve had good experiences with sending press releases to Dutch
weblogs such as &lt;a href=&#34;http://iphoneclub.nl&#34;&gt;iPhoneClub&lt;/a&gt; and
&lt;a href=&#34;http://www.onemorething.nl/&#34;&gt;OneMoreThing&lt;/a&gt;. In addition to this, I 
also would like to get featured on English-language iPhone sites, and sites such
as &lt;a href=&#34;http://lifehacker.com/&#34;&gt;LifeHacker&lt;/a&gt;. First I need to compile a list of
sites that could potentially feature me, then I need to write a press release
and send it to all of them.&lt;/p&gt;

&lt;p&gt;As always, if you have tips or suggestions let me know.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How I Will Design My App Website</title>
          <link>http://chris.eidhof.nl/post/how-i-will-design-my-app-website/</link>
          <pubDate>Mon, 17 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-i-will-design-my-app-website/</guid>
          <description>&lt;p&gt;For Met, I need to design and build a website, and in this post I&amp;#8217;ll show
some of best the app websites I&amp;#8217;ve bookmarked and try to explain why I like
them. My definition of &amp;#8220;best&amp;#8221; in this case mostly means beautiful. I don&amp;#8217;t know
how they convert visitors or any other performance, so that&amp;#8217;s something I need to measure myself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screenshots&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perhaps the most important part of an app website are the screenshots. All the
great app websites have good screenshots on their websites. The screenshot is
never just a screenshot, but always shown with the iPhone around it. Great examples
are &lt;a href=&#34;http://geteeve.com/&#34;&gt;Eeve&lt;/a&gt; and &lt;a href=&#34;http://thecocktailapp.com/&#34;&gt;Cocktails&lt;/a&gt;. How not to do it is shown on my own &lt;a href=&#34;http://eidhof.nl/trackme&#34;&gt;TrackMe&lt;/a&gt; website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://aplusplus.org/&#34;&gt;Uli&lt;/a&gt; also once said to me that the iPhone should
always be shown on a real background. &lt;a href=&#34;http://with.me/&#34;&gt;With&lt;/a&gt; is a perfect
example of this: they show people meeting each other on the background.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Good one-sentence explanation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the good app websites have one sentence that explains what they do, either
as the logo subtitle or just in a bold font:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://flipboard.com/&#34;&gt;Flipboard&lt;/a&gt; - &amp;#8220;This is your Flipboard. It&amp;#8217;s your social
magazine, now with more to enjoy&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://with.me&#34;&gt;With&lt;/a&gt;  - &amp;#8220;A fun, simple way to share who you&amp;#8217;re with&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://campl.us/&#34;&gt;Camera+&lt;/a&gt; - &amp;#8220;The ultimate photo app&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sylion.com/flightcard/&#34;&gt;Flight Card&lt;/a&gt; - &amp;#8220;Your boarding pass,
reinvented&amp;#8221;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;Start with the important things&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you open most of the websites, you see a logo, the screenshots, a brief
explanation and a &amp;#8220;Download on the App Store&amp;#8221; button, not much else. If you want
more information, sometimes you can scroll or page through the screenshot. On other websites, you can scroll down and see
more things, such as testimonials, feature lists and contact info.&lt;/p&gt;

&lt;p&gt;As a non-designer, that&amp;#8217;s the elements I could find in common. I will keep these
things in mind when I design the website for Met this week. If you know of any
other good ideas or app websites, let me know, and I&amp;#8217;ll update the post
accordingly.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Week 3: An App in Four Weeks</title>
          <link>http://chris.eidhof.nl/post/week-3-an-app-in-four-weeks/</link>
          <pubDate>Fri, 14 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/week-3-an-app-in-four-weeks/</guid>
          <description>&lt;p&gt;Today marks the end of Week 3 of my &lt;a href=&#34;http://chris.eidhof.nl/post/10680838726/one-app-in-four-weeks-kickoff&#34;&gt;App in Four
Weeks&lt;/a&gt;
challenge.&lt;/p&gt;

&lt;p&gt;This week I &lt;a href=&#34;http://chris.eidhof.nl/post/11323208696/introducing-met&#34;&gt;chose a
name&lt;/a&gt;. I
designed an icon and overall style for the app. I then spent quite some time
implementing autorotation, and getting it exactly right. There is now a passcode
lock too.&lt;/p&gt;

&lt;p&gt;By nature, I am not a perfectionist. Whenever I see that something works, I tend
to lose interest in finishing it. For me, shipping things is a big deal, and
hard to do. Normally, I lack the willpower to do polish and finish things. By making
a very public commitment to build this app in four weeks, and by writing about  it
here, I can outsource my willpower: polishing and shipping becomes a
lot easier. Delivering a bad app or not delivering at all would feel like a big
embarrassment.&lt;/p&gt;

&lt;p&gt;So far, the process has been a marvelous experience. I had so much help from everybody:
people who have feature requests, name suggestions, design suggestions, beta
testers, people who tell me that they like this blog, and so on. If you consider
doing something similar, I can only recommend it. My work becomes a lot better
by doing this, and people who read this hopefully learn and get inspired, a
win-win situation.&lt;/p&gt;

&lt;p&gt;Next week, I will not add any new big features, but instead polish what I have
so far, set up a website and make a marketing plan. From Wednesday on I am
volunteering at multi-day trail race, so I am not sure how much time I will have
to work on Met.&lt;/p&gt;

&lt;p&gt;If there is any part of the process that you would like me to write about,
please let me know.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>New build and screenshots</title>
          <link>http://chris.eidhof.nl/post/new-build-and-screenshots/</link>
          <pubDate>Thu, 13 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/new-build-and-screenshots/</guid>
          <description>&lt;p&gt;A new build should arrive in the inbox of the beta testers right about now. It&amp;#8217;s
almost the same as described yesterday, except with less bugs. My energy is a bit low today,
so instead of text, here are some screenshots of the current state of the app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/passcode-screen.png&#34; alt=&#34;Passcode screen&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/portrait-entering-note.png&#34; alt=&#34;Entering a note in portrait mode&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/landscape-entering-note.png&#34; alt=&#34;Entering a note in landscape mode&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/contact-notes.png&#34; alt=&#34;Listing all notes for a contact&#34;/&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Rotation fun</title>
          <link>http://chris.eidhof.nl/post/rotation-fun/</link>
          <pubDate>Wed, 12 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/rotation-fun/</guid>
          <description>&lt;p&gt;Today I spent a lot of time implementing landscape orientation, next to portrait
orientation (as this gives you a bigger keyboard). However, in the end I managed
to nail it, I think. Everything resizes, moves around and plays nice with
showing and hiding the keyboard.&lt;/p&gt;

&lt;p&gt;I also added hover effects for the passcode buttons, designed the section
header, changed the passcode screen slightly, added swipe to delete and changed
the selection color of the text. Also, you can now go to the contact&amp;#8217;s details
from the meetup details screen. Thanks to Eelco and Martijn for pointing out
some of these bugs and issues.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://schwuk.com/&#34;&gt;Dave Murphy&lt;/a&gt; wrote in to ask why I designed a splash screen instead of showing
an empty UI (the last is recommended by Apple). As I expect most users to secure
their app with a passcode, the splash screen is the background for the passcode
screen as well. When you start the app, the passcode keyboard will slide in.
Although Dave might be right, I think I&amp;#8217;ll leave it like this for now.&lt;/p&gt;

&lt;p&gt;He also asked if I considered the icon with just the &amp;#8216;m&amp;#8217;, and I haven&amp;#8217;t. I&amp;#8217;ll
experiment with that tomorrow!&lt;/p&gt;

&lt;p&gt;I won&amp;#8217;t release another beta today, as I want to fix some outstanding bugs
tomorrow, but the beta testers can expect a new version at the end of the
afternoon (in Europe).&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Introducing Met</title>
          <link>http://chris.eidhof.nl/post/introducing-met/</link>
          <pubDate>Tue, 11 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/introducing-met/</guid>
          <description>&lt;p&gt;After yesterday&amp;#8217;s post, a lot of people contacted me with ideas for a name.
Thanks Pim, Martijn, Miles, Wilfred and Fabian (I hope I didn&amp;#8217;t forget
somebody). Some liked James, some liked Meetups, all with good reasons.&lt;/p&gt;

&lt;p&gt;However, one reply stood out: &lt;a href=&#34;http://iksi.tv&#34;&gt;Jurriaan&lt;/a&gt; had an idea for a
more minimalistic name: &amp;#8220;Met&amp;#8221;. Short and to the point. It&amp;#8217;s about who you met.
The best thing is: in Dutch it means &amp;#8220;with&amp;#8221;, and this is about who you were
with. Awesome!&lt;/p&gt;

&lt;p&gt;Today I started designing a splash screen and an icon (see below). I also added
an optional passcode lock (as this can be very private data). Getting the design
and logic right took a bit of thinking and experimenting, but I think it&amp;#8217;s good
now. It&amp;#8217;s enabled whenever you start the app, or resume the app (for example,
after you lock the screen, switch to a different app or get a phone call).&lt;/p&gt;

&lt;p&gt;Martijn and Eelco send in a bunch of very good feature requests / tips today, thanks guys!
To give a glimpse of my next actions:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Pressed state for passcode buttons&lt;/li&gt;
&lt;li&gt;Use secure passcode storage (currently, I hacked it together using
NSUserDefaults, which is unsafe)&lt;/li&gt;
&lt;li&gt;Swipe to delete&lt;/li&gt;
&lt;li&gt;Text color for selected tableview cells&lt;/li&gt;
&lt;li&gt;Link to Address Book from a contact / meetup&lt;/li&gt;
&lt;li&gt;Screen rotation support (as this gives you a bigger keyboard)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I will also add search, eventually. It&amp;#8217;s a bit complicated, because I&amp;#8217;ll have to
compile my own sqlite library, and I&amp;#8217;m a bit afraid that it might break in the
future. However, analysis paralysis is a horrible thing, and making decisions is
a good thing, so I decided to first do all the other stuff and then think about
it again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/splashscreen.png&#34; alt=&#34;Splash Screen&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/icon-v1.png&#34; alt=&#34;Icon&#34;/&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Beta and Branding</title>
          <link>http://chris.eidhof.nl/post/beta-and-branding/</link>
          <pubDate>Mon, 10 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/beta-and-branding/</guid>
          <description>&lt;p&gt;This is the start of week 3 of my &lt;a href=&#34;http://chris.eidhof.nl/post/10680838726/one-app-in-four-weeks-kickoff&#34;&gt;One App in Four
Weeks&lt;/a&gt;
project. Last Friday, I sent out the first beta version, and just sent an update
(with mostly bugfixes).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://martijnreintjes.com/&#34;&gt;Martijn Reintjes&lt;/a&gt; suggested that I should change Checkins
to Meetups, and I couldn&amp;#8217;t agree more. I wasn&amp;#8217;t happy with Checkins to start
with, and this makes it a lot simpler. Thanks dude!&lt;/p&gt;

&lt;p&gt;Because I wanted to be future-proof, I decided to change it everywhere in the
code too. This took a while, refactoring all the code and setting up a Core Data
migration. It turns out that XCode 4 is still a bit buggy when it comes to
migrations, but after trying the same thing three times it worked (seriously).&lt;/p&gt;

&lt;p&gt;This weekend I was thinking about the name and branding. I currently have two options:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meetups&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This name describes exactly what it does. Meetups. There is no other app with
that name yet, although there is the Meetup.com platform, which might be
confusing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;James&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the name I like the most so far: calling it James. James helps you to
record who you meet. James treats your information as confidential. James
doesn&amp;#8217;t get in the way. James is personal. I was thinking of using an image
similar to this for the logo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/man.png&#34; alt=&#34;James&#34;/&gt;.&lt;/p&gt;

&lt;p&gt;As always, let me know what you think: send an email or mention/message me on Twitter.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>iOS products are a local optimum</title>
          <link>http://chris.eidhof.nl/post/ios-products-are-a-local-optimum/</link>
          <pubDate>Sat, 08 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/ios-products-are-a-local-optimum/</guid>
          <description>&lt;p&gt;This morning, I was sitting in the booming heart of Seville, sipping my caf? con
leche and reading &lt;a href=&#34;http://zackarymorris.tumblr.com/post/10973087527/the-state-of-the-art-is-terrible&#34;&gt;The
State of the Art is
Terrible&lt;/a&gt;
by Zack Morris. A great read indeed.&lt;/p&gt;

&lt;p&gt;It then finally dawned on me: most apps are a local optimum. This includes
most of the apps I&amp;#8217;ve worked on, including the most successful ones. Another
fine example is the gorgeous &lt;a href=&#34;http://itunes.apple.com/nl/app/thermo/id414215658?mt=8&#34;&gt;Thermo&lt;/a&gt; app. Even though I love using it, it is just
another way to view the weather forecast. It hardly adds any value to the world.&lt;/p&gt;

&lt;p&gt;I disagree with Zack about whether the iPad is changing computing. I think it
does, because it opens up computing to a much bigger audience. It makes it more
accessible for big groups of people (very young people, old people and people who
aren&amp;#8217;t technically minded). This is a big step forward.&lt;/p&gt;

&lt;p&gt;However, most of the things you can do on an iPad were possible on desktop
computers as well. We are advancing, but the applications don&amp;#8217;t necessarily get
smarter. Most of the applications that get released are just a beautiful
skin with basic functionality.&lt;/p&gt;

&lt;p&gt;Now, I don&amp;#8217;t think all hope is lost. Even though we aren&amp;#8217;t creating smarter
applications yet, we at least have improved one massively important factor:
usability. Now is the time to put our CS degrees to good use and make the
applications more intelligent. I think Siri is a great example of this. It&amp;#8217;s
very advanced, but they hid everything behind the most simple user interface
possible.&lt;/p&gt;

&lt;p&gt;As for me, I&amp;#8217;m sticking to making relatively simple applications, for now. I don&amp;#8217;t
mind the local optimum. I&amp;#8217;ll try to set up a passive income so I
can work on bigger things. Hopefully, it won&amp;#8217;t be very long before I get there.
Also, I have so much to learn regarding the building of products, designing and
marketing, which will be very useful once I will build bigger things.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t think the MVP strategy will take us to huge innovations. It is
great for the products I want to build now, but for really big things, we
probably need a different strategy. This is also expressed in the article &lt;a href=&#34;http://www.nytimes.com/2011/10/07/opinion/the-man-who-inspired-jobs.html&#34;&gt;The
Man Who Inspired
Jobs&lt;/a&gt;. I
especially liked the quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Market research is what you do when your product isn?t any good.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, you have to have the right background to say this. For an entrepreneur
like me, with hardly any experience, this is not true. I&amp;#8217;ll make sure to get my
experience in building products, and then I&amp;#8217;ll try to build bigger things.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3087757&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Week 2: design improvements</title>
          <link>http://chris.eidhof.nl/post/week-2-design-improvements/</link>
          <pubDate>Fri, 07 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/week-2-design-improvements/</guid>
          <description>&lt;p&gt;This post is about Week 2 of my &lt;a href=&#34;http://chris.eidhof.nl/post/10680838726/one-app-in-four-weeks-kickoff&#34;&gt;One App in Four Weeks&lt;/a&gt; project.&lt;/p&gt;

&lt;p&gt;This week was a bit strange, in many ways. For me, it didn&amp;#8217;t feel like a productive week. On Monday
and Tuesday I got some things done, Wednesday I was travelling (but thinking)
and Thursday I spent most of the day creating a custom design in Photoshop. I
then decided that it wasn&amp;#8217;t good enough. Instead, I chose to go for the default styles used in
all of Apple&amp;#8217;s apps and Twitter. If it is good enough for &lt;a href=&#34;http://www.atebits.com/&#34;&gt;Loren
Brichter&lt;/a&gt;, it is good enough for me.&lt;/p&gt;

&lt;p&gt;I didn&amp;#8217;t implement search functionality yet. Because I had to do lots of messy
stuff (such as creating a custom version of sqlite), I stepped back and thought
about whether I would need it. For now, I&amp;#8217;ll stay lean and not add it, and see
if it will become necessary.&lt;/p&gt;

&lt;p&gt;I also removed the location feature (because it wasn&amp;#8217;t implemented yet). I don&amp;#8217;t
think it is necessary, although it would make a nice add-on. I look forward to
the beta-testers&amp;#8217; feedback to see what they think of it.&lt;/p&gt;

&lt;p&gt;Today I spent polishing the features I had, trying to minimize the UI and keep
everything very simple. The app is now quite minimal, but it does the
job. Now it&amp;#8217;s time to send out some beta&amp;#8217;s!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/screenshot-1.png&#34; alt=&#34;Recent Checkins&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/screenshot-2.png&#34; alt=&#34;Creating a Checkin&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/screenshot-3.png&#34; alt=&#34;Contact List&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/screenshot-4.png&#34; alt=&#34;View Checkins for a Contact&#34;/&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>RIP Steve Jobs</title>
          <link>http://chris.eidhof.nl/post/rip-steve-jobs/</link>
          <pubDate>Thu, 06 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/rip-steve-jobs/</guid>
          <description>&lt;p&gt;When I started to read the news this morning, I couldn&amp;#8217;t believe it. It felt very surreal. Not completely awake yet, I opened up other news sites to make sure it wasn&amp;#8217;t a mistake.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not sure how I feel. Mostly, I feel love. I am impressed by the products Apple made and the inspiration they gave everybody. If there&amp;#8217;s one company that I love, it must be Apple. And loving Apple implies loving Steve Jobs.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;http://www.marco.org/2011/10/05/steve-jobs-dies&#34;&gt;Marco said&lt;/a&gt;, I don&amp;#8217;t feel at all qualified to write this, but it feels inappropriate to do something else.&lt;/p&gt;

&lt;p&gt;Thank you for everything.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Selecting People Faster</title>
          <link>http://chris.eidhof.nl/post/selecting-people-faster/</link>
          <pubDate>Tue, 04 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/selecting-people-faster/</guid>
          <description>&lt;p&gt;Today, I fixed some minor things in the code, and simplified the workflow. In
the previous version, when checking in, you were presented with a list of
people. After that, you could do the checkin.&lt;/p&gt;

&lt;p&gt;In the current version, it works much like sending an email or sms: you start by
typing somebody&amp;#8217;s name, and you will see a list of people below (see the
screenshot). After you click
on a name, you can continue with typing the note.
This makes adding a note (the most important workflow in the app) a lot faster.&lt;/p&gt;

&lt;p&gt;Tomorrow, I will be travelling again. Part of it will be the three hour train
ride from Granada to Seville, which means I will have some time for hacking. I&amp;#8217;m
hoping to implement the grouping by first letter for the People view (just like
in Address Book) and start work on the search functionality (which means I will
have to compile my own version of sqlite).&lt;/p&gt;

&lt;p&gt;The app is almost ready for beta testing. If you plan on using this app, please
&lt;a href=&#34;mailto:chris+beta@eidhof.nl&#34;&gt;send me an email&lt;/a&gt; and I will send you instructions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/Photo%2004-10-11%2018%2025%2008.png&#34; alt=&#34;Address Book searching&#34;/&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Start of Week 2</title>
          <link>http://chris.eidhof.nl/post/start-of-week-2/</link>
          <pubDate>Mon, 03 Oct 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/start-of-week-2/</guid>
          <description>&lt;p&gt;Today is the start of the second week of the &lt;a href=&#34;http://chris.eidhof.nl/post/10680838726/one-app-in-four-weeks-kickoff&#34;&gt;One App in Four
Weeks&lt;/a&gt;
challenge.&lt;/p&gt;

&lt;p&gt;Last Friday, I added tabs to the application: one for the most recent checkins,
and one for the list of contacts. More tabs will probably come, such as search
and settings.&lt;/p&gt;

&lt;p&gt;This week, I will try to get the functionality done. I need to add a Person view
(after you press on a Person you see the history), fix some shortcuts I took,
add search and add a passcode lock (as Lucas said, this is indeed a very
sensitive application).&lt;/p&gt;

&lt;p&gt;As &lt;a href=&#34;https://twitter.com/#!/robertgaal&#34;&gt;Robert&lt;/a&gt; mentioned on Twitter, it would be nice
if you can minimize the amount of input. He suggested not doing free text input,
and while I agree that would be nice I still think it&amp;#8217;s valuable to have a
free text input (although smart autocompletion could help out in
minimizing the amount you need to type).&lt;/p&gt;

&lt;p&gt;After the implementation, the next steps would be to work on the branding and
the design. I am a bit afraid of the design part, as I am not a very good
designer (I don&amp;#8217;t have a great eye for detail and sometimes lack the patience
when designing). So for the designers who are reading along, I would be very
interested in your ideas.&lt;/p&gt;

&lt;p&gt;For the branding, I thought of a great name (Dossier), but it&amp;#8217;s already used by
some other apps (one of which does a similar thing). However, I didn&amp;#8217;t really
put any effort into it so far, so after a good brainstorming session I&amp;#8217;ll come up with a name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/IMG_1251.PNG&#34; alt=&#34;Recent Checkins&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/IMG_1252.PNG&#34; alt=&#34;Contact List&#34;/&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>One App in Four Weeks: Week 1</title>
          <link>http://chris.eidhof.nl/post/one-app-in-four-weeks-week-1/</link>
          <pubDate>Fri, 30 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/one-app-in-four-weeks-week-1/</guid>
          <description>&lt;p&gt;This Monday, I started &lt;a href=&#34;http://chris.eidhof.nl/post/10680838726/one-app-in-four-weeks-kickoff&#34;&gt;One App in Four
Weeks&lt;/a&gt;.
I started by posting a list of ideas. The third idea was the most appealling to
people (although I still want to build the other two as well, but not now), and
I got some great feedback from everybody.&lt;/p&gt;

&lt;p&gt;I selected the idea and &lt;a href=&#34;http://chris.eidhof.nl/post/10723613553/check-in-to-people&#34;&gt;defined the Minimum Viable
Product&lt;/a&gt;,
which is quite simple: you can check in to people, add a time and note to that
checkin and possibly a location as well.&lt;/p&gt;

&lt;p&gt;Yesterday I wrote about the first &lt;a href=&#34;http://chris.eidhof.nl/post/10801169656/sketches-and-ideas&#34;&gt;sketches and
ideas&lt;/a&gt;, and
after that I started working on the very first version.&lt;/p&gt;

&lt;p&gt;Normally I don&amp;#8217;t show these first versions to people, but because I want to show
you all the steps I&amp;#8217;ll include the screenshots today. The app is barely
functional: you see a list of Checkins, and when you press the &amp;#8216;+&amp;#8217; button it
shows the list of your contacts in Address Book. Tapping on a contact takes you
to the &amp;#8216;Add Checkin&amp;#8217; screen, where you can add a note. The time is not
changeable yet, and the location isn&amp;#8217;t implemented at all. When you then press
&amp;#8216;Done&amp;#8217; you&amp;#8217;ll go back to the start screen, and the checkin was added. You can
also edit it again by tapping on it.&lt;/p&gt;

&lt;p&gt;For the location, I&amp;#8217;m thinking of using the Foursquare API, which can provide
you with venue information based on lat/lon. I&amp;#8217;ll probably store the locations
and try to find a previously used location when possible (about half the time I
meet people it&amp;#8217;s in the same places).&lt;/p&gt;

&lt;p&gt;I also had some ideas about searching: I want to index all the words in the
checkin database, and do autocompletion using those words. This means that
searching can be a very fast experience. Search could probably be quite
important: I can also imagine it&amp;#8217;s handy if I want to find a PHP developer in my
network (I always forget who knows which languages).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3056207&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/IMG_1194.PNG&#34; alt=&#34;List of Checkins&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/IMG_1197.PNG&#34; alt=&#34;Checkin Screen&#34;/&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Sketches and ideas</title>
          <link>http://chris.eidhof.nl/post/sketches-and-ideas/</link>
          <pubDate>Thu, 29 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/sketches-and-ideas/</guid>
          <description>&lt;p&gt;Although I was traveling yesterday, I sketched some small mockups for the
Contacts app. The idea for the app had come when the genius Lucas Tieleman explained to me
how he keeps a small book with notes about everyone. Yesterday he sent an email
with the notes he had about me: it&amp;#8217;s fun and only freaked me out a little
bit (not as much as I expected). He&amp;#8217;s a very early adopter of new technology,
and he wanted this on his iPhone.&lt;/p&gt;

&lt;p&gt;One of the things he suggested was adding a game element. I&amp;#8217;m not sure if that&amp;#8217;s
a good idea: although it would be fun at first, I think game elements get
annoying later. One &amp;#8220;game-ish&amp;#8221; option would be to have a calendar view showing
how many notes you made that day, and when you see it you will want to have at
least one note a day (hopefully).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tupil.com&#34;&gt;Eelco&lt;/a&gt; also pointed out &lt;a href=&#34;http://with.me/&#34;&gt;With&lt;/a&gt; by Path. Just like
&lt;a href=&#34;http://hashable.com/beta&#34;&gt;Hashable&lt;/a&gt;: while there is great inspiration in there,
I think they both focus way too much on social networks and sharing. Especially for the purpose
I had in mind (taking notes about people) this is scary. As Lucas also noted:
some if this stuff is really private.&lt;/p&gt;

&lt;p&gt;Today I&amp;#8217;ll probably start a new XCode project and quickly implement
an app that&amp;#8217;s usable for me, and iterate upon that. For now, here&amp;#8217;s two of the
sketches I made yesterday (although they are already outdated):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/IMG_1192.jpg&#34; alt=&#34;Check In Screen&#34;/&gt;&lt;img src=&#34;http://dl.dropbox.com/u/1264810/blog-content/IMG_1193.jpg&#34; alt=&#34;Person Screen&#34;/&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Check In to People</title>
          <link>http://chris.eidhof.nl/post/check-in-to-people/</link>
          <pubDate>Tue, 27 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/check-in-to-people/</guid>
          <description>&lt;p&gt;As I wrote in &lt;a href=&#34;http://chris.eidhof.nl/post/10680838726/one-app-in-four-weeks-kickoff&#34;&gt;yesterday&amp;#8217;s post&lt;/a&gt;, I&amp;#8217;m going to build an app in four weeks. Now
I&amp;#8217;ve chosen the idea that I&amp;#8217;m going to build: check in to people. This will give
you an archive of when you met people. After you check in, you can add notes and
maybe pictures.&lt;/p&gt;

&lt;p&gt;Yesterday I&amp;#8217;ve thought about the next steps and about the minimum viable
product, and researched existing apps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Existing Software&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It looks like there is one app that does something similar, it&amp;#8217;s called
&lt;a href=&#34;http://www.fellowup.com/&#34;&gt;FellowUp&lt;/a&gt;. However, it doesn&amp;#8217;t include the time
aspect as much as I want to.&lt;/p&gt;

&lt;p&gt;I also stumbled on a blog post by Loic Le Meur, founder of Seesmic and
LeWeb.net, who describes a &lt;a href=&#34;http://loiclemeur.com/english/2011/03/its-time-for-personal-asshole-proof-crm.html&#34;&gt;Personal
CRM&lt;/a&gt;
system. This is some nice validation. People like Loic are my potential market.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;MVP&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The Minimum Viable Product is an app with two features: check in and review.
If you press &amp;#8220;Check In&amp;#8221;, you can choose a person from your Address Book (or add
somebody). Then you can choose the date and time (which is pre-set to the
current date and time). You can add notes directly, or later on.&lt;/p&gt;

&lt;p&gt;If you press &amp;#8220;People&amp;#8221;, you get a list of your contacts. You can browse them
alphabetically, and selecting a contact gives you the full history of your
check-ins with that person.&lt;/p&gt;

&lt;p&gt;Finally, if you press &amp;#8220;Archive&amp;#8221; you get a list of your check-ins, sorted by
date. For example, if you use Getting Things Done you can use it for your weekly
reviews.&lt;/p&gt;

&lt;p&gt;There are a &lt;em&gt;lot&lt;/em&gt; of other features I thought of, but this will be the MVP.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Business Model&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I can see two straightforward options for the business model: a free app that
allows you to purchase extra features or a paid app. A third option would be to
have a subscription service, but I think that should only be done if there is a
server component included (for example, a plugin in GMail). I have to think of a
good price. Because it&amp;#8217;s a niche app, it won&amp;#8217;t be 99 cents, but probably
something like $4.99. Any tips on the pricing would be much appreciated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Next Steps&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Start drawing prototypes&lt;/li&gt;
&lt;li&gt;Think about who my market is, exactly, and how to market it to them&lt;/li&gt;
&lt;li&gt;Think about the branding of the app (name, visual design, icon)&lt;/li&gt;
&lt;li&gt;Build a working prototype&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;As always, the marketing will be the most difficult for me. I&amp;#8217;ll have to think hard about that.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Right after publishing this post, I found out about &lt;a href=&#34;http://hashable.com/&#34;&gt;Hashable&lt;/a&gt;. It&amp;#8217;s a very similar tool, however, it&amp;#8217;s a service that requires you to login, and it&amp;#8217;s social (you can share things with people). I envisioned a product where everything stays on your iPhone. I&amp;#8217;ll have to think if this is a good reason to quit the project or if it&amp;#8217;s the perfect validation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3042712&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>One app in four weeks: kickoff</title>
          <link>http://chris.eidhof.nl/post/one-app-in-four-weeks-kickoff/</link>
          <pubDate>Mon, 26 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/one-app-in-four-weeks-kickoff/</guid>
          <description>&lt;p&gt;When I woke up this morning I heard the sound of the Mediterranean sea and saw
palm trees out the window. Yesterday night I arrived in Malaga, Spain. I&amp;#8217;ll be
slowly travelling around the area for the next few weeks. I probably won&amp;#8217;t be
working full days, as it&amp;#8217;s very beautiful here, and there are a lot of things to
see and do.&lt;/p&gt;

&lt;p&gt;Originally, I had a nice plan for my work-related time during these weeks: build
four apps in four weeks. I really liked the idea: build a simple app and get it
out as quickly as I can. While I still like the idea, Jay Fuerstenberg had a
great comment on that: &lt;a href=&#34;https://twitter.com/#!/jayfuerstenberg/status/115773083461234688&#34;&gt;@chriseidhof I&amp;#8217;d rather see you think for 1 week on a
great app and make it in 3 weeks. #AppStore has enough junk
apps&lt;/a&gt;. Very
true.&lt;/p&gt;

&lt;p&gt;Therefore, I&amp;#8217;ll do things differently: I&amp;#8217;ll make an app in four weeks. This
week, I&amp;#8217;m going to evaluate three ideas and draw out sketches and interface
prototypes. I&amp;#8217;ll try to post an update almost daily.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll try to document the whole process of building an app on this blog: choosing
an idea, going from sketches to a prototype to a working version, and polishing
the app.  I&amp;#8217;ll talk about the branding and marketing, and I would really
appreciate your comments on everything.&lt;/p&gt;

&lt;p&gt;My &lt;em&gt;first idea&lt;/em&gt; is an app for learning how to do something: like an ebook, but
designed for iPad from the ground up: way more interactive, with something to do
for almost every page. Writing, design and coding will go hand in
hand. I&amp;#8217;m not sure what the topic should be: learning HTML 5, learning to
negotiate, learning a part of math interactively (for example, differentiation)
or learning basic iPhone programming.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;second idea&lt;/em&gt; is an iPad app for building interactive iPhone prototypes. A
friend of mine asked me why there is no decent one yet, they are all too
complicated. I haven&amp;#8217;t researched this area yet, so maybe it already exists.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;third idea&lt;/em&gt; is an iPhone app for making notes about people. I meet
a lot of people, and I would like to start making notes about them. After meeting
them, I&amp;#8217;ll jot down a few notes, and the next time I meet a person I can see a
history of the meetings we had, and maybe also quickly browse his social profiles (in a
similar way to Rapportive). I can also imagine a &amp;#8220;check-in&amp;#8221; like function, where
you only record that you met the person, including the place and time.&lt;/p&gt;

&lt;p&gt;I would love to hear your thoughts. Which of these apps would you like to see?
Please leave a comment, and I&amp;#8217;ll try to pick the right idea tomorrow or the
day after that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3037924&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Trust your geeks</title>
          <link>http://chris.eidhof.nl/post/trust-your-geeks/</link>
          <pubDate>Thu, 22 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/trust-your-geeks/</guid>
          <description>&lt;p&gt;15 years ago, my local library had a night about &amp;#8220;The Internet&amp;#8221;. At that time, I
read bits about it in a science magazine, and I was fascinated and
persuaded my dad to take me there. That night, a guy came and talked to us about
what the internet was, and what you could do. He sent an email to the White
House, and got a reply within half an hour! I was so drawn to this new
technology, and wanted to know more about it. Shortly after, the library got an
internet connection, and I was browsing the web for 5 guilders an hour, spending
all the money I made from delivering newspapers.&lt;/p&gt;

&lt;p&gt;My fellow geek friends and I started blogging years ago (back when LiveJournal
was still big and WordPress unknown). We talked about our personal lives, and
some people found out the hard way that even a private blog is public.&lt;/p&gt;

&lt;p&gt;Around 2004, some friends bought a Mac, when it was still very uncommon. I bought one
shortly after that (my main excuse was &amp;#8220;so that I can run Photoshop and Unix
at the same time&amp;#8221;). Another few months later everybody was buying Macs.&lt;/p&gt;

&lt;p&gt;I noticed that whenever we geeks were passionate about some technology, and
really got into something, the mainstream would follow a few years later. This
applies to computers, internet, Facebook, smartphones, mobile internet and more.&lt;/p&gt;

&lt;p&gt;These are the current feelings I have about technology: I don&amp;#8217;t want to be
connected all the time anymore. I want an information diet. I want real
experiences instead of online ones. I think most websites suck, most iPhone apps
are great (beautiful, minimal, fast, to the point). There is too much noise on
the internet. People are taking breaks from technology. It&amp;#8217;s becoming harder to
focus for a long time, but I really want that.&lt;/p&gt;

&lt;p&gt;I mostly wrote this article for future reference: I wonder which of these
feelings will become mainstream. For example, Facebook is still growing, but
I think it&amp;#8217;s going to become obsolete. People want real experiences. When I tell
a story, I don&amp;#8217;t want people to say: &amp;#8220;Yeah, I read that on Facebook&amp;#8221;. I think
geeks are an especially good predictor of what will happen with technology, and
I&amp;#8217;m starting to notice the above feelings more and more around me.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3026079&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Niche and Top Lists apps</title>
          <link>http://chris.eidhof.nl/post/niche-and-top-lists-apps/</link>
          <pubDate>Wed, 21 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/niche-and-top-lists-apps/</guid>
          <description>&lt;p&gt;At yesterday&amp;#8217;s CocoaHeads meetup, I was discussing with Ben the marketing
strategy for his app, &lt;a href=&#34;http://boonbits.com/captio/&#34;&gt;Captio&lt;/a&gt;. It is aimed at people who want to capture their
notes quickly: as soon as you open the app, it shows an input field, end when
you press &lt;em&gt;Send&lt;/em&gt; the note is emailed to yourself. It&amp;#8217;s been my favorite app for
a long time.&lt;/p&gt;

&lt;p&gt;The problem with Captio is that it is mostly useful for a niche group: people
who capture their ideas a lot. Ben asked me if I know ways of getting more
customers. I told him his target audience needs to read about it, for example on
lifehacking and Getting Things Done sites. He told me they already do.&lt;/p&gt;

&lt;p&gt;So this is when I realized again the clear difference between apps: your apps
are either a niche or a top-lists app. If you build a niche app, you have to be
findable. Make sure your audience reads about you in their favorite publications
(whether it&amp;#8217;s online or offline), and make sure they can find you in the App
Store.&lt;/p&gt;

&lt;p&gt;If you build a top-lists app, make sure you get to the top lists. Your audience
is going to be very big, and it&amp;#8217;s going to be hard to market them. To do this,
your app needs to be extremely awesome or you need to be very good at marketing (or both).&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t think there&amp;#8217;s much in between these two categories. Sure, those apps
exist, but they probably don&amp;#8217;t sell a lot. So with every app your making, ask
yourself the question: is it going to be niche and findable, or am I planning to
win the lottery?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3021111&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>TrackMe plans</title>
          <link>http://chris.eidhof.nl/post/trackme-plans/</link>
          <pubDate>Tue, 20 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/trackme-plans/</guid>
          <description>&lt;p&gt;Last month, I made ? 99.54 from selling &lt;a href=&#34;http://eidhof.nl/trackme&#34;&gt;TrackMe&lt;/a&gt;. The first day I sold about
60 copies, and the rest of the sales was spread out over the month.&lt;/p&gt;

&lt;p&gt;The reason why I sold so little is that I didn&amp;#8217;t do any marketing. I set up a
blog for the app, and talked about it on this blog. I announced it on Twitter,
and wrote a blog post about &lt;a href=&#34;http://trackmeapp.tumblr.com/post/9920687010/10-cool-things-you-can-do-with-a-gpx-file&#34;&gt;10 cool things you can do with a GPX
file&lt;/a&gt;.
I would promote it more under my own account, but don&amp;#8217;t want to be spammy.&lt;/p&gt;

&lt;p&gt;Over the last weeks, a friend has written a (Dutch) &lt;a href=&#34;http://eidhof.nl/trackme/press/release-2011-09-20.html&#34;&gt;press
release&lt;/a&gt; for me, which
we sent out today. We&amp;#8217;ll publish the English version in the next days. I think
this could generate some buzz.&lt;/p&gt;

&lt;p&gt;For the next months, I think I&amp;#8217;ll spend time improving the app design (although
I&amp;#8217;m still not sure what to do with the big blue dots) and marketing it. I&amp;#8217;ll set
some goals and make a plan to reach them.  One of the things I&amp;#8217;d like to achieve
is getting retweeted by Lonely Planet, because I think the app could
particularly appeal to travelers.&lt;/p&gt;

&lt;p&gt;Knowing that a hundred people want to use this app makes me confident that
there is a market. With the limited marketing I did, I don&amp;#8217;t think it&amp;#8217;s a bad
number. I should at least be able to increase that by 10.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Communicate Often</title>
          <link>http://chris.eidhof.nl/post/communicate-often/</link>
          <pubDate>Mon, 19 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/communicate-often/</guid>
          <description>&lt;p&gt;This advice is for freelancers: please communicate as often as possible. When
somebody hires you, they want to know what&amp;#8217;s going on. Sometimes you get so
caught up in trying to make a deadline or staying productive, and forget to
communicate. For a client, this can be frustrating, because it looks like
nothing happens (while you were even busier than you would normally be).&lt;/p&gt;

&lt;p&gt;In my opinion, bad communication is one of the hardest problems in technology (and in life in general). Improving your communication is always a good thing.&lt;/p&gt;

&lt;p&gt;If I were your client, I would definitely appreciate these things:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Let me know when you know you won&amp;#8217;t make the deadline.&lt;/li&gt;
&lt;li&gt;Ask me if you don&amp;#8217;t understand something.&lt;/li&gt;
&lt;li&gt;If something is a bad idea, please say so. It&amp;#8217;s your professional responsibility.&lt;/li&gt;
&lt;li&gt;Send progress reports&lt;/li&gt;
&lt;li&gt;Let me know when you will contact me again.&lt;/li&gt;
&lt;li&gt;If you&amp;#8217;re too busy to reply, please say so.&lt;/li&gt;
&lt;li&gt;If you work for a fixed price, but I&amp;#8217;m requesting something outside of the budget, let me know.&lt;/li&gt;
&lt;li&gt;If something unexpected happens that will delay things, please let me know.&lt;/li&gt;
&lt;li&gt;If you need my feedback on something, please make sure I understand it&amp;#8217;s a
question.&lt;/li&gt;
&lt;li&gt;Send emails that are to the point: explain things in short, understandable
phrases.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;I&amp;#8217;ve yet to hire somebody who communicates too often. In true Gruber style, I wrote this 
and imagined myself as the audience: my own communication would improve a lot 
if I followed the advice in this post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3014143&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>AirBnB for dogs</title>
          <link>http://chris.eidhof.nl/post/airbnb-for-dogs/</link>
          <pubDate>Fri, 16 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/airbnb-for-dogs/</guid>
          <description>&lt;p&gt;Are you thinking of building a new website? Or an app? AirBnB for dogs? A
Groupon/Twitter/Facebook mashup? Mobile first? Sometimes it&amp;#8217;s kind of hard to see, it looks like all the good ideas are taken already, and we can only combine existing ones. It&amp;#8217;s all kinds of products. As an app developer, I sometimes think all the apps are already built.&lt;/p&gt;

&lt;p&gt;I had a perfectly good idea two months ago: a YouTube remote, where you control
YouTube from your iPhone. It exists: &lt;a href=&#34;http://tubemote.com/&#34;&gt;TubeMote&lt;/a&gt;. I think
it&amp;#8217;s executed very well, better than the execution I had in mind.&lt;/p&gt;

&lt;p&gt;As a small gig, I was asked a little while ago to write the functional design for a
new website of a medium-sized trading company that sells and rents out big hydraulic
machines. They were one of the first companies in their branch with a website,
about 10 years ago. They never updated it.&lt;/p&gt;

&lt;p&gt;Even though the company makes a significant amount of money from international
customers who find them through the website, they didn&amp;#8217;t do anything about the site. 
It&amp;#8217;s not that they were putting it off: they just didn&amp;#8217;t realize it, and didn&amp;#8217;t really care about it.&lt;/p&gt;

&lt;p&gt;The new website will be optimized for search engines, organized pages, with
explanations about the products, videos, good copywriting, well-thought out
navigation, a decent visual design and prepared for mobile browsers.&lt;/p&gt;

&lt;p&gt;Driving home from one of the meetings I realized: we&amp;#8217;re just at the
beginning. There is still so much stuff to build. Instead of building YouTube
remotes, we should get out there and
talk to companies &lt;em&gt;outside&lt;/em&gt; of IT. We need to build the stuff they need. I thought the apps
market was saturated, but there are still so many companies who don&amp;#8217;t even have
a decent website yet. Let&amp;#8217;s help them.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3004918&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lost In Translation</title>
          <link>http://chris.eidhof.nl/post/lost-in-translation/</link>
          <pubDate>Tue, 13 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/lost-in-translation/</guid>
          <description>&lt;p&gt;One of the hardest part in software development is communication. I don&amp;#8217;t mean
network communication, but person-to-person communication. This is one reason
why it&amp;#8217;s so convenient to work alone on your pet projects: you don&amp;#8217;t have to
communicate at all.&lt;/p&gt;

&lt;p&gt;Every time you communicate, there is noise in the signal. Because both parties
have different backgrounds, you lose part of the message whenever you talk to
somebody else. In general, the more similar the backgounds (e.g. two programmers talking to
each other), the smaller the error rate.&lt;/p&gt;

&lt;p&gt;It is extremely important to realize this, especially when talking to people
outside of your occupation. On of the best examples I&amp;#8217;ve seen was by &lt;a href=&#34;http://sam.aaron.name/&#34;&gt;Sam
Aaron&lt;/a&gt;. A few years ago, he showed me a DSL he
implemented in Ruby to encode his clients&amp;#8217; logic. In true DSL fashion, his
language exactly described their problem domain, and his program exactly
specified the way he solved their problems.&lt;/p&gt;

&lt;p&gt;Together with the client, Sam sat down and looked at the code. The client wasn&amp;#8217;t
able to program at all, but was able to read what Sam wrote. Together, they did
some pair-programming to fix the logical errors that got lost during
communication.
This is a prime example of domain specific languages, and one of the
best examples of clear communication in software I&amp;#8217;ve seen so far.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2991052&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Be Visible</title>
          <link>http://chris.eidhof.nl/post/be-visible/</link>
          <pubDate>Mon, 12 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/be-visible/</guid>
          <description>&lt;p&gt;Whatever you are doing, make sure you&amp;#8217;re visible. Don&amp;#8217;t fear embarrassment and
publish yourself, in whichever form. Here are three stories:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As I wrote in an &lt;a href=&#34;http://chris.eidhof.nl/post/9873846899/ive-got-an-idea-for-an-app&#34;&gt;earlier post&lt;/a&gt;, I became iPhone developer by chance. Just
for fun, we created a game called &lt;a href=&#34;http://cookiecombo.com/&#34;&gt;CookieCombo&lt;/a&gt; to play around with the
iPhone SDK, which came out a few months earlier. We tweeted about it, and got
two instant gigs out of it: we built the app for Wakoopa and the app for NRC
(a leading Dutch newspaper). After that, we were the guys who built NRC, and got
many gigs out of that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Blogging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since I started blogging, I got a lot of followers on Twitter, on Tumblr and a
lot of email. I&amp;#8217;m definitely not the best developer out there (although I
consider myself competent enough), but I am easy to find. People stumble upon my
blog, and come to me with their iPhone idea.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speaking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By speaking at small meetups or conferences, I made a lot of friends. 
If you write or speak about a topic, people consider you an expert. When I was
freelancing, a lot of people referred potential clients to me, because they
remembered me from one of these events.&lt;/p&gt;

&lt;p&gt;The key takeaway point is: be publicly visible. Put yourself out there:
write, speak, blog, tweet, help, teach, email, whatever works for you. This has
the awesome side effect that &lt;em&gt;people find you&lt;/em&gt;. Instead of having to search for
clients, they come to you. Instead of having to find a good designer for your
project, they might approach you because they want to work with you.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2986197&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Crossing the chasm between design and code</title>
          <link>http://chris.eidhof.nl/post/crossing-the-chasm-between-design-and-code/</link>
          <pubDate>Fri, 09 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/crossing-the-chasm-between-design-and-code/</guid>
          <description>&lt;p&gt;Recently there was an &lt;a href=&#34;http://flyosity.com/application-design/if-you-can-think-design-code-you-win.php&#34;&gt;excellent post by Mike
Rundle&lt;/a&gt;
about how one person can be a designer and programmer at once.&lt;/p&gt;

&lt;p&gt;I think having a designer and programmer in the same person is a great idea. I
wish I would be better at design (not only do I lack experience, I&amp;#8217;m also not sure if I would
have the patience to become a good designer).&lt;/p&gt;

&lt;p&gt;When I&amp;#8217;ve worked with designers before, I sometimes noticed that they would just
give me a design to implement, which I did. If something didn&amp;#8217;t work on the
iPhone (for example, creating an endless navigation structure) I would report
back.&lt;/p&gt;

&lt;p&gt;There is a problem with this: often times, there is a gap between the knowledge
of the designer and the programmer. The designer doesn&amp;#8217;t always know what&amp;#8217;s
technically possible, what&amp;#8217;s simple or what&amp;#8217;s a good idea. On the other side, a
programmer often doesn&amp;#8217;t know what makes good design.&lt;/p&gt;

&lt;p&gt;I think the best teams are with people who have an &lt;em&gt;overlap&lt;/em&gt;, instead of a gap.
For example, if a designer knows how to program, they know the kind of things that are
possible. Also, programmers need to know more about design.&lt;/p&gt;

&lt;p&gt;One good example of where this is done is the &lt;a href=&#34;http://functionsource.com/post/beautiful-forms&#34;&gt;Square credit card
field&lt;/a&gt;, which
is not just design or programming, but really achieves synergy by combining
them.&lt;/p&gt;

&lt;p&gt;Another thing is animations: a lot of designers aren&amp;#8217;t used to this yet, mostly
designing interfaces that don&amp;#8217;t animate. Programmers often don&amp;#8217;t know when it&amp;#8217;s
useful or meaningful to do an animation. They just want the button to do what
it&amp;#8217;s supposed to do. If we both move a bit closer towards each other, I
imagine it could improve software a lot.&lt;/p&gt;

&lt;p&gt;To come back to Mike&amp;#8217;s article, when one person knows how to design and code,
there is no gap between that knowledge. A very powerful combination indeed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2977914&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>So, you want to build an app together?</title>
          <link>http://chris.eidhof.nl/post/so-you-want-to-build-an-app-together/</link>
          <pubDate>Thu, 08 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/so-you-want-to-build-an-app-together/</guid>
          <description>&lt;p&gt;If you do have an idea for an iPhone app, I want to ask you these questions.
These should hopefully validate your idea and commitment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does it exist already?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Have you searched the App Store and the internet? Also for different keywords?
If it does exist, how are you going to differentiate?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How will you make money with it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Will you sell the app, or make it free? Will it be ad-based? Do you sell in app
purchases? Are you going to sell virtual products? Does it only work if you need to
circumvent Apple&amp;#8217;s payment system?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How are you going to do the marketing?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The App Store is getting crowded, and you need to have a better plan than: &amp;#8220;We
will get to the top lists because this idea is so awesome, and once we&amp;#8217;re there
we&amp;#8217;ll be RICH.&amp;#8221;&lt;/p&gt;

&lt;hr&gt;&lt;p&gt;The three questions above are the most important. If you have good answers, we
can continue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you want to work with me?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Revenue sharing? Do you want to hire me? If you&amp;#8217;re willing to pay, this is a
very good indicator that you&amp;#8217;re serious. If you&amp;#8217;re unwilling to spend any money on it, you have to ask yourself whether you really want to do it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who will do the visual design?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you have a graphical designer on board? Do you want to spend money on it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are your future plans with the idea?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Can you build different variants? Do you want to apply it to different markets?
How long will you need me for? Only the first version, or for the long term?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How much time will &lt;em&gt;you&lt;/em&gt; spend on it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t believe in working &amp;#8220;every day after work for 6 hours&amp;#8221;. You need to relax
and take care of your friends and family too. Best case, in two hours after work
you might achieve the same productivity as one hour of normal work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who will build the web-part?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Often, an app needs a web part. For example, if you want to login users. If you
want to communicate between users. If you need to do push messages. For this,
you also need a developer. Who will do this part?&lt;/p&gt;

&lt;hr&gt;&lt;p&gt;There are a lot more questions to ask. Not only do these questions filter out
the good ideas, they also filter out whether or not you want to work on this
project. An idea is a good start, but are you willing to commit? Can you really
follow through?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2973731&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Why people love and hate Macs</title>
          <link>http://chris.eidhof.nl/post/why-people-love-and-hate-macs/</link>
          <pubDate>Wed, 07 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/why-people-love-and-hate-macs/</guid>
          <description>&lt;p&gt;Recently, I have been reading a bit about &lt;a href=&#34;http://en.wikipedia.org/wiki/Cognitive_dissonance&#34;&gt;cognitive
dissonance&lt;/a&gt;, and I am
fascinated by it. For example, &lt;a href=&#34;http://www.youtube.com/watch?v=korGK0yGIDo&#34;&gt;this
video&lt;/a&gt; shows a great example of
cognitive dissonance: if people get paid only a little for a boring task that
takes an hour, they experience dissonance, and need to justify it for
themselves. They will say they like doing the task. However, if people get paid
more, they don&amp;#8217;t need to justify it and will be honest about the task.
There are many more examples of this, which are fascinating and sometimes very
counter-intuitive.&lt;/p&gt;

&lt;p&gt;I think Apple&amp;#8217;s products also cause a lot of cognitive dissonance. Take, for
example, the people who have never used a Mac, don&amp;#8217;t own one and can&amp;#8217;t get one
(for example, they are .NET developers, or they can&amp;#8217;t spend the money). I&amp;#8217;ve seen many of these people
criticize Macs. This follows the classical pattern, as described on Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This example follows a pattern: one desires something, finds it unattainable,
   and reduces one&amp;#8217;s dissonance by criticizing it. Jon Elster calls this pattern
   &amp;#8220;adaptive preference formation.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, there is a second way in which cognitive dissonance manifests itself.
People who buy Apple products have typically spent a large sum of money on it (often more
than they would spend on a PC). These people then need to justify their
decision as the right one. This might be one of the hidden reasons Apple has
their cult-like following.&lt;/p&gt;

&lt;p&gt;In all fairness, I own a few Mac laptops, multiple iPhones and an iPad, and I
love them. I can argue why they are better, and have a number of good, rational
reasons. However, I wonder which part cognitive dissonance plays.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2968909&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>I&#39;ve got an idea for an app</title>
          <link>http://chris.eidhof.nl/post/ive-got-an-idea-for-an-app/</link>
          <pubDate>Tue, 06 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/ive-got-an-idea-for-an-app/</guid>
          <description>&lt;p&gt;I&amp;#8217;ve been an iPhone developer for over three years now. The first app I built
was CookieCombo. We sold enough copies to go bowling twice, but still it was
completely worth it. We tweeted about it, and got some awesome gigs out of that.
Everybody was in need of iPhone developers, and there was a huge shortage. Good
times.&lt;/p&gt;

&lt;p&gt;As more and more people got to know that I&amp;#8217;m an iPhone developer, I got to hear
the following phrase more often: &amp;#8220;Hey, you know, I got a great idea for an app&amp;#8221;.
It started with tech-savvy people saying this, but now it seems like everybody and their
mother has an idea.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m a nice guy, and always try to listen to people. I subscribe to the belief
that ideas aren&amp;#8217;t worth anything, and that it all comes down to good execution.
The ideas I hear invariably end with: &amp;#8220;I only need someone to build this&amp;#8221;. If
it&amp;#8217;s a bad idea, I try explain why. If it&amp;#8217;s a good idea, I try to explain the
amount of work they have to do to make it into a success.&lt;/p&gt;

&lt;p&gt;I once jokingly said that I should print some small cards with &amp;#8220;No, I won&amp;#8217;t
listen to your app idea&amp;#8221; and hand them out at parties whenever people approached
me. Because I want people to like me, I didn&amp;#8217;t do it.&lt;/p&gt;

&lt;p&gt;However, a month ago I got an email from a friend of my brother&amp;#8217;s about a &lt;em&gt;secret&lt;/em&gt;
app idea. Those are often the worst. He wanted to have a Skype meeting, and I said: &amp;#8220;Sure, let&amp;#8217;s do that. I
probably won&amp;#8217;t have time to build it, but at least I can help you and point out
the technical difficulties&amp;#8221;.&lt;/p&gt;

&lt;p&gt;His idea is just awesome. That&amp;#8217;s when I decided: always listen to ideas.
Most of them are probably another fart app, or a social network for sharing
pictures of coffee, but even if the odds are very small that it&amp;#8217;s a good idea,
the potential payoff for executing a great idea could be huge.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2965053&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How a burnout changed my life</title>
          <link>http://chris.eidhof.nl/post/how-a-burnout-changed-my-life/</link>
          <pubDate>Mon, 05 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-a-burnout-changed-my-life/</guid>
          <description>&lt;p&gt;In the previous two posts, I wrote about my burnout. First about how I got it,
then about how I dealt with it. I have the feeling it has changed me
permanently, but mostly in a good way.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t work as hard anymore. I don&amp;#8217;t want to work weekends and evenings. Of
course, every now and then I feel the urge to do something, but I try to
resist. I read more, and take more time to socialize.&lt;/p&gt;

&lt;p&gt;My job has changed from mostly programming to building products. This includes
programming, but also marketing, strategy, design, meeting people, writing and
more. For me, this is a more healthy mix at the moment. It&amp;#8217;s a big difference
from freelancing.&lt;/p&gt;

&lt;p&gt;The biggest change was that &lt;em&gt;I see programming as a means, not an end&lt;/em&gt;. This
manifests itself in a number of ways. I&amp;#8217;m not trying to write the perfect
program, framework or language anymore. They don&amp;#8217;t exist.&lt;/p&gt;

&lt;p&gt;Also, I don&amp;#8217;t want to use Haskell for everything anymore. I don&amp;#8217;t feel
frustrated by using Objective C for iPhone programming, or Ruby for web
programming. Whatever gets the job done fastest. Every now and then I think
about building a better language, and maybe I will someday, but not now.&lt;/p&gt;

&lt;p&gt;For almost every problem, I try to find existing libraries. I did not suffer
badly from the Not Invented Here
Syndrome before, but now it got even
better. I try to reuse code wherever possible, whether it&amp;#8217;s somebody else&amp;#8217;s code
or my own.&lt;/p&gt;

&lt;p&gt;So far, I&amp;#8217;m actually happy for the experience. A burnout is no fun, and it
was scary for me, afraid that I would never be able to go back. I am confident that I now
have found a better balance, and that I will be able to prevent it in the
future. We&amp;#8217;ll see!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2961692&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How I dealt with a burnout</title>
          <link>http://chris.eidhof.nl/post/how-i-dealt-with-a-burnout/</link>
          <pubDate>Fri, 02 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-i-dealt-with-a-burnout/</guid>
          <description>&lt;p&gt;This post is the second part of my series on burnout. &lt;a href=&#34;http://chris.eidhof.nl/post/9667398258/how-i-got-a-burnout&#34;&gt;Read the first part&lt;/a&gt; to
know how I got there.&lt;/p&gt;

&lt;p&gt;The first month after graduating, I spent exercising
and sitting on the couch. Exercising made me feel good, especially the running
pulled me through. However, still no joy in programming.&lt;/p&gt;

&lt;p&gt;It is interesting to note that I didn&amp;#8217;t feel down all the time, it was very much
work-related. Actually, most of the time I felt pretty OK. What worried me
though, is not knowing if the joy in my work would ever come back. And if it
wouldn&amp;#8217;t, I had no idea of what career to pursue.&lt;/p&gt;

&lt;p&gt;After two months, I reluctantly accepted a freelance gig. It would take
about six weeks, and the deliverables included an iPhone app, an iPad app, a web
application (both backend and frontend), and two Mac applications. It was very
interesting, and I managed to get everything done and got some money out of it
so I could pay the bills for the next few months. After the project was
done I didn&amp;#8217;t feel like doing anything for about two months, except for drinking coffee,
running, and meeting friends. After that, I went backpacking in Spain for about
a month, and when I came back (which was about half a year about my graduation)
I finally looked forward to getting back to work again. Still, programming
didn&amp;#8217;t give me as much joy.&lt;/p&gt;

&lt;p&gt;Fast forward another 6 months, during which I did some small consulting jobs,
gave a 5-week training on iOS development, and started a startup. I felt
well rested and looked forward to programming again. And when we started
programming, it was a lot of fun. Unfortunately, the startup didn&amp;#8217;t work, but I
realized that the worst was over.&lt;/p&gt;

&lt;p&gt;I had spent about a year doing as little as possible, programming-wise. I tried
not to force myself, and tried out building stuff every now and then. My
negative feelings slowly faded. I&amp;#8217;m not sure if this is the best approach, but
it worked for me.&lt;/p&gt;

&lt;p&gt;In the last months, I have been building iOS apps on my own. I went through a major
transformation during my burnout: I now see programming as a means, not an end.
And I&amp;#8217;m having lots of fun again.  More about that transformation and the
results in the &lt;a href=&#34;http://chris.eidhof.nl/post/9828677336/how-a-burnout-changed-my-life&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2953399&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How I got a burnout</title>
          <link>http://chris.eidhof.nl/post/how-i-got-a-burnout/</link>
          <pubDate>Thu, 01 Sep 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-i-got-a-burnout/</guid>
          <description>&lt;p&gt;This post is the first part of a three-part series on burnout.  Two years ago, I told my then co-founder Eelco that I would leave the company in a few months. I didn&amp;#8217;t have a lot of fun programming anymore. We were a consulting company, building iPhone apps for clients.&lt;/p&gt;

&lt;p&gt;We started the company during our Master&amp;#8217;s, where we would program in Haskell all the time. However, iPhone apps are built in Objective C, which is almost the opposite in language design: Objective C is designed to be very practical and with a lot of low-level control, whereas Haskell started as a pure, math-like language and moved towards a more practical language. I found Haskell a lot more beautiful, for many reasons, and wanted to program in Haskell full-time.&lt;/p&gt;

&lt;p&gt;Fast-forward three months later, and we just got a request for a client project: it had to be done within two weeks, but we estimated it to be three weeks. We put in a lot of extra hours, cancelling all social appointments and working evenings and weekends. It was my last gig with the company, I didn&amp;#8217;t want to let Eelco or the client down and could use the money. After that, I was really, finally, completely done with both iPhone programming and client work. I did not feel good about it at all.&lt;/p&gt;

&lt;p&gt;I took a few days off and then proceeded to work full-time on my Master&amp;#8217;s thesis, which was about web programming in Haskell. During high school and my bachelor&amp;#8217;s, I had always tried to avoid putting effort into studying. However, my Master&amp;#8217;s was so awesome that I, for once, wanted to try to get good marks. Before I started my thesis I was completely on track for graduating cum laude, which had been my goal for two years. However, after I handed in my thesis, I got graded an 8.0 (out of 10), whereas the requirements for cum laude where at least an 8.5. My supervisors told me they even considered giving me a 7.5. A major setback.&lt;/p&gt;

&lt;p&gt;Also, during my work on web programming in Haskell I realized that practical web programming in Haskell still had a long way to go. Not only the tools, but also the community. For example, building something similar to Ruby on Rails is not that hard, but having the ecosystem that Rails has is very hard to replicate.&lt;/p&gt;

&lt;p&gt;After handing in my thesis, I couldn&amp;#8217;t bring myself to programming. This was what I had been doing since I was 12, it was my hobby, my study, big part of my social life, and my income. And I didn&amp;#8217;t like it anymore. It was hard to believe for me: before, I just couldn&amp;#8217;t tear myself away from it. I was always either building stuff or reading about it. Now it felt like it was over.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://chris.eidhof.nl/post/9700449196/how-i-dealt-with-a-burnout&#34;&gt;part 2&lt;/a&gt; I write about how I dealt with it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2950333&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lots of Test Projects</title>
          <link>http://chris.eidhof.nl/post/lots-of-test-projects/</link>
          <pubDate>Wed, 31 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/lots-of-test-projects/</guid>
          <description>&lt;p&gt;This might be a trivial thing, and I might be stupid for not having done with it all my life, but this was a big insight for me.  Only a few months ago, I really started making lots of small test projects to only test out a specific feature or solution. For example, I have a project that implements UITableViewCells with XIBs, a test project for working with local notifications, a test project to play around with rotation events and more. By doing these tests in a separate project, I get the following two advantages:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lower barrier to testing the new feature&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes when I want to test out a new feature in one of my apps I get held back by the fact that it might be complicated to implement. My code will get cluttered and I have to wade through lots of old code. I need to do lots of integration before I can even test it. This allows me to focus on the feature first and integrate it once I&amp;#8217;m happy with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future Reference&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Having these test projects around is great for future reference. The feature or solution is implemented on its own, so when I want to use it in a different project I don&amp;#8217;t have to separate it out from the rest of the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do you have any test projects? How do you organize code for future reference?  Keep a notebook? Just dig into old projects? Grep your repos? &lt;a href=&#34;http://news.ycombinator.com/item?id=2945167&#34;&gt;Discuss at Hacker News&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>A month of blogging</title>
          <link>http://chris.eidhof.nl/post/a-month-of-blogging/</link>
          <pubDate>Tue, 30 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/a-month-of-blogging/</guid>
          <description>&lt;p&gt;As a tribute to Gabriel Weinberg&amp;#8217;s &lt;a href=&#34;http://www.gabrielweinberg.com/blog/2011/08/why-i-blog.html&#34;&gt;Why I Blog&lt;/a&gt;, here&amp;#8217;s my experience about starting and committing to this blog. Even though I&amp;#8217;ve only been blogging for a month, it&amp;#8217;s already been a tremendous experience. Now that I&amp;#8217;m the rythm of writing a small article every workday, it seems hard to break that chain of posts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Helps you understand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I couldn&amp;#8217;t agree more with Gabriel, writing helps to understand yourself. Vague feelings have to be expressed using clear language. You start to think about what is important, and how to explain it. When I now think about a problem I can&amp;#8217;t help but thinking about how to write about it, which helps me focusing on understanding and explaining the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Great feedback and insights&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The feedback I got so far has been amazing. First of all, the discussions on Hacker News are so valuable and the commenters give such good insights. For example, take this comment by danieldk on yesterday&amp;#8217;s post:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;However paradoxical, minimalism can be also an be attachment. As Buddhists
  would say, take the middle road.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2936781&#34;&gt;(source)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, I&amp;#8217;ve gotten to know a lot of interesting people via e-mail, Skype, Twitter and even some in real life because of writing this blog. My life definitely feels richer for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public commitment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Making a &lt;a href=&#34;http://ezinearticles.com/?Cognitive-Dissonance-and-Public-Commitment&amp;amp;id=293095&#34;&gt;public commitment&lt;/a&gt; is shown to be a very effective way of getting things done. As for me, I&amp;#8217;ve made public commitment to become an indie developer and this helps me to push through the times of doubt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building an audience&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At this moment, a 101 people follow me on tumblr (a month ago it was 0 people).
On Twitter, I went from 488 followers a month ago to 663 at the moment of
writing. That&amp;#8217;s an increase of 49% in just a month, which I&amp;#8217;m very thankful for.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>On Minimalism</title>
          <link>http://chris.eidhof.nl/post/on-minimalism/</link>
          <pubDate>Mon, 29 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/on-minimalism/</guid>
          <description>&lt;p&gt;A few years ago, I first read &lt;a href=&#34;http://www.paulgraham.com/stuff.html&#34;&gt;Stuff&lt;/a&gt; by Paul Graham. The article really resonated with me, even though I was living in a small room at the time and didn&amp;#8217;t have that much stuff. In recent months, I have been discussing similar topics with some of my friends, philosofying about &lt;a href=&#34;http://en.wikipedia.org/wiki/Simple_living&#34;&gt;Minimalism&lt;/a&gt;, &lt;a href=&#34;http://en.wikipedia.org/wiki/Stoicism&#34;&gt;Stoicism&lt;/a&gt; and &lt;a href=&#34;http://en.wikipedia.org/wiki/Buddhism&#34;&gt;Buddhism&lt;/a&gt;. Since then, I have been actively trying to get rid of more stuff and making my life simpler in general. Below I discuss a couple of ways in which I implemented this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Less stuff&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first step is to have less stuff. Before I moved to Berlin, I got rid of most of the things I own. I still have some things in storage (for example, I couldn&amp;#8217;t bring myself to getting rid of my books). I went to Berlin with a suitcase and a small messenger bag. After my friend visited a few weeks ago, he took my suitcase and I&amp;#8217;m left with a backpack and a messenger bag. In Berlin, the only furniture I own is a mattress and a drying rack for my clothes (a chair and desk would have been nice, I admit). While this probably sounds very uncomfortable to you, it actually isn&amp;#8217;t, once you get used to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simpler eating&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few months ago I tried 30 days without any candy, crisps or soft drinks. I limited my food to three meals a day, no snacks in between. This felt great. I stopped worrying about what candy to eat next, felt healthier and emotionally more stable. Even though I didn&amp;#8217;t make it into a permanent habit and eat sugar again every now and then, I am considering doing the experiment again for a longer time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No apartment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I cancelled my apartment in The Netherlands. I now rent apartments for a short time (say, a few months). It feels very liberating to be able to cancel the rent, pack my stuff and move on. I don&amp;#8217;t get too attached to one place. Even though I&amp;#8217;m not sure whether I&amp;#8217;ll like it in the long run, it feels great right now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Simpler social life&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Berlin, I don&amp;#8217;t have nearly as many friends as in Utrecht. Whereas I used to have my agenda fully booked (read about &lt;a href=&#34;http://stuffdutchpeoplelike.com/2011/07/29/scheduling-agenda-appointments/&#34;&gt;Dutch people and Their Agendas&lt;/a&gt;), I now call people to meet instead of making an appointment to meet in a few weeks. Again, this makes my life so much simpler.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Information diet&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a step I still want to implement better: go on an &lt;a href=&#34;http://www.fourhourworkweek.com/blog/category/low-information-diet-and-selective-ignorance/&#34;&gt;information diet&lt;/a&gt;.  Three steps I already took: I haven&amp;#8217;t watched television for more than half a year, I have read about 10 newspapers in the last years, and last week I clicked &amp;#8220;unsubscribe&amp;#8221; in Google Reader instead of &amp;#8220;Mark all as read&amp;#8221; on about 20 blogs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kindle&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I love to read. A nice side-effect is that I had a good bookcase for showing off. The step to buying a Kindle was not an easy one, but has worked very well.  It takes a bit of getting used to, but I&amp;#8217;m a big fan now. I can take my books everywhere I want, and they are generally cheaper too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Where will this end? If I continue like this, will I find myself in a Tibetan monastery meditating in a few years from now? I don&amp;#8217;t think so. Even though I&amp;#8217;m slowly simplifying my life, I&amp;#8217;m sure I&amp;#8217;ll have a fallback every now and then.  There definitely is a tension between pleasure and minimalism, but so far I feel very happy. Keep reading this blog to find out what it&amp;#8217;s like in a few years from now.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2936432&#34;&gt;Discuss on Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Selecting which apps to build</title>
          <link>http://chris.eidhof.nl/post/selecting-which-apps-to-build/</link>
          <pubDate>Fri, 26 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/selecting-which-apps-to-build/</guid>
          <description>&lt;p&gt;I have a huge list of ideas for iPhone apps (and lots of other ideas). When I
last counted, there were over a hundred items on my list. How do I select which
apps to build?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, I need a way to do marketing. It helps a lot if it is a niche
product. For example, I have an idea for a very cool iOS marketplace site, but
it will be nearly impossible for me to do the marketing, as it is
targeted at everybody with an iPhone. Instead, TrackMe (my location tracking app) is a lot easier to
market: I want to be noticed by travelers, digital nomads and people interested
in quantified self.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ease of building&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I look at how hard it is to build the product. Can I manage with only an app, or
do I need a server as well? Do I master all the necessary technology? Is it very
design-intensive? Can I quickly hack together a prototype and test it? For
TrackMe, I was able to build a prototype in less than an hour and improved upon
that. A web app I once thought of (a Project Euler for web programming) takes a
few months to build, which is currently too long for me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Potential audience&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How big is the potential audience? Are they willing to pay? Am I part of it or
do I know people in the audience? Do people own iPhones?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Would I use it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For me, it really helps if I use the app all the time. This forces me to make it
very good and keep improving it as I think of simpler or better ways to do
things. For example, I once thought of an app to track
your client visits (in the Netherlands, people with a company car need to
track this). However, I don&amp;#8217;t own a car and am thus not going to use the app, so I
wont&amp;#8217;t be motivated to keep improving it. Instead, anything to do with
productivity, life hacks or travel I find extremely compelling. If you use your
own app all the time it can really help you to stay motivated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can I easily charge for it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As an indie developer, it is vital to make money with the things you build.
I once had the idea for a site with only Arthouse movie torrents.
Aside from not wanting to be involved in illegal or something in the gray area
around that, I think it would be virtually impossible to charge people for it.
Most iPhone apps are easier: you just put a price on it or charge a monthly
subscription.&lt;/p&gt;

&lt;p&gt;Which methods do you use to select the ideas you will work on? Please &lt;a href=&#34;http://news.ycombinator.com/item?id=2928614&#34;&gt;discuss at Hacker News&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>10 iPhone apps for backpackers</title>
          <link>http://chris.eidhof.nl/post/10-iphone-apps-for-backpackers/</link>
          <pubDate>Thu, 25 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/10-iphone-apps-for-backpackers/</guid>
          <description>&lt;p&gt;In this article I share with you the 10 apps that I used most during
backpacking. With these apps you&amp;#8217;ll travel without missing your laptop. If you
have any more favorite apps, please send them to me!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Camera&lt;/strong&gt; - Free&lt;/p&gt;

&lt;p&gt;This app is already installed, but there are some handy tricks for getting more
out of it when traveling. You can take pictures of timetables in railway
stations, pictures of maps (for example, floor plans or city maps) and pictures
of things you want to remember.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/offmaps-2/id403232367?mt=8&#34;&gt;OffMaps&lt;/a&gt;&lt;/strong&gt; - $ 0.99&lt;/p&gt;

&lt;p&gt;The app I use the most when travelling is OffMaps. It allows you to download
maps from OpenStreetMap and save it for offline use. When you don&amp;#8217;t have a data
plan that allows for free roaming, this is a great app. You can still use your
GPS and locate exactly where you are on the map. In the old version you pay a
one-time fee and can download as much as you want, in OffMaps 2 this behavior
has changed (you pay for maps too).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/hostelworld.com/id348890820?mt=8&#34;&gt;Hostelworld&lt;/a&gt;&lt;/strong&gt; - Free&lt;/p&gt;

&lt;p&gt;The Hostelworld app allows you to find and book hostels from your iPhone. It
does the job perfectly, allowing you to find accomodation with no pain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/db-navigator/id343555245?mt=8&#34;&gt;DB Navigator&lt;/a&gt;&lt;/strong&gt; - Free&lt;/p&gt;

&lt;p&gt;When you travel by train within Europe the DB Navigator app is a must. Use it to
find connections and to see where you are while you&amp;#8217;re on the train (especially
handy on longer trips).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/tourist-the-wikitravel-app/id378319877?mt=8&#34;&gt;Tourist&lt;/a&gt;&lt;/strong&gt; - $2.99&lt;/p&gt;

&lt;p&gt;Tourist downloads Wikitravel articles and saves them for offline use. The app
is handy but sometimes crashes and is a bit buggy. Nevertheless, the app is
worth the money. I sent an email to the developers regarding the bugs and hope
they will fix it soon.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/skype/id304878510?mt=8&#34;&gt;Skype&lt;/a&gt;&lt;/strong&gt; - Free&lt;/p&gt;

&lt;p&gt;I use Skype on my iPhone to stay in touch with friends and family. If you buy
Skype credit you can even make cheap phone calls to normal phones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/evernote/id281796108?mt=8&#34;&gt;Evernote&lt;/a&gt;&lt;/strong&gt; - Free&lt;/p&gt;

&lt;p&gt;Evernote is great for keeping track of your ideas, store trip information,
addresses and everything else. It syncs automatically so you can edit it on your
laptop too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/instapaper/id288545208?mt=8&#34;&gt;Instapaper&lt;/a&gt;&lt;/strong&gt; - $4.99&lt;/p&gt;

&lt;p&gt;I use Instapaper to read articles offline. Simply install the app and a
bookmarklet, and whenever you come across an interesting article on the web add
it to instapaper. When you&amp;#8217;re connected to the internet, sync your phone to
download your articles and read them offline.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/nl/app/captio-email-jezelf-met-1-tik/id370899391?mt=8&#34;&gt;Captio&lt;/a&gt;&lt;/strong&gt; - $1.99&lt;/p&gt;

&lt;p&gt;Usually travelling inspires me and helps me think of new ideas. I use the
awesome Captio for quickly capturing ideas and sending them to my inbox. It is
my favorite iPhone app, also when I&amp;#8217;m not traveling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://itunes.apple.com/us/app/trackme/id454704336?ls=1&amp;amp;mt=8&#34;&gt;TrackMe&lt;/a&gt;&lt;/strong&gt; - $1.99&lt;/p&gt;

&lt;p&gt;Of course, I should end with some self promotion. TrackMe keeps your location
data and allows you to export it later on. For example, &lt;a href=&#34;http://yfrog.com/gze2gbej&#34;&gt;here&amp;#8217;s a
screenshot&lt;/a&gt; of my
last backpacking trip through Romania, Ukraine and Moldova.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Book Review: Start Small, Stay Small</title>
          <link>http://chris.eidhof.nl/post/book-review-start-small-stay-small/</link>
          <pubDate>Wed, 24 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/book-review-start-small-stay-small/</guid>
          <description>&lt;p&gt;This blog post will be a bit different from previous ones: a book review. Before
I went on a two week holiday I got a lot of responses to my previous articles
from awesome Hacker News community members. &lt;a href=&#34;http://datawalke.com/&#34;&gt;Jim Walker&lt;/a&gt; recommended me the book
&lt;a href=&#34;http://www.amazon.com/Start-Small-Stay-Developers-Launching/dp/0615373968/&#34;&gt;&#34;Start Small, Stay Small: A Developer&amp;#8217;s guide to launching a
startup&#34;&lt;/a&gt;. I
immediately bought it on my Kindle (it&amp;#8217;s only $11) and started reading in the
plane to Romania.&lt;/p&gt;

&lt;p&gt;The book is just great. It&amp;#8217;s for developers who want to sell their software. It
focuses on doing market research, explains how to do marketing and more. The
gist of the book is: as developers, we know how to code, the book shows 
everything else you need to do to be a successful independent software vendor.&lt;/p&gt;

&lt;p&gt;This is not about creating startups, but about setting up a lifestyle business.
However, a lot of these lessons apply to doing a startup too. For example, the
book explains the market-first approach, which is very reminiscent of the Lean
Startup approach. It is all about dominating a niche (for example, making
invoicing software for landscape architects).&lt;/p&gt;

&lt;p&gt;The book is packed with useful tips, and I spent a lot of time marking passages, underlining things and jotting down to-do&amp;#8217;s. A lot of the things are straightforward and there are no
things that are radically different, but it&amp;#8217;s great to see it all summed up and
explained nicely. One thing that I didn&amp;#8217;t hear before:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Work hard and play hard, but never do both at the same time. Numerous times
  throughout the day ask yourself: &amp;#8220;At this very moment, am I making progress
  towards crossing off a to-do, -or- am I relaxing and re-energizing?&amp;#8221;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;#8217;s not so much about working harder, but about clearly making a distinction
between work and relaxation.&lt;/p&gt;

&lt;p&gt;One of my next actions based on the book is to create a great marketing plan for
&lt;a href=&#34;http://eidhof.nl/trackme/&#34;&gt;TrackMe&lt;/a&gt;: I set up a &lt;a href=&#34;https://twitter.com/trackmeapp&#34;&gt;Twitter account&lt;/a&gt;, I&amp;#8217;ll add
a mailing list, try to get featured on relevant sites (&lt;a href=&#34;http://lifehacker.com/&#34;&gt;Lifehacker&lt;/a&gt;, &lt;a href=&#34;http://quantifiedself.com/&#34;&gt;Quantified Self&lt;/a&gt;) and think of a good related whitepaper to write (which will drive traffic to TrackMe&amp;#8217;s website).&lt;/p&gt;

&lt;p&gt;Please leave your comments in the &lt;a href=&#34;http://news.ycombinator.com/item?id=2920214&#34;&gt;Hacker News discussion&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Off on a holiday</title>
          <link>http://chris.eidhof.nl/post/off-on-a-holiday/</link>
          <pubDate>Thu, 11 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/off-on-a-holiday/</guid>
          <description>&lt;p&gt;I&amp;#8217;m off to Romania, for a well-deserved holiday. We don&amp;#8217;t have a set plan, but will probably spend some time in Bucharest and at the Black Sea. I&amp;#8217;ll have lots of time to read and think, really looking forward to it!&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>I shipped my first product</title>
          <link>http://chris.eidhof.nl/post/i-shipped-my-first-product/</link>
          <pubDate>Wed, 10 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/i-shipped-my-first-product/</guid>
          <description>&lt;p&gt;Today, the first version of &lt;a href=&#34;http://eidhof.nl/trackme/&#34;&gt;TrackMe&lt;/a&gt; is available
from the &lt;a href=&#34;http://itunes.apple.com/us/app/trackme/id454704336?ls=1&amp;amp;mt=8&#34;&gt;App Store&lt;/a&gt;. This is my first product as an indie developer, and even though it&amp;#8217;s very simple, I&amp;#8217;m proud to have gone through the cycle of getting the idea, building it and releasing it.&lt;/p&gt;

&lt;p&gt;As you can read in my post &lt;a href=&#34;http://chris.eidhof.nl/post/8336661854/the-big-plan&#34;&gt;The Big Plan&lt;/a&gt;, one of the things I find difficult is shipping software. Specifically: my own software. It&amp;#8217;s different when you build something for a client or for a boss.&lt;/p&gt;

&lt;p&gt;I already submitted the next update to the App Store, as I accidentally didn&amp;#8217;t check whether the retina icon was working, and I fixed a small bug.&lt;/p&gt;

&lt;p&gt;I am strongly thinking of open sourcing the app as well (next to having it in the App
Store). My guess is that this will help people to analyze and trust the app, and
that it might be free promotion. What do you think?&lt;/p&gt;

&lt;p&gt;Please leave your comments in the &lt;a href=&#34;http://news.ycombinator.com/item?id=2867428&#34;&gt;Hacker News discussion&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Good coffeeshops in Berlin</title>
          <link>http://chris.eidhof.nl/post/good-coffeeshops-in-berlin/</link>
          <pubDate>Tue, 09 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/good-coffeeshops-in-berlin/</guid>
          <description>&lt;p&gt;If you&amp;#8217;re a digital nomad, you are always looking for good places to work. In Berlin, there are a couple of good places with good wifi and coffee. Here is a list of the places where I like to work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.sanktoberholz.de/&#34;&gt;St. Oberholz&lt;/a&gt; - &lt;/strong&gt;&lt;a href=&#34;http://maps.google.nl/maps?q=st%20oberholz&amp;amp;um=1&amp;amp;ie=UTF-8&amp;amp;sa=N&amp;amp;hl=nl&amp;amp;tab=wl&#34;&gt;Rosenthaler Strasse 72&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is &lt;em&gt;the&lt;/em&gt;?place for a digital nomad. They serve excellent coffee, have good food and it is well known for being friendly towards people with laptops. Upstairs is extra seating available. Sometimes the wifi is a bit flaky.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.mein-haus-am-see.blogspot.com/&#34;&gt;Mein Haus am See&lt;/a&gt; &lt;/strong&gt;- &lt;a href=&#34;http://maps.google.nl/maps?q=mein%20haus%20am%20see&#34;&gt;Brunnestrasse 197 - 198&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Across the street from St. Oberholz, Mein Haus am See is a special place. A bit less well known, and more a bar than a coffee place. The coffee is not that good, but the wifi is a lot better than St. Oberholz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.cuccuma.de/&#34;&gt;Cuccuma&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;http://maps.google.nl/maps?q=Cuccuma&amp;amp;hl=nl&amp;amp;ll=52.490777,13.394351&amp;amp;spn=0.010779,0.019891&amp;amp;sll=52.490614,13.394361&amp;amp;sspn=0.011106,0.019891&amp;amp;z=16&#34;&gt;Zossener Strasse 34&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my favorite place to work. They have excellent coffee, good wifi, great service and nice sandwiches. Upstairs is a kind of balcony where you can sit and work while having a nice view on the street. Close to the Bergmanstrasse which is filled with nice restaurants and shops.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.blinis-espressolounge.de/&#34;&gt;Espresso Lounge&lt;/a&gt; &lt;/strong&gt;- &lt;a href=&#34;http://maps.google.nl/maps?q=espresso+lounge+berlin&amp;amp;hl=nl&amp;amp;ll=52.489477,13.393879&amp;amp;spn=0.005553,0.009946&amp;amp;sll=36.73878,-95.587706&amp;amp;sspn=58.519471,81.474609&amp;amp;z=17&amp;amp;iwloc=A&#34;&gt;Bergmanstrasse 92&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A nice place to work with good coffee. They don&amp;#8217;t really serve food, except for cake (the chocolate cake is really nice). Close to Cuccuma and on the Bergmanstrasse. In the back it&amp;#8217;s more quiet, in the front you have a nice street view.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://www.nstp.de/&#34;&gt;Wendel&lt;/a&gt;&lt;/strong&gt; - &lt;a href=&#34;http://maps.google.nl/maps?q=wendel+berlin&amp;amp;hl=nl&amp;amp;ll=52.500941,13.446751&amp;amp;spn=0.021265,0.039783&amp;amp;sll=52.489477,13.393879&amp;amp;sspn=0.005553,0.009946&amp;amp;fll=52.50337,13.443103&amp;amp;fspn=0.021264,0.039783&amp;amp;z=15&#34;&gt;Schlesische Strasse 42&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re not an early riser, Wendel might be the place for you. Fast internet and really good coffee. No real tables to work on, but very relaxed. They also have good lunch.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>How to succeed as a freelance developer</title>
          <link>http://chris.eidhof.nl/post/how-to-succeed-as-a-freelance-developer/</link>
          <pubDate>Mon, 08 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/how-to-succeed-as-a-freelance-developer/</guid>
          <description>&lt;p&gt;In this article, I will share some tips on how to succeed as a freelance developer. This is only a short list, and there is a lot more to it. As a precondition, it is important to know your tools. Make sure you can deliver. ?Once you&amp;#8217;re ready to take on jobs, you can do any of the things below. Note that most work on the long term. It&amp;#8217;s not uncommon that somebody hires or recommends you more than a year after you met her for the first time. ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make sure you&amp;#8217;re remembered for one thing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It really helps if you are just doing one thing. For example, Ruby on Rails development. Or iOS development. Or Wordpress plugin developer. This makes it a lot easier for people to remember you. When you do &amp;#8220;everything&amp;#8221; people will not immediately think of you when they have a specific problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Go to tech meetups&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to small tech meetups in your area. A few years ago, I used to go to the Amsterdam and Utrecht Ruby meetups. I met a lot of other cool techies here, some of these hired me and a lot of them recommended me (and the other way around, of course). ?At big conferences, it is a lot easier to hide from socializing or to only talk to people very briefly. ?The smaller the meetup, the better, because this means you will actually get to know?people.?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Give presentations&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once you go to tech meetups, you can also consider presenting there. For example, a library that you use or wrote or a side project. People will like you for giving something back and you will gain authority.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Become active in the community&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can become active in the online tech community as well. For example, help newbies on mailing lists. People will start to recognize your name and might approach you either online or offline to help out with their projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Work in co-working spaces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It helps to work in a place with lots of other small companies, such as a co-working space or incubator. If one of the companies in the same space is looking for a developer and they can just walk to your office you&amp;#8217;re a big step ahead of the competition. I would almost always prefer hiring somebody I met in real life over somebody I only met over the phone or online. ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use social media&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Blogging and social media like Twitter can give you more visibility. People can find you instead of you having to find them. When &lt;a href=&#34;http://twitter.com/eelco&#34;&gt;Eelco&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/#!/martijnreintjes&#34;&gt;Martijn&lt;/a&gt; and I started building an iPhone game a few years ago (a few months after the SDK was released) we tweeted about it. We didn&amp;#8217;t plan to become iPhone developers, but the market was just &lt;em&gt;demanding&lt;/em&gt; it after we tweeted about it.&lt;/p&gt;
&lt;p&gt;When I still was part of &lt;a href=&#34;http://tupil.com/&#34;&gt;Tupil&lt;/a&gt;, we blogged about Haskell every now and then, which (among other things) gave us quite some visibility within the Haskell community, and here too we had multiple requests from potential clients.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discussion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of other ways to get clients. I look forward to seeing your tips and tricks, please share them in the &lt;a href=&#34;http://news.ycombinator.com/item?id=2861072&#34;&gt;discussion at Hacker News&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Why I want to become rich</title>
          <link>http://chris.eidhof.nl/post/why-i-want-to-become-rich/</link>
          <pubDate>Fri, 05 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/why-i-want-to-become-rich/</guid>
          <description>&lt;p&gt;My ambition is to become a millionaire by the time I&amp;#8217;m 30 years old. That gives me about 3.5 more years to accomplish that goal. Even though I&amp;#8217;m really happy where I am now and have enough money to live off, I still aim for bigger things.&lt;/p&gt;
&lt;p&gt;The reason is not that I want to have more expensive houses or more stuff. I&amp;#8217;m not a sucker for luxury (yet?). ?In fact, I&amp;#8217;ve been reducing the amount of stuff I own considerably, living out of a suitcase and planning to live out of a backpack. I canceled my apartment too, and don&amp;#8217;t own a car or other things. I&amp;#8217;m not planning to become rich so I never have to work anymore either, because I love building new stuff and creating value.&lt;/p&gt;
&lt;p&gt;For me, the reason why I want to be rich is to have even more freedom. I would like to take on bigger projects. I&amp;#8217;m now at the point where I can comfortably take care of myself, but it would be awesome to be able to hire other people. I don&amp;#8217;t have enough money yet to work on projects that take years before they become profitable, but do have some big ideas with those constraints.&lt;/p&gt;
&lt;p&gt;This is my reason. Why are you trying to become rich? Or why not?&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2849900&#34;&gt;Discuss at Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Why I develop for iOS</title>
          <link>http://chris.eidhof.nl/post/why-i-develop-for-ios/</link>
          <pubDate>Thu, 04 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/why-i-develop-for-ios/</guid>
          <description>&lt;p&gt;Sometimes I ask myself the question: why do I develop for iOS? I could also do Haskell development, do cool HTML5 stuff, or build compilers. As an indie developer, these are some important reasons for me.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High-end platform&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The iPhone and iPad are the high-end of the smartphones and tablets. This means that the people who use it are willing to pay more money for a better experience. As a side effect, they are also willing to pay for apps, and willing to pay for in-app purchases. For an indie developer, this is great. The more willing your customers are to spend, the better it is for us. Ultimately, it comes down to the developer making something that is worth the money, but it&amp;#8217;s a lot easier to sell to high-end customers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Closed environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of disadvantages to having a closed environment, which is beyond the scope of this post. However, for customers it is mostly a big advantage: they can trust the applications. Because every single application has been reviewed by Apple, they know they can trust it. Because in-app purchases are built into the iOS Platform, they know they can trust the payments, which again makes it easier for developers to charge for something.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lots of possibilities for innovation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Innovation can definitely be everywhere, but I have the feeling we&amp;#8217;re still only seeing the tip of the iceberg when it comes to innovation on mobile devices. ?There is so much more we can still do with the location sensors, the fact that we &lt;em&gt;always&lt;/em&gt; carry our phones, always have an internet connection, et cetera. ?With the web or on the desktop there is still a lot of room for innovation too, but it is a lot harder to come up with new ideas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;More difficult than web development&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is more difficult to get started with iOS programming than with web development. You need to do memory management, need to work with design patterns, learn a new language, and more. In web development, you can gradually ease in to it by first modifying HTML, then building your own HTML site, adding PHP, and so on. This makes the barrier to entry harder, which means it is easier to get noticed as an iOS developer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Great libraries&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apple provides awesome libraries. Even though I don&amp;#8217;t like Objective-C so much, the frameworks they provide are really great. For example, animation is super-easy, and everything is very well thought out. This makes it a pleasure to work with.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Culture of quality&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On Mac and iOS, there has always been a culture of quality. Applications are very polished, and you can see that developers really put effort into building their products. This is a lot of fun and very inspiring for a developer. It pushes you to raise the bar and have higher standards. The defaults provided by Apple are very high quality too, which means it&amp;#8217;s easy to build something that works and looks good.&lt;/p&gt;
&lt;p&gt;These are the reasons why I choose to develop for iOS. Of course, it is very?biased, so I look forward to seeing your comments.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2845282&#34;&gt;Discuss at Hacker News&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Plan it the night before</title>
          <link>http://chris.eidhof.nl/post/plan-it-the-night-before/</link>
          <pubDate>Wed, 03 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/plan-it-the-night-before/</guid>
          <description>&lt;p&gt;About a week ago, I read &lt;a href=&#34;http://www.startupsopensourced.com/2011/07/28/19-year-old-stanford-ph-d-dropout-andrew-hsu-is-changing-education/%20&#34;&gt;this interview&lt;/a&gt; with Andrew Hsu. He said one of his ways to be productive is making your todo-list the night before. I&amp;#8217;ve tried this for a few days now, and it seems to work. For the last few day, I really got a lot done.&lt;/p&gt;
&lt;p&gt;One of the reasons why I think it works is because it can help you focus on the right tasks. Stephen Covey wrote about his &lt;a href=&#34;http://c2.com/cgi/wiki?FourQuadrants&#34;&gt;four quadrants&lt;/a&gt;, which can help to classify your tasks. On one axis, you have important and non-important tasks, on the other axis there are urgent and non-urgent tasks. We naturally give priority to urgent tasks, whether they are important or not. What often gets postponed is the important but non-urgent tasks. &lt;em&gt;By making your todo-list the night before, it can help you to focus on the important tasks.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2840964&#34;&gt;Discussion on Hacker News&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>On Berlin</title>
          <link>http://chris.eidhof.nl/post/on-berlin/</link>
          <pubDate>Tue, 02 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/on-berlin/</guid>
          <description>&lt;p&gt;Ever since I first got to Berlin, about 7 years ago, I fell in love with the city. Four years ago I spent my first summer in Berlin, living in Prenzlauer Berg. The city offers all I wanted: awesome parties, cheap rents, easy to find a house, very diverse but low-priced food, lots of other young people, very laid back and quite alternative.&lt;/p&gt;
&lt;p&gt;Now it&amp;#8217;s 2011, and I love Berlin even more. It&amp;#8217;s a really good place now to do a startup, as you have lots of other people doing startups, cheap office space, and all of the things mentioned above. However, as this is the third time I spent the entire summer in Berlin, things have changed a little. While the city is still as cool as ever, I changed. I don&amp;#8217;t feel the same excitement anymore. ?The city really has become a comfortable place for me, with all my favorite hang outs.&lt;/p&gt;
&lt;p&gt;At this moment in my life, I want to travel. Not a different city every day, but switch cities every few months. Now that I have the time and money, I should also just do that. I&amp;#8217;ll start with Granada in September, and not sure where I&amp;#8217;ll go after that. On my list are currently Istanbul, Budapest, NYC, SF, Portland, Indonesia, Thailand, Greece and Buenos Aires. I expect this list to keep growing as I see more and meet more interesting people.&lt;/p&gt;
&lt;p&gt;As for Berlin, I can really see my self settle down here, but not now. The city is just awesome. For those that haven&amp;#8217;t been here: you must go. It is still my favorite city. Berlin: it&amp;#8217;s not you, it&amp;#8217;s me. I hope we can still be friends.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>The Big Plan</title>
          <link>http://chris.eidhof.nl/post/the-big-plan/</link>
          <pubDate>Mon, 01 Aug 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/the-big-plan/</guid>
          <description>&lt;p&gt;&lt;p class=&#34;p1&#34;&gt;When I was 15, I started my first job as a web developer. I worked for a local computer repair shop, and the clients needed websites, so I designed and built them. I built my first CMS, which my boss dubbed IWOS: Internet Web Online System. I guess that I already learned at that time that having a boss can suck. Fast forward 11 years later, I have had numerous development jobs. For the last few years, I&amp;#8217;ve been a freelance developer. About 3 months ago, I decided to move to Berlin to start a startup with somebody else, which unfortunately didn&amp;#8217;t work out (I might blog more on that later). However, going back to freelance development doesn&amp;#8217;t feel quite right, I really have the urge to do work that lasts longer, to create products instead of doing projects.&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;I&amp;#8217;m now in a position where I can do that: I have some money saved up, have front-end and back-end skills, can develop iOS appliactions, have read a lot about startups and products, don&amp;#8217;t have big commitments, not planning to start a family soon, don&amp;#8217;t own a house: &lt;em&gt;there really is no more reason to procrastinate longer&lt;/em&gt;. I have a lot of ideas for applications, and going to release my first application soon (an app that tracks your location permanently, stores it in a database and lets you export all the data via email). I will use this blog to update on my progress.&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;My goal is to set up &lt;em&gt;multiple passive sources of income&lt;/em&gt; by selling software. Specifically, I am going to focus on building iOS apps, which I think is the most interesting platform now. In 9 months from now, I want to be able to live off of the income I am making by selling software. I want to have &lt;em&gt;at least 3 products that are available for sale&lt;/em&gt;. Until I reach that goal, I am going to make sure my savings will not fall below a certain threshold by doing some freelance jobs. Another important goal is to &lt;em&gt;stay location independent&lt;/em&gt;: I am now living in Berlin, but am going to Spain for a few months, and maybe to a different continent after that.&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;For me, the most difficult thing will be actually shipping software. I can start really quickly on a project and crank out a lot of code in very little time, but when it comes to polishing the details and doing the non-programming work I tend to slack off. Therefore, by making this public commitment I hope to push myself a little, and also inspire other people. By the way, my biggest source of inspiration is the &lt;a href=&#34;http://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt; community.?&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;Stay tuned for more news and product releases.&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=2831499&#34;&gt;Discussion on Hacker News&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>30 day experiment: no more sugar</title>
          <link>http://chris.eidhof.nl/post/no-more-sugar/</link>
          <pubDate>Sun, 31 Jul 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/no-more-sugar/</guid>
          <description>&lt;p&gt;&lt;p class=&#34;p1&#34;&gt;Ever since I heard about &lt;a title=&#34;30 days to success&#34; href=&#34;http://www.stevepavlina.com/blog/2005/04/30-days-to-success/&#34;&gt;30 day challenges&lt;/a&gt;, I have loved the idea. About 6 weeks ago, it was time for a new 30 day challenge: cutting out sugar. I have been a sugar addict for a long time: I can always eat sugary stuff and have a constant craving. I thought that this would be the hardest thing I had ever done (and I&amp;#8217;ve done things like running a half marathon). The experiment was more an experiment in self-control than an experiment to stay healthy (I have a pretty good bodyweight because I run a lot).&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;On my list of things not to eat was candy, crisps, cookies, ice cream, etcetera. I didn&amp;#8217;t want to drink normal sodas either (diet sodas, however, were allowed). When heaving breakfast, lunch or dinner the cooks oftentimes put sugar in your meals, I didn&amp;#8217;t care about that. As long as I could stick to three regular meals a day, nothing in between and no desserts I would be happy. There was one big exception: after running I allowed myself to drink chocolate milk, which is a &lt;a href=&#34;http://www.acsm.org/AM/Template.cfm?Section=About_ACSM&amp;amp;TEMPLATE=/CM/HTMLDisplay.cfm&amp;amp;CONTENTID=14752&#34;&gt;really good recovery drink&lt;/a&gt;, high on both carbs and proteins. The day before the experiment, I had a lot of sugar: chocolate, ice cream, sodas and more.&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;When the experiment started, I immediately noticed how it wasn&amp;#8217;t as hard as expected. After about a week, it didn&amp;#8217;t seem hard at all. I noticed how I had all these habits involving sugar (the candy that comes with the bill, a coke during dinner, bringing a bag of candy on a long train ride, downing a box of orange tic-tacs). Before, I wasn&amp;#8217;t aware of all these habits, but the experiment made me notice. I also started noticing how &lt;em&gt;my happiness level during the day was more equal&lt;/em&gt;. No more sugar crashes, which made me feel quite stable.&lt;/p&gt;
&lt;p class=&#34;p1&#34;&gt;At the end of the experiment, I noticed how I actually liked it. I wasn&amp;#8217;t thinking anymore about the next opportunity to get some chocolate, it felt very natural. The first day after the experiment I again bought a big supply of sugary things and ate it all, and to be honest: I didn&amp;#8217;t really like it. I can still enjoy a piece of chocolate every now and then, but I don&amp;#8217;t like it as much as I used to. At the moment of writing, I&amp;#8217;ve decided to repeat the experiment again (but only for two weeks), just because it felt so good. &lt;em&gt;It&amp;#8217;s a lot easier not to eat any sugar at all than to eat a little bit.&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Analyzing a MySQL database with R</title>
          <link>http://chris.eidhof.nl/post/analyzing-a-mysql-database-with-r/</link>
          <pubDate>Fri, 22 Jul 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/analyzing-a-mysql-database-with-r/</guid>
          <description>&lt;p&gt;In this article, we analyze a MySQL database which contains soccer transfer data, using the R environment, on OS X. We show in a few simple steps how you can link the two together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span&gt;?&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Make sure you have a recent version of MySQL, and the latest version of R installed. As our graphical user interface, we use &lt;a href=&#34;http://rstudio.org/&#34;&gt;RStudio&lt;/a&gt;. From RStudio you can install the MySQL package: &lt;code&gt;install.packages(&#34;RMySQL&#34;)&lt;/code&gt;. If this doesn&amp;#8217;t work for you, please refer to the &lt;a href=&#34;http://biostat.mc.vanderbilt.edu/wiki/Main/RMySQL&#34;&gt;installation instructions&lt;/a&gt;. For plotting, install the ggplot2 library by issueing a &lt;code&gt;install.packages(&#34;ggplot2&#34;)&lt;/code&gt; in RStudio. Alternatively, you can use the graphical interface: in the bottom right panel, choose &amp;#8216;Packages&amp;#8217; and click &amp;#8216;Install Packages&amp;#8217;. This presents you with a dialog to choose a &lt;a href=&#34;http://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt; mirror, and a prompt where you can enter the package name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our MySQL database contains a table &lt;code&gt;transactions&lt;/code&gt;, which contains transaction data. The &lt;code&gt;transactions&lt;/code&gt; table has a column &lt;code&gt;transfer_value&lt;/code&gt; of type &lt;code&gt;float&lt;/code&gt;, which is what we are interested in. First, we generate a big list of all the transactions: &lt;code&gt;SELECT transfer_value FROM transactions&lt;/code&gt;, which generates a MySQL table with a single column that contains the transaction data.&lt;/p&gt;
&lt;p&gt;First, let&amp;#8217;s make sure the MySQL library is imported:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; library(RMySQL)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we connect to our database, which is named &lt;code&gt;soccer&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; con &amp;lt;- dbConnect(MySQL(), dbname=&#34;soccer&#34;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can start to issue queries:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; transfer_values &amp;lt;- dbGetQuery(con, &#34;select transfer_value from transactions&#34;)
&amp;gt; summary(transfer_values)
transfer_value    
Min.   :    5900  
1st Qu.:  500000  
Median : 1700000  
Mean   : 3688301  
3rd Qu.: 4500000  
Max.   :94000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This shows us a summary of the transfer values. The maximum is 94 million, which was Cristiano Ronaldo&amp;#8217;s transfer to Real Madrid. To look at how the numbers are distributed, we can plot them in a graph, using the &lt;code&gt;qplot&lt;/code&gt; function from the &lt;code&gt;ggplot2&lt;/code&gt; library, which is a convenience function that quickly generates &lt;code&gt;ggplot&lt;/code&gt; plot objects.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; library(ggplot2)
&amp;gt; qplot(transfer_values$transfer_value)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives us a nice picture, which looks like a &lt;a href=&#34;http://en.wikipedia.org/wiki/Power_law&#34;&gt;Power Law&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_loqsvzES871ql6bph.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;If we zoom in on the transfers up to 10 million, we get a more detailed picture, showing peaks at regular intervals: apparently, the soccer negotiators like nice round numbers too.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; qplot(transfer_values$transfer_value, xlim=c(0,1e07), binwidth=1e05, ylim=c(0,500))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://media.tumblr.com/tumblr_loqswmkrnV1ql6bph.png&#34;/&gt;&lt;/p&gt;
&lt;p&gt;For more info on the &lt;code&gt;qplot&lt;/code&gt; command, you can type &lt;code&gt;help(qplot)&lt;/code&gt;, and RStudio will show you the relevant help page on the bottom right.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even though we did very basic analysis of the data, we have seen how to connect R to MySQL and how to use the &lt;code&gt;ggplot2&lt;/code&gt; library to visualize the data.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;http://ptegelaar.nl/&#34;&gt;Peter Tegelaar&lt;/a&gt; for reading a draft of this post and helping with the code.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update: &lt;/em&gt;see &lt;a href=&#34;http://news.ycombinator.com/item?id=2828176&#34;&gt;Hacker News&lt;/a&gt; for the discussion.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Hello World!</title>
          <link>http://chris.eidhof.nl/post/hello-world/</link>
          <pubDate>Wed, 20 Jul 2011 00:00:00 UTC</pubDate>
          <author></author>
          <guid>http://chris.eidhof.nl/post/hello-world/</guid>
          <description>&lt;p&gt;From this new tumblr I&amp;#8217;ll be posting my random ramblings.&lt;/p&gt;{% endblock body %}
</description>
        </item>
      
    

  </channel>
</rss>
