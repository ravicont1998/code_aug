<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>michael jones | dev blog</title><link href="http://michaeljones.github.io/blog/" rel="alternate"></link><link href="http://michaeljones.github.io/blog/feeds/video.atom.xml" rel="self"></link><id>http://michaeljones.github.io/blog/</id><updated>2013-12-12T00:00:00+13:00</updated><entry><title>Video: Developers, Entrepreneurs and Depression</title><link href="http://michaeljones.github.io/blog/posts/2013/12/12/video-developers-entrepreneurs-and-depression/" rel="alternate"></link><updated>2013-12-12T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-12:blog/posts/2013/12/12/video-developers-entrepreneurs-and-depression/</id><summary type="html">&lt;p&gt;An excellent talk about going through and dealing with mental illness in the
form of Type II Bipolar and ADHD. I don't feel that I have had to deal with
these issues myself nor am I aware of any close friends going through it but I
am guilty of not understanding it well. Greg Baugues opens up the door a little
to allow me begin to see and understand what it might be to deal with these
conditions.&lt;/p&gt;
&lt;p&gt;He has given the talk a number of times as detailed and linked to on his
&lt;a class="reference external" href="http://blog.baugues.com/speaking"&gt;speaking page&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>Video Round Up</title><link href="http://michaeljones.github.io/blog/posts/2013/12/09/video-round-up/" rel="alternate"></link><updated>2013-12-09T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-12-09:blog/posts/2013/12/09/video-round-up/</id><summary type="html">&lt;p&gt;I've watched a few videos and listened to a few podcasts recently which deserve
a mention but which I failed to integrate into the journal entries. Mostly from
the &lt;a class="reference external" href="http://functionaltalks.org"&gt;functionaltalks.org&lt;/a&gt; site.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/06/10/brian-osullivan-running-a-startup-on-haskell/"&gt;Running a Startup on Haskell&lt;/a&gt; - Brian O'Sullivan&lt;/p&gt;
&lt;blockquote&gt;
An entertaining and quite casual talk taking an overview of the decisions
made in using Haskell for a startup. Not technical, I didn't have the slides
up and didn't feel like I missed anything.&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/07/03/katie-miller-superhero-monads/"&gt;Superhero monads&lt;/a&gt; - Katie Miller&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A look into Monads with attempts to illustrate their structure and use in
particular situations, mostly the &lt;tt class="docutils literal"&gt;Maybe&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;List&lt;/tt&gt; monads. Includes
reference code in Haskell and Java.&lt;/p&gt;
&lt;p&gt;It is interesting to see the Java implementations both for how much more
succinct the Haskell code is but also simply to show that it is possible to
use the idea of monads in other languages and to get a feel for what that
looks like.&lt;/p&gt;
&lt;p&gt;A good talk which happily provides another reference for learning monads and their potential.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/06/24/brian-mckenna-roy-rescuing-javascript-from-itself/"&gt;Roy: rescuing JavaScript from itself&lt;/a&gt; - Brian McKenna&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A short but interesting talk of a function language which compiles down to
Javascript and attempts to tackle some of the short comings in the target
language.&lt;/p&gt;
&lt;p&gt;An impressive collection of features insprired by functional languages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://functionaltalks.org/2013/07/21/wilkes-joiner-functional-reactive-programming/"&gt;Functional Reactive Programming&lt;/a&gt; - Wilkes Joiner&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A short introduction to FRP which doesn't necessarily have the time to do it
justice but is still an interesting watch. I've little experience with GUIs
and the kinds of event driven problems that the presenter demostrates solving
but the he makes a good case for the advertised approach being simple,
understandable and a great deal clearer that nested callbacks.&lt;/p&gt;
&lt;p&gt;I've no idea how it compares to other solutions to &amp;quot;callback hell&amp;quot; but it
seems to be backed by a number of big players.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.haskellcast.com/episode/004-simon-marlow-on-parallelism-and-concurrency/"&gt;Simon Marlow on Parallelism and Concurrency&lt;/a&gt; - Haskell Cast&lt;/p&gt;
&lt;blockquote&gt;
Podcast with Simon Marlow; covering his move to Facebook and his work on the
free book on Parallelism and Concurrency in Haskell.&lt;/blockquote&gt;
</summary></entry><entry><title>Video: Simple Made Easy</title><link href="http://michaeljones.github.io/blog/posts/2013/11/24/video-simple-made-easy/" rel="alternate"></link><updated>2013-11-24T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-11-24:blog/posts/2013/11/24/video-simple-made-easy/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;A talk&lt;/a&gt; from &lt;a class="reference external" href="http://thechangelog.com/rich-hickeys-greatest-hits/"&gt;Rich Hickey's Greatest Hits&lt;/a&gt; in which he tries to define a
difference between easy and simple and the importance of the latter. He
highlights various elements of a programmer's toolkit which promote simplicity
within your code base.&lt;/p&gt;
&lt;p&gt;It is definitely in favour of functional programming approaches, in particular
aspects of Clojure, unsurprisingly, and Haskell. Certainly makes me want to try
to pick up Clojure after Haskell.&lt;/p&gt;
&lt;div class="section" id="queues"&gt;
&lt;h2&gt;Queues&lt;/h2&gt;
&lt;p&gt;A particular 'Ah-ha' moment for me is where he emphasises the use of queues to
decouple two parts of a system. He recommends them over having part &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; call
directly into part &lt;tt class="docutils literal"&gt;B&lt;/tt&gt;. Whilst he does not go into detail on the concept, I
assume you have part &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; pushing items on to the queue and part &lt;tt class="docutils literal"&gt;B&lt;/tt&gt; reading
out of the queue to find its next workload.&lt;/p&gt;
&lt;p&gt;This is new to me as an idea but his phrasing: &amp;quot;if you're not doing this, start
doing it now&amp;quot;, reminds of the exactly what I resort to when I try to convey
aspects of programming that I consider important. Some ideas grow on you to seem
so critical that you just want people to embrace them now and learn the
importance for themselves through their own experience.&lt;/p&gt;
&lt;p&gt;That said, there is a huge amount to take away from this talk. The simple vs
easy division puts words to feeling I've had for a while and what frustrates me
in subtle ways about the way some people program.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="haskell"></category></entry><entry><title>Video: Rust - InfoQ</title><link href="http://michaeljones.github.io/blog/posts/2013/10/09/video-rust-infoq/" rel="alternate"></link><updated>2013-10-09T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-09:blog/posts/2013/10/09/video-rust-infoq/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.infoq.com/presentations/Rust"&gt;Short talk&lt;/a&gt; about the Rust
programming language from Mozilla. Excellent broad overview of the language
which gives a feel for what inspired it and what it is trying to achieve.&lt;/p&gt;
&lt;p&gt;To a C++ programmer that is growing frustrated with the growing complexity of
the language, Rust feels like it is a good thing.&lt;/p&gt;
&lt;p&gt;References the following blogs for more information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://smallcultfollowing.com/babysteps/"&gt;Baby Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pcwalton.github.com"&gt;pcwalton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="rust"></category></entry><entry><title>Video: Taste of Haskell - Part 1</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-1/" rel="alternate"></link><updated>2013-10-07T19:01:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-07:blog/posts/2013/10/07/video-taste-of-haskell-part-1/</id><summary type="html">&lt;p&gt;An &lt;a class="reference external" href="http://blip.tv/oreilly-open-source-convention/oscon-2007-simon-peyton-jones-a-taste-of-haskell-part-i-329701"&gt;OSCON 2007 talk&lt;/a&gt;
introducing Haskell to imperative programmers by Simon Peyton Jones.&lt;/p&gt;
&lt;p&gt;I like his pacing and attitude and I think there is a reasonable amount to be
learnt despite the fact that the slides are not provided on the site or
displayed in the video. I am sure they can be tracked down.&lt;/p&gt;
&lt;p&gt;I can't tell at the moment how much I understood purely from the quality of the
talk and how much from the previous efforts I've made to get to grips with
Haskell.&lt;/p&gt;
</summary><category term="haskell"></category></entry><entry><title>Video: Taste of Haskell - Part 2</title><link href="http://michaeljones.github.io/blog/posts/2013/10/07/video-taste-of-haskell-part-2/" rel="alternate"></link><updated>2013-10-07T00:00:00+13:00</updated><author><name>Michael Jones</name></author><id>tag:michaeljones.github.io,2013-10-07:blog/posts/2013/10/07/video-taste-of-haskell-part-2/</id><summary type="html">&lt;p&gt;Second half of the Simon Peyton-Jones' introduction to Haskell. If I was not
convinced before, I am now; this is a really excellent talk to give you some
background to Haskell and some pleasantly gentle steps towards understanding it.&lt;/p&gt;
&lt;p&gt;Provides examples of pure functions and combining them with code that needs to
do the IO before going on to discuss the wider Haskell community.&lt;/p&gt;
&lt;p&gt;I really love his presentation manner. It is quite disarming.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://blip.tv/oreilly-open-source-convention/oscon-2007-simon-peyton-jones-a-taste-of-haskell-part-ii-330372"&gt;Talk&lt;/a&gt;
and &lt;a class="reference external" href="http://research.microsoft.com/en-us/um/people/simonpj/papers/haskell-tutorial/"&gt;slides&lt;/a&gt;
(required as the video does not show them.)&lt;/p&gt;
</summary><category term="haskell"></category></entry></feed>